From dba7c37ea3d83b32779d3bb13cb184aedf761a8a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 30 Mar 2012 23:28:24 +0100
Subject: [PATCH 01/52] Add better null comment [3513326]

---
 src/main/java/org/joda/time/chrono/BaseChronology.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/main/java/org/joda/time/chrono/BaseChronology.java b/src/main/java/org/joda/time/chrono/BaseChronology.java
index cd9f61836..2a36fc656 100644
--- a/src/main/java/org/joda/time/chrono/BaseChronology.java
+++ b/src/main/java/org/joda/time/chrono/BaseChronology.java
@@ -174,7 +174,7 @@ public long getDateTimeMillis(long instant,
      * and {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.
      *
      * @param partial  the partial instant to validate
-     * @param values  the values to validate, not null
+     * @param values  the values to validate, not null unless the partial is empty
      * @throws IllegalArgumentException if the instant is invalid
      */
     public void validate(ReadablePartial partial, int[] values) {

From 706513d59425e7a9dc6bdb972f25b03b02e48558 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 30 Apr 2012 12:14:37 +0100
Subject: [PATCH 02/52] Fix DateTimeFormatter.parseInto() [3522138]

Revert behaviour back to v1.x when parseInto month/day only
---
 RELEASE-NOTES.txt                             | 65 ++++---------------
 .../joda/time/format/DateTimeFormatter.java   |  6 +-
 .../time/format/TestDateTimeFormatter.java    | 49 ++++++++++++++
 3 files changed, 66 insertions(+), 54 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 90b495791..c1ce71d76 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -1,10 +1,10 @@
-Joda-Time version 2.1
+Joda-Time version 2.2
 ---------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is the ninth release of Joda-Time.
+This is the tenth release of Joda-Time.
 This release contains enhancements, bug fixes and a time zone update.
 
 We require JDK 1.5 or later as features such as generics are used.
@@ -19,14 +19,11 @@ of restrictions. If the license causes you problems please contact the mailing l
 ** http://joda-time.sourceforge.net/related.html **
 
 
-Enhancements since 2.0
+Enhancements since 2.1
 ----------------------
-- Make DurationFieldType hash code deterministic
 
-- Add Period.multipliedBy(int) and Period.negated()
 
-
-Compatibility with 2.0
+Compatibility with 2.1
 ----------------------
 Binary compatible - Yes
 
@@ -38,60 +35,22 @@ Data compatible - Yes, except
  - DateTimeZone data updated to version 2011n
 
 Semantic compatible - Yes, except
- -  Date-time for time-zones with DST based on an offset of 00:00 now pick summer time when ambiguous
-
- -  Time-zone names now return correct results on JDK1.6 for non-English locales
+ - DateTimeFormatter.parseInto() retains the year if only month parsed (as it did in v1.x)
 
- - Interval/MutableInterval toString() now contains the time-zone offset
 
-
-Deprecations since 2.0
+Deprecations since 2.1
 ----------------------
 None
 
 
-Bug fixes since 2.0
+Bug fixes since 2.1
 -------------------
-- Ambiguous date-time when in zone with offset of 00:00 [3424669]
-  A date-time constructor with an ambiguous time due to DST should choose summer time
-  but for a zone with an offset of 00:00 it chose winter time
-
-- Fix GJChronology to allow some leap year dates in JulianChronology to be created [3446915]
-  Creating February 29th in Julian leap years was not always possible
-
-- Fix PeriodType caching
-  The caching could go wrong if the DurationFieldType instances were in the wrong order
-
-- Time-zone names [3412910]
-  Names now returned in locales other than English
-  The names may differ between JDK1.5 and 1.6 due to the underlying JDK data
-
-- Time zone id parsing fixed for some longer time zones [3427389]
-  Time zones like "America/Dawson_Creek" were not parsed as "America/Dawson" was matched first
-
-- Time zone later/earlier offset methods failed in Western hemisphere [3476684]
-  Previously, withLaterOffset() failed in the Americas, Now rewritten
-
- - Time zone id parsing of GMT offsets failed on Dalvik
-  This may be related to a JDK specification change between Java 1.6 and 1.7
-
-- Enhance readResolve() from LocalDate/LocalTime/LocalDateTime [3461008]
-  Handle even more weird deserialization problems with other tools
-
-- Tweaks to cached time-zone to try and avoid a NPE [3470276]
-
-- Fix multi-lingual period format for using English from another language default [3471414]
-  Previously, the word-based methods on PeriodFormat ignored the argument of English if the default
-  locale was non-English, now fixed
-
-- Interval/MutableInterval toString() now contains the time-zone offset [https://github.com/JodaOrg/joda-time/pull/2]
-
-- Fix multiplication of Long.MIN_VALUE by -1 in safeMultiply()
-
-- Fix validation in BasicChronology.getDateTimeMillis
- Previously this allowed a millisOfDay value one too large
+- DateTimeFormatter.parseInto() [3522138]
+  The v2.0 changes to handle parsing of month/day on their own (for Feb 29th) cause
+  parseInto() to lose the year. This fix reverts behaviour to v1.x so that parseInto()
+  will use the supplied year, not the default year of the formatter.
 
-- Javadoc fix to MutablePeriod [3413869]
+- Javadoc fix to BaseChronology [3513326]
 
 
 Scala
diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java
index f92771a10..baa276a5e 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java
@@ -21,6 +21,7 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTime;
+import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
 import org.joda.time.LocalDate;
@@ -679,6 +680,9 @@ private DateTimePrinter requirePrinter() {
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
+     * This parse method ignores the {@link #getDefaultYear() default year} and
+     * parses using the year from the supplied instant as the default.
+     * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
@@ -702,7 +706,7 @@ public int parseInto(ReadWritableInstant instant, String text, int position) {
         chrono = selectChronology(chrono);
         
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
+            instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));
         int newPos = parser.parseInto(bucket, text, position);
         instant.setMillis(bucket.computeMillis(false, text));
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
diff --git a/src/test/java/org/joda/time/format/TestDateTimeFormatter.java b/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
index 532637093..0152ce706 100644
--- a/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
@@ -863,6 +863,55 @@ public void testParseInto_chrono() {
         assertEquals(expect, result);
     }
 
+    public void testParseInto_monthOnly() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);
+        assertEquals(1, f.parseInto(result, "5", 0));
+        assertEquals(new MutableDateTime(2004, 5, 9, 12, 20, 30, 0, LONDON), result);
+    }
+
+    public void testParseInto_monthOnly_baseStartYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO);
+        assertEquals(1, f.parseInto(result, "5", 0));
+        assertEquals(new MutableDateTime(2004, 5, 1, 12, 20, 30, 0, TOKYO), result);
+    }
+
+    public void testParseInto_monthOnly_parseStartYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 2, 1, 12, 20, 30, 0, TOKYO);
+        assertEquals(1, f.parseInto(result, "1", 0));
+        assertEquals(new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO), result);
+    }
+
+    public void testParseInto_monthOnly_baseEndYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO);
+        assertEquals(1, f.parseInto(result, "5", 0));
+        assertEquals(new MutableDateTime(2004, 5, 31, 12, 20, 30, 0, TOKYO), result);
+   }
+
+    public void testParseInto_monthOnly_parseEndYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 31, 12, 20, 30, 0,TOKYO);
+        assertEquals(2, f.parseInto(result, "12", 0));
+        assertEquals(new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO), result);
+    }
+
+    public void testParseInto_monthDay_feb29() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);
+    }
+
+    public void testParseInto_monthDay_withDefaultYear_feb29() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withDefaultYear(2012);
+        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);
+    }
+
     public void testParseMillis_fractionOfSecondLong() {
         DateTimeFormatter f = new DateTimeFormatterBuilder()
             .appendSecondOfDay(2).appendLiteral('.').appendFractionOfSecond(1, 9)

From 383354adc669c3fd8d9e6fe3a25403df993e11e7 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 30 Apr 2012 12:18:02 +0100
Subject: [PATCH 03/52] Update time-zone data to 2012c

---
 RELEASE-NOTES.txt                             |   2 +-
 src/main/java/org/joda/time/tz/src/Readme.txt |   2 +-
 src/main/java/org/joda/time/tz/src/africa     |  36 ++++-
 src/main/java/org/joda/time/tz/src/antarctica |  21 ++-
 src/main/java/org/joda/time/tz/src/asia       |  72 +++++++++-
 .../java/org/joda/time/tz/src/australasia     |  28 +++-
 src/main/java/org/joda/time/tz/src/europe     |  14 +-
 .../java/org/joda/time/tz/src/northamerica    | 135 ++++++++++++++++--
 .../java/org/joda/time/tz/src/southamerica    |  53 ++++++-
 9 files changed, 329 insertions(+), 34 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index c1ce71d76..790834fc0 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -32,7 +32,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
- - DateTimeZone data updated to version 2011n
+ - DateTimeZone data updated to version 2012c
 
 Semantic compatible - Yes, except
  - DateTimeFormatter.parseInto() retains the year if only month parsed (as it did in v1.x)
diff --git a/src/main/java/org/joda/time/tz/src/Readme.txt b/src/main/java/org/joda/time/tz/src/Readme.txt
index a1a1121f3..1495eb3e5 100644
--- a/src/main/java/org/joda/time/tz/src/Readme.txt
+++ b/src/main/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2011n.
+http://www.twinsun.com/tz/tz-link.htm, version 2012c.
diff --git a/src/main/java/org/joda/time/tz/src/africa b/src/main/java/org/joda/time/tz/src/africa
index 87f57c650..98e0e73da 100644
--- a/src/main/java/org/joda/time/tz/src/africa
+++ b/src/main/java/org/joda/time/tz/src/africa
@@ -1,5 +1,5 @@
 # <pre>
-# @(#)africa	8.33
+# @(#)africa	8.35
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -768,6 +768,37 @@ Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
 # wall clock time (i.e. 11pm UTC), but that's what I would assume. It has
 # also been like that in the past.
 
+# From Alexander Krivenyshev (2012-03-09):
+# According to Infom&eacute;diaire web site from Morocco (infomediaire.ma),
+# on March 9, 2012, (in French) Heure l&eacute;gale:
+# Le Maroc adopte officiellement l'heure d'&eacute;t&eacute;
+# <a href="http://www.infomediaire.ma/news/maroc/heure-l%C3%A9gale-le-maroc-adopte-officiellement-lheure-d%C3%A9t%C3%A9">
+# http://www.infomediaire.ma/news/maroc/heure-l%C3%A9gale-le-maroc-adopte-officiellement-lheure-d%C3%A9t%C3%A9
+# </a>
+# Governing Council adopted draft decree, that Morocco DST starts on
+# the last Sunday of March (March 25, 2012) and ends on
+# last Sunday of September (September 30, 2012)
+# except the month of Ramadan.
+# or (brief)
+# <a href="http://www.worldtimezone.com/dst_news/dst_news_morocco06.html">
+# http://www.worldtimezone.com/dst_news/dst_news_morocco06.html
+# </a>
+
+# From Arthur David Olson (2012-03-10):
+# The infomediaire.ma source indicates that the system is to be in
+# effect every year. It gives 03H00 as the "fall back" time of day;
+# it lacks a "spring forward" time of day; assume 2:00 XXX.
+# Wait on specifying the Ramadan exception for details about
+# start date, start time of day, end date, and end time of day XXX.
+
+# From Christophe Tropamer (2012-03-16):
+# Seen Morocco change again:
+# <a href="http://www.le2uminutes.com/actualite.php">
+# http://www.le2uminutes.com/actualite.php
+# </a>
+# "...&agrave; partir du dernier dimance d'avril et non fins mars,
+# comme annonc&eacute; pr&eacute;c&eacute;demment."
+
 # RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 
 Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
@@ -793,6 +824,9 @@ Rule	Morocco	2010	only	-	May	 2	 0:00	1:00	S
 Rule	Morocco	2010	only	-	Aug	 8	 0:00	0	-
 Rule	Morocco	2011	only	-	Apr	 3	 0:00	1:00	S
 Rule	Morocco	2011	only	-	Jul	 31	 0	0	-
+Rule	Morocco	2012	max	-	Apr	 lastSun 2:00	1:00	S
+Rule	Morocco	2012	max	-	Sep	 lastSun 3:00	0	-
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
 			 0:00	Morocco	WE%sT	1984 Mar 16
diff --git a/src/main/java/org/joda/time/tz/src/antarctica b/src/main/java/org/joda/time/tz/src/antarctica
index d19fbde0f..2fca366d6 100644
--- a/src/main/java/org/joda/time/tz/src/antarctica
+++ b/src/main/java/org/joda/time/tz/src/antarctica
@@ -1,5 +1,5 @@
 # <pre>
-# @(#)antarctica	8.9
+# @(#)antarctica	8.10
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -42,8 +42,19 @@ Rule	ChileAQ	1997	only	-	Mar	30	3:00u	0	-
 Rule	ChileAQ	1998	only	-	Mar	Sun>=9	3:00u	0	-
 Rule	ChileAQ	1998	only	-	Sep	27	4:00u	1:00	S
 Rule	ChileAQ	1999	only	-	Apr	 4	3:00u	0	-
-Rule	ChileAQ	1999	max	-	Oct	Sun>=9	4:00u	1:00	S
-Rule	ChileAQ	2000	max	-	Mar	Sun>=9	3:00u	0	-
+Rule	ChileAQ	1999	2010	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	ChileAQ	2000	2007	-	Mar	Sun>=9	3:00u	0	-
+# N.B.: the end of March 29 in Chile is March 30 in Universal time,
+# which is used below in specifying the transition.
+Rule	ChileAQ	2008	only	-	Mar	30	3:00u	0	-
+Rule	ChileAQ	2009	only	-	Mar	Sun>=9	3:00u	0	-
+Rule	ChileAQ	2010	only	-	Apr	Sun>=1	3:00u	0	-
+Rule	ChileAQ	2011	only	-	May	Sun>=2	3:00u	0	-
+Rule	ChileAQ	2011	only	-	Aug	Sun>=16	4:00u	1:00	S
+Rule	ChileAQ	2012	only	-	Apr	Sun>=23	3:00u	0	-
+Rule	ChileAQ	2012	only	-	Sep	Sun>=2	4:00u	1:00	S
+Rule	ChileAQ	2013	max	-	Mar	Sun>=9	3:00u	0	-
+Rule	ChileAQ	2013	max	-	Oct	Sun>=9	4:00u	1:00	S
 
 # These rules are stolen from the `australasia' file.
 Rule	AusAQ	1917	only	-	Jan	 1	0:01	1:00	-
@@ -142,12 +153,16 @@ Zone Antarctica/Casey	0	-	zzz	1969
 						# Western (Aus) Standard Time
 			11:00	-	CAST	2010 Mar 5 2:00
 						# Casey Time
+			8:00	-	WST	2011 Oct 28 2:00
+			11:00	-	CAST	2012 Feb 21 17:00u
 			8:00	-	WST
 Zone Antarctica/Davis	0	-	zzz	1957 Jan 13
 			7:00	-	DAVT	1964 Nov # Davis Time
 			0	-	zzz	1969 Feb
 			7:00	-	DAVT	2009 Oct 18 2:00
 			5:00	-	DAVT	2010 Mar 10 20:00u
+			7:00	-	DAVT	2011 Oct 28 2:00
+			5:00	-	DAVT	2012 Feb 21 20:00u
 			7:00	-	DAVT
 Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
 			6:00	-	MAWT	2009 Oct 18 2:00
diff --git a/src/main/java/org/joda/time/tz/src/asia b/src/main/java/org/joda/time/tz/src/asia
index 925cc36f0..3be182e91 100644
--- a/src/main/java/org/joda/time/tz/src/asia
+++ b/src/main/java/org/joda/time/tz/src/asia
@@ -1,4 +1,5 @@
-# @(#)asia	8.69
+# <pre>
+# @(#)asia	8.73
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -77,10 +78,6 @@ Rule RussiaAsia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
 Rule RussiaAsia	1993	1995	-	Sep	lastSun	 2:00s	0	-
 Rule RussiaAsia	1996	max	-	Oct	lastSun	 2:00s	0	-
 
-# From Arthur David Olson (2011-06-15):
-# While Russia abandoned DST in 2011, Armenia may choose to
-# follow Russia's "old" rules.
-
 # Afghanistan
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Kabul	4:36:48 -	LMT	1890
@@ -97,6 +94,21 @@ Zone	Asia/Kabul	4:36:48 -	LMT	1890
 # in 1996, though it did use DST in 1995.  IATA SSIM (1991/1998) reports that
 # Armenia switched from 3:00 to 4:00 in 1998 and observed DST after 1991,
 # but started switching at 3:00s in 1998.
+
+# From Arthur David Olson (2011-06-15):
+# While Russia abandoned DST in 2011, Armenia may choose to
+# follow Russia's "old" rules.
+
+# From Alexander Krivenyshev (2012-02-10):
+# According to News Armenia, on Feb 9, 2012,
+# http://newsarmenia.ru/society/20120209/42609695.html
+# 
+# The Armenia National Assembly adopted final reading of Amendments to the
+# Law "On procedure of calculation time on the territory of the Republic of
+# Armenia" according to which Armenia [is] abolishing Daylight Saving Time.
+# or
+# (brief)
+# http://www.worldtimezone.com/dst_news/dst_news_armenia03.html
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Yerevan	2:58:00 -	LMT	1924 May  2
 			3:00	-	YERT	1957 Mar    # Yerevan Time
@@ -104,7 +116,8 @@ Zone	Asia/Yerevan	2:58:00 -	LMT	1924 May  2
 			3:00	1:00	YERST	1991 Sep 23 # independence
 			3:00 RussiaAsia	AM%sT	1995 Sep 24 2:00s
 			4:00	-	AMT	1997
-			4:00 RussiaAsia	AM%sT
+			4:00 RussiaAsia	AM%sT	2012 Mar 25 2:00s
+			4:00	-	AMT
 
 # Azerbaijan
 # From Rustam Aliyev of the Azerbaijan Internet Forum (2005-10-23):
@@ -2235,6 +2248,29 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # http://www.maannews.net/eng/ViewDetails.aspx?ID=424808
 # </a>
 
+# From Steffen Thorsen (2012-03-26):
+# Palestinian news sources tell that both Gaza and West Bank will start DST
+# on Friday (Thursday midnight, 2012-03-29 24:00).
+# Some of many sources in Arabic:
+# <a href="http://www.samanews.com/index.php?act=Show&id=122638">
+# http://www.samanews.com/index.php?act=Show&id=122638
+# </a>
+#
+# <a href="http://safa.ps/details/news/74352/%D8%A8%D8%AF%D8%A1-%D8%A7%D9%84%D8%AA%D9%88%D9%82%D9%8A%D8%AA-%D8%A7%D9%84%D8%B5%D9%8A%D9%81%D9%8A-%D8%A8%D8%A7%D9%84%D8%B6%D9%81%D8%A9-%D9%88%D8%BA%D8%B2%D8%A9-%D9%84%D9%8A%D9%84%D8%A9-%D8%A7%D9%84%D8%AC%D9%85%D8%B9%D8%A9.html">
+# http://safa.ps/details/news/74352/%D8%A8%D8%AF%D8%A1-%D8%A7%D9%84%D8%AA%D9%88%D9%82%D9%8A%D8%AA-%D8%A7%D9%84%D8%B5%D9%8A%D9%81%D9%8A-%D8%A8%D8%A7%D9%84%D8%B6%D9%81%D8%A9-%D9%88%D8%BA%D8%B2%D8%A9-%D9%84%D9%8A%D9%84%D8%A9-%D8%A7%D9%84%D8%AC%D9%85%D8%B9%D8%A9.html
+# </a>
+#
+# Our brief summary:
+# <a href="http://www.timeanddate.com/news/time/gaza-west-bank-dst-2012.html">
+# http://www.timeanddate.com/news/time/gaza-west-bank-dst-2012.html
+# </a>
+
+# From Arthur David Olson (2012-03-27):
+# The timeanddate article for 2012 says that "the end date has not yet been
+# announced" and that "Last year, both...paused daylight saving time during...
+# Ramadan. It is not yet known [for] 2012."
+# For now, assume both switch back on the last Friday in September. XXX
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
 Rule EgyptAsia	1957	1958	-	Oct	 1	0:00	0	-
@@ -2267,6 +2303,8 @@ Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
 			2:00	Jordan	EE%sT	1999
 			2:00 Palestine	EE%sT	2011 Apr  2 12:01
 			2:00	1:00	EEST	2011 Aug  1
+			2:00	-	EET	2012 Mar 30
+			2:00	1:00	EEST	2012 Sep 28
 			2:00	-	EET
 
 Zone	Asia/Hebron	2:20:23	-	LMT	1900 Oct
@@ -2280,6 +2318,8 @@ Zone	Asia/Hebron	2:20:23	-	LMT	1900 Oct
 			2:00	1:00	EEST	2011 Aug  1
 			2:00	-	EET	2011 Aug 30
 			2:00	1:00	EEST	2011 Sep 30 3:00
+			2:00	-	EET	2012 Mar 30
+			2:00	1:00	EEST	2012 Sep 28 3:00
 			2:00	-	EET
 
 # Paracel Is
@@ -2571,10 +2611,28 @@ Rule	Syria	2007	only	-	Nov	 Fri>=1	0:00	0	-
 # http://sns.sy/sns/?path=news/read/11421 (Arabic)
 # </a>
 
+# From Steffen Thorsen (2012-03-26):
+# Today, Syria's government announced that they will start DST early on Friday
+# (00:00). This is a bit earlier than the past two years.
+#
+# From Syrian Arab News Agency, in Arabic:
+# <a href="http://www.sana.sy/ara/2/2012/03/26/408215.htm">
+# http://www.sana.sy/ara/2/2012/03/26/408215.htm
+# </a>
+#
+# Our brief summary:
+# <a href="http://www.timeanddate.com/news/time/syria-dst-2012.html">
+# http://www.timeanddate.com/news/time/syria-dst-2012.html
+# </a>
+
+# From Arthur David Olson (2012-03-27):
+# Assume last Friday in March going forward XXX.
+
 Rule	Syria	2008	only	-	Apr	Fri>=1	0:00	1:00	S
 Rule	Syria	2008	only	-	Nov	1	0:00	0	-
 Rule	Syria	2009	only	-	Mar	lastFri	0:00	1:00	S
-Rule	Syria	2010	max	-	Apr	Fri>=1	0:00	1:00	S
+Rule	Syria	2010	2011	-	Apr	Fri>=1	0:00	1:00	S
+Rule	Syria	2012	max	-	Mar	lastFri	0:00	1:00	S
 Rule	Syria	2009	max	-	Oct	lastFri	0:00	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
diff --git a/src/main/java/org/joda/time/tz/src/australasia b/src/main/java/org/joda/time/tz/src/australasia
index d884cbc98..07b55d491 100644
--- a/src/main/java/org/joda/time/tz/src/australasia
+++ b/src/main/java/org/joda/time/tz/src/australasia
@@ -1,5 +1,5 @@
 # <pre>
-# @(#)australasia	8.29
+# @(#)australasia	8.30
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -616,6 +616,11 @@ Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
 # Dateline Change skip Friday 30th Dec 2011
 # Thursday 29th December 2011	23:59:59 Hours
 # Saturday 31st December 2011	00:00:00 Hours
+#
+# Clarification by Tim Parenti (2012-01-03):
+# Although Samoa has used Daylight Saving Time in the 2010-2011 and 2011-2012
+# seasons, there is not yet any indication that this trend will continue on
+# a regular basis. For now, we have explicitly listed the transitions below.
 Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
 			-11:26:56 -	LMT	1911
 			-11:30	-	SAMT	1950		# Samoa Time
@@ -633,9 +638,28 @@ Zone Pacific/Guadalcanal 10:39:48 -	LMT	1912 Oct	# Honiara
 			11:00	-	SBT	# Solomon Is Time
 
 # Tokelau Is
+#
+# From Gwillim Law (2011-12-29)
+# A correspondent informed me that Tokelau, like Samoa, will be skipping
+# December 31 this year, thereby changing its time zone from UTC-10 to
+# UTC+14. When I tried to verify this statement, I found a confirming
+# article in Time magazine online
+# <a href="http://www.time.com/time/world/article/0,8599,2103243,00.html">
+# (http://www.time.com/time/world/article/0,8599,2103243,00.html).
+# </a>
+#
+# From Jonathan Leffler (2011-12-29)
+# Information from the BBC to the same effect:
+# <a href="http://www.bbc.co.uk/news/world-asia-16351377">
+# http://www.bbc.co.uk/news/world-asia-16351377
+# </a>
+#
+# Patch supplied by Tim Parenti (2011-12-29)
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Pacific/Fakaofo	-11:24:56 -	LMT	1901
-			-10:00	-	TKT	# Tokelau Time
+			-10:00	-	TKT 2011 Dec 30	# Tokelau Time
+			14:00	-	TKT
 
 # Tonga
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
diff --git a/src/main/java/org/joda/time/tz/src/europe b/src/main/java/org/joda/time/tz/src/europe
index 8230b5ef3..fceb41035 100644
--- a/src/main/java/org/joda/time/tz/src/europe
+++ b/src/main/java/org/joda/time/tz/src/europe
@@ -1,5 +1,5 @@
 # <pre>
-# @(#)europe	8.40
+# @(#)europe	8.41
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -211,9 +211,15 @@
 # the history of summer time legislation in the United Kingdom.
 # Since 1998 Joseph S. Myers has been updating
 # and extending this list, which can be found in
-# <a href="http://student.cusu.cam.ac.uk/~jsm28/british-time/">
+# http://student.cusu.cam.ac.uk/~jsm28/british-time/
+# <a href="http://www.polyomino.org.uk/british-time/">
 # History of legal time in Britain
 # </a>
+# Rob Crowther (2012-01-04) reports that that URL no longer
+# exists, and the article can now be found at:
+# <a href="http://www.polyomino.org.uk/british-time/">
+# http://www.polyomino.org.uk/british-time/
+# </a>
 
 # From Joseph S. Myers (1998-01-06):
 #
@@ -1151,10 +1157,10 @@ Rule	France	1940	only	-	Feb	25	 2:00	1:00	S
 # write that they were used in Monaco and in many French locations.
 # Le Corre writes that the upper limit of the free zone was Arneguy, Orthez,
 # Mont-de-Marsan, Bazas, Langon, Lamotte-Montravel, Marouil, La
-# Rochefoucault, Champagne-Mouton, La Roche-Posay, La Haye-Decartes,
+# Rochefoucault, Champagne-Mouton, La Roche-Posay, La Haye-Descartes,
 # Loches, Montrichard, Vierzon, Bourges, Moulins, Digoin,
 # Paray-le-Monial, Montceau-les-Mines, Chalons-sur-Saone, Arbois,
-# Dole, Morez, St-Claude, and Collognes (Haute-Savioe).
+# Dole, Morez, St-Claude, and Collonges (Haute-Savoie).
 Rule	France	1941	only	-	May	 5	 0:00	2:00	M # Midsummer
 # Shanks & Pottenger say this transition occurred at Oct 6 1:00,
 # but go with Denis Excoffier (1997-12-12),
diff --git a/src/main/java/org/joda/time/tz/src/northamerica b/src/main/java/org/joda/time/tz/src/northamerica
index a21bf895b..605eb0094 100644
--- a/src/main/java/org/joda/time/tz/src/northamerica
+++ b/src/main/java/org/joda/time/tz/src/northamerica
@@ -1,5 +1,5 @@
 # <pre>
-# @(#)northamerica	8.51
+# @(#)northamerica	8.54
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -1120,9 +1120,26 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # For now, assume all of DST-observing Canada will fall into line with the
 # new US DST rules,
 
+# From Chris Walton (2011-12-01)
+# In the first of Tammy Hardwick's articles
+# <a href="http://www.ilovecreston.com/?p=articles&t=spec&ar=260">
+# http://www.ilovecreston.com/?p=articles&t=spec&ar=260
+# </a>
+# she quotes the Friday November 1/1918 edition of the Creston Review.
+# The quote includes these two statements:
+# 'Sunday the CPR went back to the old system of time...'
+# '... The daylight saving scheme was dropped all over Canada at the same time,'
+# These statements refer to a transition from daylight time to standard time
+# that occurred nationally on Sunday October 27/1918.  This transition was
+# also documented in the Saturday October 26/1918 edition of the Toronto Star.
+
+# In light of that evidence, we alter the date from the earlier believed
+# Oct 31, to Oct 27, 1918 (and Sunday is a more likely transition day
+# than Thursday) in all Canadian rulesets.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Canada	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Canada	1918	only	-	Oct	31	2:00	0	S
+Rule	Canada	1918	only	-	Oct	27	2:00	0	S
 Rule	Canada	1942	only	-	Feb	 9	2:00	1:00	W # War
 Rule	Canada	1945	only	-	Aug	14	23:00u	1:00	P # Peace
 Rule	Canada	1945	only	-	Sep	30	2:00	0	S
@@ -1645,7 +1662,7 @@ Zone America/Atikokan	-6:06:28 -	LMT	1895
 Rule	Winn	1916	only	-	Apr	23	0:00	1:00	D
 Rule	Winn	1916	only	-	Sep	17	0:00	0	S
 Rule	Winn	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Winn	1918	only	-	Oct	31	2:00	0	S
+Rule	Winn	1918	only	-	Oct	27	2:00	0	S
 Rule	Winn	1937	only	-	May	16	2:00	1:00	D
 Rule	Winn	1937	only	-	Sep	26	2:00	0	S
 Rule	Winn	1942	only	-	Feb	 9	2:00	1:00	W # War
@@ -1728,7 +1745,7 @@ Zone America/Winnipeg	-6:28:36 -	LMT	1887 Jul 16
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Regina	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Regina	1918	only	-	Oct	31	2:00	0	S
+Rule	Regina	1918	only	-	Oct	27	2:00	0	S
 Rule	Regina	1930	1934	-	May	Sun>=1	0:00	1:00	D
 Rule	Regina	1930	1934	-	Oct	Sun>=1	0:00	0	S
 Rule	Regina	1937	1941	-	Apr	Sun>=8	0:00	1:00	D
@@ -1765,7 +1782,7 @@ Zone America/Swift_Current -7:11:20 -	LMT	1905 Sep
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Edm	1918	1919	-	Apr	Sun>=8	2:00	1:00	D
-Rule	Edm	1918	only	-	Oct	31	2:00	0	S
+Rule	Edm	1918	only	-	Oct	27	2:00	0	S
 Rule	Edm	1919	only	-	May	27	2:00	0	S
 Rule	Edm	1920	1923	-	Apr	lastSun	2:00	1:00	D
 Rule	Edm	1920	only	-	Oct	lastSun	2:00	0	S
@@ -1795,9 +1812,68 @@ Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
 # Dawson Creek uses MST.  Much of east BC is like Edmonton.
 # Matthews and Vincent (1998) write that Creston is like Dawson Creek.
 
+# It seems though that (re: Creston) is not entirely correct:
+
+# From Chris Walton (2011-12-01):
+# There are two areas within the Canadian province of British Columbia
+# that do not currently observe daylight saving:
+# a) The Creston Valley (includes the town of Creston and surrounding area)
+# b) The eastern half of the Peace River Regional District
+# (includes the cities of Dawson Creek and Fort St. John)
+
+# Earlier this year I stumbled across a detailed article about the time
+# keeping history of Creston; it was written by Tammy Hardwick who is the
+# manager of the Creston & District Museum. The article was written in May 2009.
+# <a href="http://www.ilovecreston.com/?p=articles&t=spec&ar=260">
+# http://www.ilovecreston.com/?p=articles&t=spec&ar=260
+# </a>
+# According to the article, Creston has not changed its clocks since June 1918.
+# i.e. Creston has been stuck on UTC-7 for 93 years.
+# Dawson Creek, on the other hand, changed its clocks as recently as April 1972.
+
+# Unfortunately the exact date for the time change in June 1918 remains
+# unknown and will be difficult to ascertain.  I e-mailed Tammy a few months
+# ago to ask if Sunday June 2 was a reasonable guess.  She said it was just
+# as plausible as any other date (in June).  She also said that after writing the
+# article she had discovered another time change in 1916; this is the subject
+# of another article which she wrote in October 2010.
+# <a href="http://www.creston.museum.bc.ca/index.php?module=comments&uop=view_comment&cm+id=56">
+# http://www.creston.museum.bc.ca/index.php?module=comments&uop=view_comment&cm+id=56
+# </a>
+
+# Here is a summary of the three clock change events in Creston's history:
+# 1. 1884 or 1885: adoption of Mountain Standard Time (GMT-7)
+# Exact date unknown
+# 2. Oct 1916: switch to Pacific Standard Time (GMT-8) 
+# Exact date in October unknown;  Sunday October 1 is a reasonable guess.
+# 3. June 1918: switch to Pacific Daylight Time (GMT-7)
+# Exact date in June unknown; Sunday June 2 is a reasonable guess.
+# note#1:
+# On Oct 27/1918 when daylight saving ended in the rest of Canada,
+# Creston did not change its clocks.
+# note#2:
+# During WWII when the Federal Government legislated a mandatory clock change,
+# Creston did not oblige.
+# note#3:
+# There is no guarantee that Creston will remain on Mountain Standard Time
+# (UTC-7) forever.
+# The subject was debated at least once this year by the town Council.
+# <a href="http://www.bclocalnews.com/kootenay_rockies/crestonvalleyadvance/news/116760809.html">
+# http://www.bclocalnews.com/kootenay_rockies/crestonvalleyadvance/news/116760809.html
+# </a>
+
+# During a period WWII, summer time (Daylight saying) was mandatory in Canada.
+# In Creston, that was handled by shifting the area to PST (-8:00) then applying
+# summer time to cause the offset to be -7:00, the same as it had been before
+# the change.  It can be argued that the timezone abbreviation during this
+# period should be PDT rather than MST, but that doesn't seem important enough
+# (to anyone) to further complicate the rules.
+
+# The transition dates (and times) are guesses.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Vanc	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Vanc	1918	only	-	Oct	31	2:00	0	S
+Rule	Vanc	1918	only	-	Oct	27	2:00	0	S
 Rule	Vanc	1942	only	-	Feb	 9	2:00	1:00	W # War
 Rule	Vanc	1945	only	-	Aug	14	23:00u	1:00	P # Peace
 Rule	Vanc	1945	only	-	Sep	30	2:00	0	S
@@ -1813,7 +1889,10 @@ Zone America/Dawson_Creek -8:00:56 -	LMT	1884
 			-8:00	Canada	P%sT	1947
 			-8:00	Vanc	P%sT	1972 Aug 30 2:00
 			-7:00	-	MST
-
+Zone America/Creston	-7:46:04 -	LMT	1884
+			-7:00	-	MST	1916 Oct 1
+			-8:00	-	PST	1918 Jun 2
+			-7:00	-	MST
 
 # Northwest Territories, Nunavut, Yukon
 
@@ -2704,6 +2783,20 @@ Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
 # <a href="http://www.timeanddate.com/news/time/cuba-time-changes-2011.html">
 # http://www.timeanddate.com/news/time/cuba-time-changes-2011.html
 # </a>
+# 
+# From Steffen Thorsen (2012-03-01)
+# According to Radio Reloj, Cuba will start DST on Midnight between March 
+# 31 and April 1.
+# 
+# Radio Reloj has the following info (Spanish):
+# <a href="http://www.radioreloj.cu/index.php/noticias-radio-reloj/71-miscelaneas/7529-cuba-aplicara-el-horario-de-verano-desde-el-1-de-abril">
+# http://www.radioreloj.cu/index.php/noticias-radio-reloj/71-miscelaneas/7529-cuba-aplicara-el-horario-de-verano-desde-el-1-de-abril
+# </a>
+#
+# Our info on it:
+# <a href="http://www.timeanddate.com/news/time/cuba-starts-dst-2012.html">
+# http://www.timeanddate.com/news/time/cuba-starts-dst-2012.html
+# </a>
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
@@ -2741,8 +2834,9 @@ Rule	Cuba	2008	only	-	Mar	Sun>=15	0:00s	1:00	D
 Rule	Cuba	2009	2010	-	Mar	Sun>=8	0:00s	1:00	D
 Rule	Cuba	2011	only	-	Mar	Sun>=15	0:00s	1:00	D
 Rule	Cuba	2011	only	-	Nov	13	0:00s	0	S
-Rule	Cuba	2012	max	-	Mar	Sun>=8	0:00s	1:00	D
+Rule	Cuba	2012	only	-	Apr	1	0:00s	1:00	D
 Rule	Cuba	2012	max	-	Oct	lastSun	0:00s	0	S
+Rule	Cuba	2013	max	-	Mar	Sun>=8	0:00s	1:00	D
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Havana	-5:29:28 -	LMT	1890
@@ -2876,6 +2970,29 @@ Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
 # From Stephen Colebourne (2007-02-22):
 # Some IATA info: Haiti won't be having DST in 2007.
 
+# From Steffen Thorsen (2012-03-11):
+# According to several news sources, Haiti will observe DST this year,
+# apparently using the same start and end date as USA/Canada.
+# So this means they have already changed their time.
+#
+# (Sources in French):
+# <a href="http://www.alterpresse.org/spip.php?article12510">
+# http://www.alterpresse.org/spip.php?article12510
+# </a>
+# <a href="http://radiovision2000haiti.net/home/?p=13253">
+# http://radiovision2000haiti.net/home/?p=13253
+# </a>
+#
+# Our coverage:
+# <a href="http://www.timeanddate.com/news/time/haiti-dst-2012.html">
+# http://www.timeanddate.com/news/time/haiti-dst-2012.html
+# </a>
+
+# From Arthur David Olson (2012-03-11):
+# The alterpresse.org source seems to show a US-style leap from 2:00 a.m. to
+# 3:00 a.m. rather than the traditional Haitian jump at midnight.
+# Assume a US-style fall back as well XXX.
+# Do not yet assume that the change carries forward past 2012 XXX.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
@@ -2887,6 +3004,8 @@ Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
 Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
 Rule	Haiti	2005	2006	-	Apr	Sun>=1	0:00	1:00	D
 Rule	Haiti	2005	2006	-	Oct	lastSun	0:00	0	S
+Rule	Haiti	2012	only	-	Mar	Sun>=8	2:00	1:00	D
+Rule	Haiti	2012	only	-	Nov	Sun>=1	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Port-au-Prince -4:49:20 -	LMT	1890
 			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT
diff --git a/src/main/java/org/joda/time/tz/src/southamerica b/src/main/java/org/joda/time/tz/src/southamerica
index 6012005c4..45632b4cc 100644
--- a/src/main/java/org/joda/time/tz/src/southamerica
+++ b/src/main/java/org/joda/time/tz/src/southamerica
@@ -1,5 +1,5 @@
 # <pre>
-# @(#)southamerica	8.52
+# @(#)southamerica	8.53
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -1218,6 +1218,28 @@ Zone America/Rio_Branco	-4:31:12 -	LMT	1914
 # August, not in October as they have since 1968. This is a pilot plan
 # which will be reevaluated in 2012.
 
+# From Mauricio Parada (2012-02-22), translated by Glenn Eychaner (2012-02-23):
+# As stated in the website of the Chilean Energy Ministry
+# http://www.minenergia.cl/ministerio/noticias/generales/gobierno-anuncia-fechas-de-cambio-de.html
+# The Chilean Government has decided to postpone the entrance into winter time
+# (to leave DST) from March 11 2012 to April 28th 2012. The decision has not
+# been yet formalized but it will within the next days.
+# Quote from the website communication:
+#
+# 6. For the year 2012, the dates of entry into winter time will be as follows:
+# a. Saturday April 28, 2012, clocks should go back 60 minutes; that is, at
+# 23:59:59, instead of passing to 0:00, the time should be adjusted to be 23:00
+# of the same day.
+# b. Saturday, September 1, 2012, clocks should go forward 60 minutes; that is,
+# at 23:59:59, instead of passing to 0:00, the time should be adjusted to be
+# 01:00 on September 2.
+#
+# Note that...this is yet another "temporary" change that will be reevaluated
+# AGAIN in 2013.
+
+# NOTE: ChileAQ rules for Antarctic bases are stored separately in the
+# 'antarctica' file.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Chile	1927	1932	-	Sep	 1	0:00	1:00	S
 Rule	Chile	1928	1932	-	Apr	 1	0:00	0	-
@@ -1248,8 +1270,6 @@ Rule	Chile	1998	only	-	Mar	Sun>=9	3:00u	0	-
 Rule	Chile	1998	only	-	Sep	27	4:00u	1:00	S
 Rule	Chile	1999	only	-	Apr	 4	3:00u	0	-
 Rule	Chile	1999	2010	-	Oct	Sun>=9	4:00u	1:00	S
-Rule	Chile	2011	only	-	Aug	Sun>=16	4:00u	1:00	S
-Rule	Chile	2012	max	-	Oct	Sun>=9	4:00u	1:00	S
 Rule	Chile	2000	2007	-	Mar	Sun>=9	3:00u	0	-
 # N.B.: the end of March 29 in Chile is March 30 in Universal time,
 # which is used below in specifying the transition.
@@ -1257,7 +1277,11 @@ Rule	Chile	2008	only	-	Mar	30	3:00u	0	-
 Rule	Chile	2009	only	-	Mar	Sun>=9	3:00u	0	-
 Rule	Chile	2010	only	-	Apr	Sun>=1	3:00u	0	-
 Rule	Chile	2011	only	-	May	Sun>=2	3:00u	0	-
-Rule	Chile	2012	max	-	Mar	Sun>=9	3:00u	0	-
+Rule	Chile	2011	only	-	Aug	Sun>=16	4:00u	1:00	S
+Rule	Chile	2012	only	-	Apr	Sun>=23	3:00u	0	-
+Rule	Chile	2012	only	-	Sep	Sun>=2	4:00u	1:00	S
+Rule	Chile	2013	max	-	Mar	Sun>=9	3:00u	0	-
+Rule	Chile	2013	max	-	Oct	Sun>=9	4:00u	1:00	S
 # IATA SSIM anomalies: (1992-02) says 1992-03-14;
 # (1996-09) says 1998-03-08.  Ignore these.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -1403,6 +1427,21 @@ Zone Pacific/Galapagos	-5:58:24 -	LMT	1931 # Puerto Baquerizo Moreno
 # will not revert to local mean time, but clocks will remain on Summer
 # time (UTC/GMT - 3 hours) throughout the whole of 2011.  Any long term
 # change to local time following the trial period will be notified.
+#
+# From Andrew Newman (2012-02-24)
+# A letter from Justin McPhee, Chief Executive,
+# Cable & Wireless Falkland Islands (dated 2012-02-22)
+# states...
+#   The current Atlantic/Stanley entry under South America expects the
+#   clocks to go back to standard Falklands Time (FKT) on the 15th April.
+#   The database entry states that in 2011 Stanley was staying on fixed
+#   summer time on a trial basis only.  FIG need to contact IANA and/or
+#   the maintainers of the database to inform them we're adopting
+#   the same policy this year and suggest recommendations for future years.
+#
+# For now we will assume permanent summer time for the Falklands
+# until advised differently (to apply for 2012 and beyond, after the 2011
+# experiment was apparently successful.)
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Falk	1937	1938	-	Sep	lastSun	0:00	1:00	S
 Rule	Falk	1938	1942	-	Mar	Sun>=19	0:00	0	-
@@ -1415,14 +1454,14 @@ Rule	Falk	1984	only	-	Sep	16	0:00	1:00	S
 Rule	Falk	1985	2000	-	Sep	Sun>=9	0:00	1:00	S
 Rule	Falk	1986	2000	-	Apr	Sun>=16	0:00	0	-
 Rule	Falk	2001	2010	-	Apr	Sun>=15	2:00	0	-
-Rule	Falk	2012	max	-	Apr	Sun>=15	2:00	0	-
-Rule	Falk	2001	max	-	Sep	Sun>=1	2:00	1:00	S
+Rule	Falk	2001	2010	-	Sep	Sun>=1	2:00	1:00	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Atlantic/Stanley	-3:51:24 -	LMT	1890
 			-3:51:24 -	SMT	1912 Mar 12  # Stanley Mean Time
 			-4:00	Falk	FK%sT	1983 May     # Falkland Is Time
 			-3:00	Falk	FK%sT	1985 Sep 15
-			-4:00	Falk	FK%sT
+			-4:00	Falk	FK%sT	2010 Sep 5 02:00
+			-3:00	-	FKST
 
 # French Guiana
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]

From 0cefc4c212e92e5dccdfa658785c419483317558 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 30 Apr 2012 12:27:07 +0100
Subject: [PATCH 04/52] FieldUtils.safeMultiply(long,int) [3520651]

Fix implementation to throw exception for (Long.MIN_VALUE, -1)
---
 RELEASE-NOTES.txt                             |   3 +
 .../java/org/joda/time/field/FieldUtils.java  |  31 ++--
 .../org/joda/time/field/TestFieldUtils.java   | 132 ++++++++++++------
 3 files changed, 107 insertions(+), 59 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 790834fc0..51e26971d 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -50,6 +50,9 @@ Bug fixes since 2.1
   parseInto() to lose the year. This fix reverts behaviour to v1.x so that parseInto()
   will use the supplied year, not the default year of the formatter.
 
+- FieldUtils.safeMultiply(long,int) [3520651]
+  Fix implementation to throw exception for (Long.MIN_VALUE, -1)
+
 - Javadoc fix to BaseChronology [3513326]
 
 
diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java
index 55ed991df..1e045b22a 100644
--- a/src/main/java/org/joda/time/field/FieldUtils.java
+++ b/src/main/java/org/joda/time/field/FieldUtils.java
@@ -118,8 +118,7 @@ public static long safeSubtract(long val1, long val2) {
     public static int safeMultiply(int val1, int val2) {
         long total = (long) val1 * (long) val2;
         if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
-            throw new ArithmeticException
-                ("The calculation caused an overflow: " + val1 + " * " + val2);
+          throw new ArithmeticException("Multiplication overflows an int: " + val1 + " * " + val2);
         }
         return (int) total;
     }
@@ -128,24 +127,26 @@ public static int safeMultiply(int val1, int val2) {
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
-     * @param scalar  the second value
+     * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
-    public static long safeMultiply(long val1, int scalar) {
-        switch (scalar) {
-        case -1:
-            return -val1;
-        case 0:
-            return 0L;
-        case 1:
-            return val1;
+    public static long safeMultiply(long val1, int val2) {
+        switch (val2) {
+            case -1:
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
+                return -val1;
+            case 0:
+                return 0L;
+            case 1:
+                return val1;
         }
-        long total = val1 * scalar;
-        if (total / scalar != val1) {
-            throw new ArithmeticException
-                ("The calculation caused an overflow: " + val1 + " * " + scalar);
+        long total = val1 * val2;
+        if (total / val2 != val1) {
+          throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
diff --git a/src/test/java/org/joda/time/field/TestFieldUtils.java b/src/test/java/org/joda/time/field/TestFieldUtils.java
index 2933d41d3..e60d1923a 100644
--- a/src/test/java/org/joda/time/field/TestFieldUtils.java
+++ b/src/test/java/org/joda/time/field/TestFieldUtils.java
@@ -191,50 +191,94 @@ public void testSafeSubtractLong() {
 
     //-----------------------------------------------------------------------
     public void testSafeMultiplyLongLong() {
-      assertEquals(0L, FieldUtils.safeMultiply(0L, 0L));
-      
-      assertEquals(1L, FieldUtils.safeMultiply(1L, 1L));
-      assertEquals(3L, FieldUtils.safeMultiply(1L, 3L));
-      assertEquals(3L, FieldUtils.safeMultiply(3L, 1L));
-      
-      assertEquals(6L, FieldUtils.safeMultiply(2L, 3L));
-      assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L));
-      assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L));
-      assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L));
-      
-      assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L));
-      assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L));
-      assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L));
-      
-      try {
-          FieldUtils.safeMultiply(Long.MIN_VALUE, -1L);
-          fail();
-      } catch (ArithmeticException e) {
-      }
-      
-      try {
-          FieldUtils.safeMultiply(-1L, Long.MIN_VALUE);
-          fail();
-      } catch (ArithmeticException e) {
-      }
-    
-      try {
-          FieldUtils.safeMultiply(Long.MIN_VALUE, 100L);
-          fail();
-      } catch (ArithmeticException e) {
-      }
-      
-      try {
-          FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE);
-          fail();
-      } catch (ArithmeticException e) {
-      }
+        assertEquals(0L, FieldUtils.safeMultiply(0L, 0L));
+        
+        assertEquals(1L, FieldUtils.safeMultiply(1L, 1L));
+        assertEquals(3L, FieldUtils.safeMultiply(1L, 3L));
+        assertEquals(3L, FieldUtils.safeMultiply(3L, 1L));
+        
+        assertEquals(6L, FieldUtils.safeMultiply(2L, 3L));
+        assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L));
+        assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L));
+        assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L));
+        
+        assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L));
+        assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L));
+        assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L));
+        
+        try {
+            FieldUtils.safeMultiply(Long.MIN_VALUE, -1L);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+        
+        try {
+            FieldUtils.safeMultiply(-1L, Long.MIN_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
       
-      try {
-          FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE);
-          fail();
-      } catch (ArithmeticException e) {
-      }
-  }
+        try {
+            FieldUtils.safeMultiply(Long.MIN_VALUE, 100L);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+        
+        try {
+            FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+        
+        try {
+            FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSafeMultiplyLongInt() {
+        assertEquals(0L, FieldUtils.safeMultiply(0L, 0));
+        
+        assertEquals(1L, FieldUtils.safeMultiply(1L, 1));
+        assertEquals(3L, FieldUtils.safeMultiply(1L, 3));
+        assertEquals(3L, FieldUtils.safeMultiply(3L, 1));
+        
+        assertEquals(6L, FieldUtils.safeMultiply(2L, 3));
+        assertEquals(-6L, FieldUtils.safeMultiply(2L, -3));
+        assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));
+        assertEquals(6L, FieldUtils.safeMultiply(-2L, -3));
+        
+        assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));
+        
+        assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));
+        assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));
+        assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));
+        
+        try {
+            FieldUtils.safeMultiply(Long.MIN_VALUE, -1);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+        
+        try {
+            FieldUtils.safeMultiply(Long.MIN_VALUE, 100);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+        
+        try {
+            FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+        
+        try {
+            FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+    }
 }
 

From cc3262ff42e41f3b1f64290262704da3895fbe85 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 30 Apr 2012 12:36:02 +0100
Subject: [PATCH 05/52] Harden TestReadableDurationConverter test case
 [3515086]

---
 RELEASE-NOTES.txt                                      |  3 +++
 .../time/convert/TestReadableDurationConverter.java    | 10 ++++++++++
 2 files changed, 13 insertions(+)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 51e26971d..700e0f056 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -53,6 +53,9 @@ Bug fixes since 2.1
 - FieldUtils.safeMultiply(long,int) [3520651]
   Fix implementation to throw exception for (Long.MIN_VALUE, -1)
 
+- Fix TestReadableDurationConverter [3515086]
+  Test case didn't work if deafult time zone was UTC
+
 - Javadoc fix to BaseChronology [3513326]
 
 
diff --git a/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java b/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java
index 25143ba42..2e0a472e0 100644
--- a/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java
+++ b/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java
@@ -59,9 +59,19 @@ public TestReadableDurationConverter(String name) {
         super(name);
     }
 
+    @Override
     protected void setUp() throws Exception {
+        super.setUp();
         JULIAN = JulianChronology.getInstance();
         ISO = ISOChronology.getInstance();
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(PARIS);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        super.tearDown();
+        DateTimeZone.setDefault(zone);
     }
 
     //-----------------------------------------------------------------------

From 2ea856328ed5710537778d755a5ff52a6831a2ee Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 23 May 2012 12:45:41 +0100
Subject: [PATCH 06/52] Fix MonthDay add/subtract around Feb29 [3528941]

---
 RELEASE-NOTES.txt                             |  5 ++
 .../chrono/BasicMonthOfYearDateTimeField.java |  6 ++
 .../org/joda/time/TestMonthDay_Basics.java    | 86 +++++++++++++++++++
 3 files changed, 97 insertions(+)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 700e0f056..326536911 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -45,6 +45,11 @@ None
 
 Bug fixes since 2.1
 -------------------
+- MonthDay add/subtract [3528941]
+  Addition and subtraction in MonthDay was fixed.
+  It previously didn't work when the start value was 29th February.
+  
+
 - DateTimeFormatter.parseInto() [3522138]
   The v2.0 changes to handle parsing of month/day on their own (for Feb 29th) cause
   parseInto() to lose the year. This fix reverts behaviour to v1.x so that parseInto()
diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
index 42a32e7ee..2892a2d75 100644
--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
@@ -206,6 +206,12 @@ public long add(long instant, long months) {
         if (valueToAdd == 0) {
             return values;
         }
+        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {
+            // month is largest field and being added to, such as month-day
+            int curMonth0 = partial.getValue(0) - 1;
+            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;
+            return set(partial, 0, values, newMonth);
+        }
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
diff --git a/src/test/java/org/joda/time/TestMonthDay_Basics.java b/src/test/java/org/joda/time/TestMonthDay_Basics.java
index 65f30b862..38f97a7f4 100644
--- a/src/test/java/org/joda/time/TestMonthDay_Basics.java
+++ b/src/test/java/org/joda/time/TestMonthDay_Basics.java
@@ -448,6 +448,34 @@ public void testPlusMonths_int() {
         assertEquals(expected, result);
     }
 
+    public void testPlusMonths_int_fromLeap() {
+        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
+        MonthDay result = test.plusMonths(1);
+        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());
+        assertEquals(expected, result);
+    }
+
+    public void testPlusMonths_int_negativeFromLeap() {
+        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
+        MonthDay result = test.plusMonths(-1);
+        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());
+        assertEquals(expected, result);
+    }
+
+    public void testPlusMonths_int_endOfMonthAdjust() {
+        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());
+        MonthDay result = test.plusMonths(1);
+        MonthDay expected = new MonthDay(4, 30, ISOChronology.getInstance());
+        assertEquals(expected, result);
+    }
+
+    public void testPlusMonths_int_negativeEndOfMonthAdjust() {
+        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());
+        MonthDay result = test.plusMonths(-1);
+        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());
+        assertEquals(expected, result);
+    }
+
     public void testPlusMonths_int_same() {
         MonthDay test = new MonthDay(6, 5, ISO_UTC);
         MonthDay result = test.plusMonths(0);
@@ -468,6 +496,7 @@ public void testPlusMonths_int_adjust() {
         assertEquals(expected, result);
     }
 
+    //-------------------------------------------------------------------------
     public void testPlusDays_int() {
         MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());
         MonthDay result = test.plusDays(1);
@@ -475,6 +504,20 @@ public void testPlusDays_int() {
         assertEquals(expected, result);
     }
 
+    public void testPlusDays_int_fromLeap() {
+        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
+        MonthDay result = test.plusDays(1);
+        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());
+        assertEquals(expected, result);
+    }
+
+    public void testPlusDays_int_negativeFromLeap() {
+        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
+        MonthDay result = test.plusDays(-1);
+        MonthDay expected = new MonthDay(2, 28, ISOChronology.getInstance());
+        assertEquals(expected, result);
+    }
+
     public void testPlusDays_same() {
         MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());
         MonthDay result = test.plusDays(0);
@@ -499,6 +542,34 @@ public void testMinusMonths_int() {
         assertEquals(expected, result);
     }
 
+    public void testMinusMonths_int_fromLeap() {
+        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
+        MonthDay result = test.minusMonths(1);
+        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());
+        assertEquals(expected, result);
+    }
+
+    public void testMinusMonths_int_negativeFromLeap() {
+        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
+        MonthDay result = test.minusMonths(-1);
+        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());
+        assertEquals(expected, result);
+    }
+
+    public void testMinusMonths_int_endOfMonthAdjust() {
+        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());
+        MonthDay result = test.minusMonths(1);
+        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());
+        assertEquals(expected, result);
+    }
+
+    public void testMinusMonths_int_negativeEndOfMonthAdjust() {
+        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());
+        MonthDay result = test.minusMonths(-1);
+        MonthDay expected = new MonthDay(4, 30, ISOChronology.getInstance());
+        assertEquals(expected, result);
+    }
+
     public void testMinusMonths_int_same() {
         MonthDay test = new MonthDay(6, 5, ISO_UTC);
         MonthDay result = test.minusMonths(0);
@@ -519,6 +590,7 @@ public void testMinusMonths_int_adjust() {
         assertEquals(expected, result);
     }
 
+    //-------------------------------------------------------------------------
     public void testMinusDays_int() {
         MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());
         MonthDay result = test.minusDays(1);
@@ -526,6 +598,20 @@ public void testMinusDays_int() {
         assertEquals(expected, result);
     }
 
+    public void testMinusDays_int_fromLeap() {
+        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
+        MonthDay result = test.minusDays(1);
+        MonthDay expected = new MonthDay(2, 28, ISOChronology.getInstance());
+        assertEquals(expected, result);
+    }
+
+    public void testMinusDays_int_negativeFromLeap() {
+        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
+        MonthDay result = test.minusDays(-1);
+        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());
+        assertEquals(expected, result);
+    }
+
     public void testMinusDays_same() {
         MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());
         MonthDay result = test.minusDays(0);

From 66c4a1c10d33243fb0a6f850d350226ab4d55a6c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 6 Jun 2012 11:35:56 +0100
Subject: [PATCH 07/52] Change some StringBuffer uses to StringBuilder
 [3532330]

---
 RELEASE-NOTES.txt                                           | 1 +
 src/main/java/org/joda/time/IllegalFieldValueException.java | 2 +-
 src/main/java/org/joda/time/Partial.java                    | 2 +-
 src/main/java/org/joda/time/chrono/BasicChronology.java     | 2 +-
 src/main/java/org/joda/time/convert/ConverterSet.java       | 2 +-
 src/main/java/org/joda/time/format/DateTimeFormat.java      | 2 +-
 src/main/java/org/joda/time/tz/ZoneInfoProvider.java        | 2 +-
 7 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 326536911..c1feff5c1 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -21,6 +21,7 @@ of restrictions. If the license causes you problems please contact the mailing l
 
 Enhancements since 2.1
 ----------------------
+- Change some StringBuffer uses to StringBuilder [3532330]
 
 
 Compatibility with 2.1
diff --git a/src/main/java/org/joda/time/IllegalFieldValueException.java b/src/main/java/org/joda/time/IllegalFieldValueException.java
index f3184f2cb..f588a853a 100644
--- a/src/main/java/org/joda/time/IllegalFieldValueException.java
+++ b/src/main/java/org/joda/time/IllegalFieldValueException.java
@@ -38,7 +38,7 @@
      */
     private static String createMessage(String fieldName, Number value,
                                         Number lowerBound, Number upperBound, String explain) {
-        StringBuffer buf = new StringBuffer()
+        StringBuilder buf = new StringBuilder()
             .append("Value ").append(value).append(" for ").append(fieldName).append(' ');
 
         if (lowerBound == null) {
diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java
index 967308905..aaf0a0fd5 100644
--- a/src/main/java/org/joda/time/Partial.java
+++ b/src/main/java/org/joda/time/Partial.java
@@ -760,7 +760,7 @@ public String toString() {
      */
     public String toStringList() {
         int size = size();
-        StringBuffer buf = new StringBuffer(20 * size);
+        StringBuilder buf = new StringBuilder(20 * size);
         buf.append('[');
         for (int i = 0; i < size; i++) {
             if (i > 0) {
diff --git a/src/main/java/org/joda/time/chrono/BasicChronology.java b/src/main/java/org/joda/time/chrono/BasicChronology.java
index b0bd3d344..e0831f70b 100644
--- a/src/main/java/org/joda/time/chrono/BasicChronology.java
+++ b/src/main/java/org/joda/time/chrono/BasicChronology.java
@@ -214,7 +214,7 @@ public int hashCode() {
      * @return a debugging string
      */
     public String toString() {
-        StringBuffer sb = new StringBuffer(60);
+        StringBuilder sb = new StringBuilder(60);
         String name = getClass().getName();
         int index = name.lastIndexOf('.');
         if (index >= 0) {
diff --git a/src/main/java/org/joda/time/convert/ConverterSet.java b/src/main/java/org/joda/time/convert/ConverterSet.java
index a238117b7..d571c64e0 100644
--- a/src/main/java/org/joda/time/convert/ConverterSet.java
+++ b/src/main/java/org/joda/time/convert/ConverterSet.java
@@ -298,7 +298,7 @@ private static Converter selectSlow(ConverterSet set, Class<?> type) {
         // Class c implements a, b {}
         // Converters exist only for a and b. Which is better? Neither.
 
-        StringBuffer msg = new StringBuffer();
+        StringBuilder msg = new StringBuilder();
         msg.append("Unable to find best converter for type \"");
         msg.append(type.getName());
         msg.append("\" from remaining set: ");
diff --git a/src/main/java/org/joda/time/format/DateTimeFormat.java b/src/main/java/org/joda/time/format/DateTimeFormat.java
index 9afaf93c1..2639f9add 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormat.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormat.java
@@ -571,7 +571,7 @@ private static void parsePatternTo(DateTimeFormatterBuilder builder, String patt
      * @return the parsed token
      */
     private static String parseToken(String pattern, int[] indexRef) {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
 
         int i = indexRef[0];
         int length = pattern.length();
diff --git a/src/main/java/org/joda/time/tz/ZoneInfoProvider.java b/src/main/java/org/joda/time/tz/ZoneInfoProvider.java
index a1eff91ab..ff36abbee 100644
--- a/src/main/java/org/joda/time/tz/ZoneInfoProvider.java
+++ b/src/main/java/org/joda/time/tz/ZoneInfoProvider.java
@@ -203,7 +203,7 @@ private InputStream openResource(String name) throws IOException {
                 in = ClassLoader.getSystemResourceAsStream(path);
             }
             if (in == null) {
-                StringBuffer buf = new StringBuffer(40)
+                StringBuilder buf = new StringBuilder(40)
                     .append("Resource not found: \"")
                     .append(path)
                     .append("\" ClassLoader: ")

From fecee7606f0882156d359326a1346aebd8833d06 Mon Sep 17 00:00:00 2001
From: Jeff Lavallee <jeff@zeroclue.com>
Date: Mon, 9 Jul 2012 13:31:55 -0700
Subject: [PATCH 08/52] Fix typo in Jollyday description

---
 src/site/xdoc/related.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/site/xdoc/related.xml b/src/site/xdoc/related.xml
index 08705578b..85e94e38a 100644
--- a/src/site/xdoc/related.xml
+++ b/src/site/xdoc/related.xml
@@ -25,7 +25,7 @@ A simple library that provides additional internationalization data for Joda-Tim
 <li><a href="http://objectlabkit.sourceforge.net/">ObjectLab Holiday calculation</a>
 Support for working and non-working days, plus how to calculate and resolve holidays, from a finance industry perspective.</li>
 <li><a href="http://jollyday.sourceforge.net/">Jollyday holiday calculation</a>
-Provides classes to handle claculation of holidays.</li>
+Provides classes to handle calculation of holidays.</li>
 <li><a href="http://code.google.com/p/google-rfc-2445/">Recurrance (RFC 2445)</a>
 Support for the RFC2445 recurrence specification, as found in iCal.</li>
 <li><a href="http://www.datanucleus.org/plugins/store.types.jodatime.html">DataNucleus support</a>

From 24ad2dd7257008f0c5d2a9bbb58d303901638847 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 19 Jul 2012 12:06:09 +0100
Subject: [PATCH 09/52] Clarify values passed into constructors

---
 src/main/java/org/joda/time/DateMidnight.java | 14 +--
 src/main/java/org/joda/time/DateTime.java     | 96 +++++++++----------
 src/main/java/org/joda/time/LocalDate.java    | 10 +-
 .../java/org/joda/time/LocalDateTime.java     | 44 ++++-----
 src/main/java/org/joda/time/LocalTime.java    | 26 ++---
 5 files changed, 95 insertions(+), 95 deletions(-)

diff --git a/src/main/java/org/joda/time/DateMidnight.java b/src/main/java/org/joda/time/DateMidnight.java
index 7b85df95e..051f2235c 100644
--- a/src/main/java/org/joda/time/DateMidnight.java
+++ b/src/main/java/org/joda/time/DateMidnight.java
@@ -303,8 +303,8 @@ public DateMidnight(Object instant, Chronology chronology) {
      * The constructed object will have a local time of midnight.
      *
      * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
+     * @param monthOfYear  the month of the year, from 1 to 12
+     * @param dayOfMonth  the day of the month, from 1 to 31
      */
     public DateMidnight(int year, int monthOfYear, int dayOfMonth) {
         super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0);
@@ -318,8 +318,8 @@ public DateMidnight(int year, int monthOfYear, int dayOfMonth) {
      * If the specified time zone is null, the default zone is used.
      *
      * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
+     * @param monthOfYear  the month of the year, from 1 to 12
+     * @param dayOfMonth  the day of the month, from 1 to 31
      * @param zone  the time zone, null means default time zone
      */
     public DateMidnight(int year, int monthOfYear, int dayOfMonth, DateTimeZone zone) {
@@ -334,9 +334,9 @@ public DateMidnight(int year, int monthOfYear, int dayOfMonth, DateTimeZone zone
      * If the chronology is null, <code>ISOChronology</code>
      * in the default time zone is used.
      *
-     * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
+     * @param year  the year, valid values defined by the chronology
+     * @param monthOfYear  the month of the year, valid values defined by the chronology
+     * @param dayOfMonth  the day of the month, valid values defined by the chronology
      * @param chronology  the chronology, null means ISOChronology in default zone
      */
     public DateMidnight(int year, int monthOfYear, int dayOfMonth, Chronology chronology) {
diff --git a/src/main/java/org/joda/time/DateTime.java b/src/main/java/org/joda/time/DateTime.java
index 6cb6dc317..4595faec8 100644
--- a/src/main/java/org/joda/time/DateTime.java
+++ b/src/main/java/org/joda/time/DateTime.java
@@ -292,10 +292,10 @@ public DateTime(Object instant, Chronology chronology) {
      * using <code>ISOChronology</code> in the default time zone.
      *
      * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
+     * @param monthOfYear  the month of the year, from 1 to 12
+     * @param dayOfMonth  the day of the month, from 1 to 31
+     * @param hourOfDay  the hour of the day, from 0 to 23
+     * @param minuteOfHour  the minute of the hour, from 0 to 59
      * @since 2.0
      */
     public DateTime(
@@ -314,10 +314,10 @@ public DateTime(
      * If the specified time zone is null, the default zone is used.
      *
      * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
+     * @param monthOfYear  the month of the year, from 1 to 12
+     * @param dayOfMonth  the day of the month, from 1 to 31
+     * @param hourOfDay  the hour of the day, from 0 to 23
+     * @param minuteOfHour  the minute of the hour, from 0 to 59
      * @param zone  the time zone, null means default time zone
      * @since 2.0
      */
@@ -339,11 +339,11 @@ public DateTime(
      * If the chronology is null, <code>ISOChronology</code>
      * in the default time zone is used.
      *
-     * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
+     * @param year  the year, valid values defined by the chronology
+     * @param monthOfYear  the month of the year, valid values defined by the chronology
+     * @param dayOfMonth  the day of the month, valid values defined by the chronology
+     * @param hourOfDay  the hour of the day, valid values defined by the chronology
+     * @param minuteOfHour  the minute of the hour, valid values defined by the chronology
      * @param chronology  the chronology, null means ISOChronology in default zone
      * @since 2.0
      */
@@ -364,11 +364,11 @@ public DateTime(
      * using <code>ISOChronology</code> in the default time zone.
      *
      * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
-     * @param secondOfMinute  the second of the minute
+     * @param monthOfYear  the month of the year, from 1 to 12
+     * @param dayOfMonth  the day of the month, from 1 to 31
+     * @param hourOfDay  the hour of the day, from 0 to 23
+     * @param minuteOfHour  the minute of the hour, from 0 to 59
+     * @param secondOfMinute  the second of the minute, from 0 to 59
      * @since 2.0
      */
     public DateTime(
@@ -388,11 +388,11 @@ public DateTime(
      * If the specified time zone is null, the default zone is used.
      *
      * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
-     * @param secondOfMinute  the second of the minute
+     * @param monthOfYear  the month of the year, from 1 to 12
+     * @param dayOfMonth  the day of the month, from 1 to 31
+     * @param hourOfDay  the hour of the day, from 0 to 23
+     * @param minuteOfHour  the minute of the hour, from 0 to 59
+     * @param secondOfMinute  the second of the minute, from 0 to 59
      * @param zone  the time zone, null means default time zone
      * @since 2.0
      */
@@ -415,12 +415,12 @@ public DateTime(
      * If the chronology is null, <code>ISOChronology</code>
      * in the default time zone is used.
      *
-     * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
-     * @param secondOfMinute  the second of the minute
+     * @param year  the year, valid values defined by the chronology
+     * @param monthOfYear  the month of the year, valid values defined by the chronology
+     * @param dayOfMonth  the day of the month, valid values defined by the chronology
+     * @param hourOfDay  the hour of the day, valid values defined by the chronology
+     * @param minuteOfHour  the minute of the hour, valid values defined by the chronology
+     * @param secondOfMinute  the second of the minute, valid values defined by the chronology
      * @param chronology  the chronology, null means ISOChronology in default zone
      * @since 2.0
      */
@@ -442,12 +442,12 @@ public DateTime(
      * using <code>ISOChronology</code> in the default time zone.
      *
      * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
-     * @param secondOfMinute  the second of the minute
-     * @param millisOfSecond  the millisecond of the second
+     * @param monthOfYear  the month of the year, from 1 to 12
+     * @param dayOfMonth  the day of the month, from 1 to 31
+     * @param hourOfDay  the hour of the day, from 0 to 23
+     * @param minuteOfHour  the minute of the hour, from 0 to 59
+     * @param secondOfMinute  the second of the minute, from 0 to 59
+     * @param millisOfSecond  the millisecond of the second, from 0 to 999
      */
     public DateTime(
             int year,
@@ -467,12 +467,12 @@ public DateTime(
      * If the specified time zone is null, the default zone is used.
      *
      * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
-     * @param secondOfMinute  the second of the minute
-     * @param millisOfSecond  the millisecond of the second
+     * @param monthOfYear  the month of the year, from 1 to 12
+     * @param dayOfMonth  the day of the month, from 1 to 31
+     * @param hourOfDay  the hour of the day, from 0 to 23
+     * @param minuteOfHour  the minute of the hour, from 0 to 59
+     * @param secondOfMinute  the second of the minute, from 0 to 59
+     * @param millisOfSecond  the millisecond of the second, from 0 to 999
      * @param zone  the time zone, null means default time zone
      */
     public DateTime(
@@ -495,13 +495,13 @@ public DateTime(
      * If the chronology is null, <code>ISOChronology</code>
      * in the default time zone is used.
      *
-     * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
-     * @param secondOfMinute  the second of the minute
-     * @param millisOfSecond  the millisecond of the second
+     * @param year  the year, valid values defined by the chronology
+     * @param monthOfYear  the month of the year, valid values defined by the chronology
+     * @param dayOfMonth  the day of the month, valid values defined by the chronology
+     * @param hourOfDay  the hour of the day, valid values defined by the chronology
+     * @param minuteOfHour  the minute of the hour, valid values defined by the chronology
+     * @param secondOfMinute  the second of the minute, valid values defined by the chronology
+     * @param millisOfSecond  the millisecond of the second, valid values defined by the chronology
      * @param chronology  the chronology, null means ISOChronology in default zone
      */
     public DateTime(
diff --git a/src/main/java/org/joda/time/LocalDate.java b/src/main/java/org/joda/time/LocalDate.java
index 9a4df02f1..7bb7a08c9 100644
--- a/src/main/java/org/joda/time/LocalDate.java
+++ b/src/main/java/org/joda/time/LocalDate.java
@@ -413,8 +413,8 @@ public LocalDate(Object instant, Chronology chronology) {
      * using <code>ISOChronology</code>.
      *
      * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
+     * @param monthOfYear  the month of the year, from 1 to 12
+     * @param dayOfMonth  the day of the month, from 1 to 31
      */
     public LocalDate(
             int year,
@@ -429,9 +429,9 @@ public LocalDate(
      * <p>
      * If the chronology is null, <code>ISOChronology</code> is used.
      *
-     * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
+     * @param year  the year, valid values defined by the chronology
+     * @param monthOfYear  the month of the year, valid values defined by the chronology
+     * @param dayOfMonth  the day of the month, valid values defined by the chronology
      * @param chronology  the chronology, null means ISOChronology in default zone
      */
     public LocalDate(
diff --git a/src/main/java/org/joda/time/LocalDateTime.java b/src/main/java/org/joda/time/LocalDateTime.java
index bfb65fd04..d9670415f 100644
--- a/src/main/java/org/joda/time/LocalDateTime.java
+++ b/src/main/java/org/joda/time/LocalDateTime.java
@@ -408,10 +408,10 @@ public LocalDateTime(Object instant, Chronology chronology) {
      * using <code>ISOChronology</code>.
      *
      * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
+     * @param monthOfYear  the month of the year, from 1 to 12
+     * @param dayOfMonth  the day of the month, from 1 to 31
+     * @param hourOfDay  the hour of the day, from 0 to 23
+     * @param minuteOfHour  the minute of the hour, from 0 to 59
      */
     public LocalDateTime(
             int year,
@@ -428,11 +428,11 @@ public LocalDateTime(
      * using <code>ISOChronology</code>.
      *
      * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
-     * @param secondOfMinute  the second of the minute
+     * @param monthOfYear  the month of the year, from 1 to 12
+     * @param dayOfMonth  the day of the month, from 1 to 31
+     * @param hourOfDay  the hour of the day, from 0 to 23
+     * @param minuteOfHour  the minute of the hour, from 0 to 59
+     * @param secondOfMinute  the second of the minute, from 0 to 59
      */
     public LocalDateTime(
             int year,
@@ -450,12 +450,12 @@ public LocalDateTime(
      * using <code>ISOChronology</code>.
      *
      * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
-     * @param secondOfMinute  the second of the minute
-     * @param millisOfSecond  the millisecond of the second
+     * @param monthOfYear  the month of the year, from 1 to 12
+     * @param dayOfMonth  the day of the month, from 1 to 31
+     * @param hourOfDay  the hour of the day, from 0 to 23
+     * @param minuteOfHour  the minute of the hour, from 0 to 59
+     * @param secondOfMinute  the second of the minute, from 0 to 59
+     * @param millisOfSecond  the millisecond of the second, from 0 to 999
      */
     public LocalDateTime(
             int year,
@@ -475,13 +475,13 @@ public LocalDateTime(
      * <p>
      * If the chronology is null, <code>ISOChronology</code> is used.
      *
-     * @param year  the year
-     * @param monthOfYear  the month of the year
-     * @param dayOfMonth  the day of the month
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
-     * @param secondOfMinute  the second of the minute
-     * @param millisOfSecond  the millisecond of the second
+     * @param year  the year, valid values defined by the chronology
+     * @param monthOfYear  the month of the year, valid values defined by the chronology
+     * @param dayOfMonth  the day of the month, valid values defined by the chronology
+     * @param hourOfDay  the hour of the day, valid values defined by the chronology
+     * @param minuteOfHour  the minute of the hour, valid values defined by the chronology
+     * @param secondOfMinute  the second of the minute, valid values defined by the chronology
+     * @param millisOfSecond  the millisecond of the second, valid values defined by the chronology
      * @param chronology  the chronology, null means ISOChronology in default zone
      */
     public LocalDateTime(
diff --git a/src/main/java/org/joda/time/LocalTime.java b/src/main/java/org/joda/time/LocalTime.java
index ea067b3eb..2e03ae60f 100644
--- a/src/main/java/org/joda/time/LocalTime.java
+++ b/src/main/java/org/joda/time/LocalTime.java
@@ -441,8 +441,8 @@ public LocalTime(Object instant, Chronology chronology) {
      * Constructs an instance set to the specified time
      * using <code>ISOChronology</code>.
      *
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
+     * @param hourOfDay  the hour of the day, from 0 to 23
+     * @param minuteOfHour  the minute of the hour, from 0 to 59
      */
     public LocalTime(
             int hourOfDay,
@@ -454,9 +454,9 @@ public LocalTime(
      * Constructs an instance set to the specified time
      * using <code>ISOChronology</code>.
      *
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
-     * @param secondOfMinute  the second of the minute
+     * @param hourOfDay  the hour of the day, from 0 to 23
+     * @param minuteOfHour  the minute of the hour, from 0 to 59
+     * @param secondOfMinute  the second of the minute, from 0 to 59
      */
     public LocalTime(
             int hourOfDay,
@@ -469,10 +469,10 @@ public LocalTime(
      * Constructs an instance set to the specified time
      * using <code>ISOChronology</code>.
      *
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
-     * @param secondOfMinute  the second of the minute
-     * @param millisOfSecond  the millisecond of the second
+     * @param hourOfDay  the hour of the day, from 0 to 23
+     * @param minuteOfHour  the minute of the hour, from 0 to 59
+     * @param secondOfMinute  the second of the minute, from 0 to 59
+     * @param millisOfSecond  the millisecond of the second, from 0 to 999
      */
     public LocalTime(
             int hourOfDay,
@@ -489,10 +489,10 @@ public LocalTime(
      * <p>
      * If the chronology is null, <code>ISOChronology</code> is used.
      *
-     * @param hourOfDay  the hour of the day
-     * @param minuteOfHour  the minute of the hour
-     * @param secondOfMinute  the second of the minute
-     * @param millisOfSecond  the millisecond of the second
+     * @param hourOfDay  the hour of the day, valid values defined by the chronology
+     * @param minuteOfHour  the minute of the hour, valid values defined by the chronology
+     * @param secondOfMinute  the second of the minute, valid values defined by the chronology
+     * @param millisOfSecond  the millisecond of the second, valid values defined by the chronology
      * @param chronology  the chronology, null means ISOChronology in default zone
      */
     public LocalTime(

From 2091e713bb05787a8fb38998827e0ec7715eed79 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 31 Jul 2012 11:59:29 +0100
Subject: [PATCH 10/52] Add P2 update site

---
 src/site/xdoc/related.xml | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/site/xdoc/related.xml b/src/site/xdoc/related.xml
index 85e94e38a..624e36eae 100644
--- a/src/site/xdoc/related.xml
+++ b/src/site/xdoc/related.xml
@@ -32,6 +32,8 @@ Support for the RFC2445 recurrence specification, as found in iCal.</li>
 A library providing persistence via the DataNucleus platform.</li>
 <li><a href="http://blog.bdoughan.com/2011/05/jaxb-and-joda-time-dates-and-times.html">JAXB</a>
 Notes on Joda-Time and JAXB.</li>
+<li><a href="https://github.com/muuki88/joda-osgi">P2 update site</a>
+Eclipse P2 update site.</li>
 </ul>
 <p>
 If your open source library provides a value added feature on top of Joda-Time, then let us know!

From 06fffaf3368f5516364b5469835530292cd434b9 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 13 Aug 2012 15:45:50 +0100
Subject: [PATCH 11/52] Ignore Eclipse files

---
 .gitignore | 1 +
 1 file changed, 1 insertion(+)

diff --git a/.gitignore b/.gitignore
index 540ab729d..e03c98fd7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,3 +6,4 @@ target/
 src/tz-data/
 *TempTest*
 /test-output/
+/.settings/

From 46b817a006e768865b1f0d2896e814dfa2d3244f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 13 Aug 2012 15:46:58 +0100
Subject: [PATCH 12/52] Fix formatter cannot print/parse code

Code to check if formatter cannot print/parse didn't work properly
---
 RELEASE-NOTES.txt                             |   8 +-
 .../time/format/DateTimeFormatterBuilder.java |  32 +++---
 .../format/TestDateTimeFormatterBuilder.java  | 108 +++++++++++++++++-
 3 files changed, 126 insertions(+), 22 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index c1feff5c1..541f746ac 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -37,6 +37,7 @@ Data compatible - Yes, except
 
 Semantic compatible - Yes, except
  - DateTimeFormatter.parseInto() retains the year if only month parsed (as it did in v1.x)
+ - If a formatter cannot print or parse, it will now throw an exception instead of ignoring it
 
 
 Deprecations since 2.1
@@ -49,13 +50,18 @@ Bug fixes since 2.1
 - MonthDay add/subtract [3528941]
   Addition and subtraction in MonthDay was fixed.
   It previously didn't work when the start value was 29th February.
-  
 
 - DateTimeFormatter.parseInto() [3522138]
   The v2.0 changes to handle parsing of month/day on their own (for Feb 29th) cause
   parseInto() to lose the year. This fix reverts behaviour to v1.x so that parseInto()
   will use the supplied year, not the default year of the formatter.
 
+- DateTimeFormatter.isPrinter()/isParser() and related
+  The Javadoc for DateTimeFormatterBuilder specified behaviour when the formatter
+  could not print or could not parse, but the code didn't implement it
+  Now it does, which means that DateTimeFormatter.isPrinter()/isParser() are now correct.
+  The formatter will also now throw UnsupportedOperationException when unable to print/parse.
+
 - FieldUtils.safeMultiply(long,int) [3520651]
   Fix implementation to throw exception for (Long.MIN_VALUE, -1)
 
diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 8948e3df2..ff847352d 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -216,7 +216,7 @@ public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {
      * Appends just a printer. With no matching parser, a parser cannot be
      * built from this DateTimeFormatterBuilder.
      *
-     * @param printer  the printer to add
+     * @param printer  the printer to add, not null
      * @return this DateTimeFormatterBuilder, for chaining
      * @throws IllegalArgumentException if printer is null or of an invalid type
      */
@@ -229,7 +229,7 @@ public DateTimeFormatterBuilder append(DateTimePrinter printer) {
      * Appends just a parser. With no matching printer, a printer cannot be
      * built from this builder.
      *
-     * @param parser  the parser to add
+     * @param parser  the parser to add, not null
      * @return this DateTimeFormatterBuilder, for chaining
      * @throws IllegalArgumentException if parser is null or of an invalid type
      */
@@ -241,8 +241,8 @@ public DateTimeFormatterBuilder append(DateTimeParser parser) {
     /**
      * Appends a printer/parser pair.
      *
-     * @param printer  the printer to add
-     * @param parser  the parser to add
+     * @param printer  the printer to add, not null
+     * @param parser  the parser to add, not null
      * @return this DateTimeFormatterBuilder, for chaining
      * @throws IllegalArgumentException if printer or parser is null or of an invalid type
      */
@@ -2573,7 +2573,7 @@ public int parseInto(DateTimeParserBucket bucket, String text, int position) {
 
             decompose(elementPairs, printerList, parserList);
 
-            if (printerList.size() <= 0) {
+            if (printerList.contains(null) || printerList.isEmpty()) {
                 iPrinters = null;
                 iPrintedLengthEstimate = 0;
             } else {
@@ -2588,7 +2588,7 @@ public int parseInto(DateTimeParserBucket bucket, String text, int position) {
                 iPrintedLengthEstimate = printEst;
             }
 
-            if (parserList.size() <= 0) {
+            if (parserList.contains(null) || parserList.isEmpty()) {
                 iParsers = null;
                 iParsedLengthEstimate = 0;
             } else {
@@ -2713,21 +2713,17 @@ private void decompose(List<Object> elementPairs, List<Object> printerList, List
             int size = elementPairs.size();
             for (int i=0; i<size; i+=2) {
                 Object element = elementPairs.get(i);
-                if (element instanceof DateTimePrinter) {
-                    if (element instanceof Composite) {
-                        addArrayToList(printerList, ((Composite)element).iPrinters);
-                    } else {
-                        printerList.add(element);
-                    }
+                if (element instanceof Composite) {
+                    addArrayToList(printerList, ((Composite)element).iPrinters);
+                } else {
+                    printerList.add(element);
                 }
 
                 element = elementPairs.get(i + 1);
-                if (element instanceof DateTimeParser) {
-                    if (element instanceof Composite) {
-                        addArrayToList(parserList, ((Composite)element).iParsers);
-                    } else {
-                        parserList.add(element);
-                    }
+                if (element instanceof Composite) {
+                    addArrayToList(parserList, ((Composite)element).iParsers);
+                } else {
+                    parserList.add(element);
                 }
             }
         }
diff --git a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
index 54033bb42..bbc95e1bb 100644
--- a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
@@ -133,7 +133,101 @@ public void test_append_Printer() {
         bld2.appendLiteral('X');
         bld2.append(p);
         bld2.appendLiteral('Z');
-        assertEquals("XYZ", bld2.toFormatter().print(0L));
+        DateTimeFormatter f = bld2.toFormatter();
+        assertEquals(true, f.isPrinter());
+        assertEquals(false, f.isParser());
+        assertEquals("XYZ", f.print(0L));
+    }
+
+    public void test_append_nullPrinter() {
+        try {
+            DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();
+            bld2.append((DateTimePrinter) null);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_append_Parser() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        bld.appendLiteral('Y');
+        DateTimeParser p = bld.toParser();
+        
+        DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();
+        bld2.appendLiteral('X');
+        bld2.append(p);
+        bld2.appendLiteral('Z');
+        DateTimeFormatter f = bld2.toFormatter();
+        assertEquals(false, f.isPrinter());
+        assertEquals(true, f.isParser());
+        assertEquals(0, f.withZoneUTC().parseMillis("XYZ"));
+    }
+
+    public void test_append_nullParser() {
+        try {
+            DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();
+            bld2.append((DateTimeParser) null);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_append_Printer_nullParser() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        bld.appendLiteral('Y');
+        DateTimePrinter p = bld.toPrinter();
+        
+        try {
+            DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();
+            bld2.append(p, (DateTimeParser) null);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    public void test_append_nullPrinter_Parser() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        bld.appendLiteral('Y');
+        DateTimeParser p = bld.toParser();
+        
+        try {
+            DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();
+            bld2.append((DateTimePrinter) null, p);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_appendOptional_Parser() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        bld.appendLiteral('Y');
+        DateTimeParser p = bld.toParser();
+        
+        DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();
+        bld2.appendLiteral('X');
+        bld2.appendOptional(p);
+        bld2.appendLiteral('Z');
+        DateTimeFormatter f = bld2.toFormatter();
+        assertEquals(false, f.isPrinter());
+        assertEquals(true, f.isParser());
+        assertEquals(0, f.withZoneUTC().parseMillis("XYZ"));
+    }
+
+    public void test_appendOptional_nullParser() {
+        try {
+            DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();
+            bld2.appendOptional((DateTimeParser) null);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
     }
 
     //-----------------------------------------------------------------------
@@ -374,6 +468,8 @@ public void test_printParseShortName() {
             .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneShortName();
         DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
         
+        assertEquals(true, f.isPrinter());
+        assertEquals(false, f.isParser());
         DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);
         assertEquals("2011-01-04 12:30 GMT", f.print(dt1));
         DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);
@@ -381,7 +477,7 @@ public void test_printParseShortName() {
         try {
             f.parseDateTime("2007-03-04 12:30 GMT");
             fail();
-        } catch (IllegalArgumentException e) {
+        } catch (UnsupportedOperationException e) {
         }
     }
 
@@ -393,6 +489,8 @@ public void test_printParseShortNameWithLookup() {
             .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneShortName(lookup);
         DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
         
+        assertEquals(true, f.isPrinter());
+        assertEquals(true, f.isParser());
         DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);
         assertEquals("2011-01-04 12:30 GMT", f.print(dt1));
         DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);
@@ -413,6 +511,8 @@ public void test_printParseLongName() {
             .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneName();
         DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
         
+        assertEquals(true, f.isPrinter());
+        assertEquals(false, f.isParser());
         DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);
         assertEquals("2011-01-04 12:30 Greenwich Mean Time", f.print(dt1));
         DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);
@@ -420,7 +520,7 @@ public void test_printParseLongName() {
         try {
             f.parseDateTime("2007-03-04 12:30 GMT");
             fail();
-        } catch (IllegalArgumentException e) {
+        } catch (UnsupportedOperationException e) {
         }
     }
 
@@ -432,6 +532,8 @@ public void test_printParseLongNameWithLookup() {
             .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneName(lookup);
         DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
         
+        assertEquals(true, f.isPrinter());
+        assertEquals(true, f.isParser());
         DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);
         assertEquals("2011-01-04 12:30 Greenwich Mean Time", f.print(dt1));
         DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);

From 14863a51230b3d44201646dbc1ce5d7f6bb97a33 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 13 Aug 2012 17:01:52 +0100
Subject: [PATCH 13/52] Parsing of US short time-zone names

---
 RELEASE-NOTES.txt                             |  6 ++
 .../java/org/joda/time/DateTimeUtils.java     | 55 +++++++++++++++++++
 .../org/joda/time/format/DateTimeFormat.java  |  2 +-
 .../time/format/DateTimeFormatterBuilder.java |  9 ++-
 .../format/TestDateTimeFormatterBuilder.java  | 29 ++++++++++
 5 files changed, 97 insertions(+), 4 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 541f746ac..5a6b62cee 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -38,6 +38,7 @@ Data compatible - Yes, except
 Semantic compatible - Yes, except
  - DateTimeFormatter.parseInto() retains the year if only month parsed (as it did in v1.x)
  - If a formatter cannot print or parse, it will now throw an exception instead of ignoring it
+ - Format pattern "z" now has limited parsing abilities
 
 
 Deprecations since 2.1
@@ -62,6 +63,11 @@ Bug fixes since 2.1
   Now it does, which means that DateTimeFormatter.isPrinter()/isParser() are now correct.
   The formatter will also now throw UnsupportedOperationException when unable to print/parse.
 
+- Parsing of US short time-zone names
+  The time-zone names EST/EDT/CST/CDT/MST/MDT/PST/PDT/UT/UTC/GMT can now be parsed in a limited way.
+  This is enabled for formatter patterns of "z" (and "zz" or "zzz").
+  The builder continues to offer a better way of manually managing this.
+
 - FieldUtils.safeMultiply(long,int) [3520651]
   Fix implementation to throw exception for (Long.MIN_VALUE, -1)
 
diff --git a/src/main/java/org/joda/time/DateTimeUtils.java b/src/main/java/org/joda/time/DateTimeUtils.java
index 932a9662d..5839b44c7 100644
--- a/src/main/java/org/joda/time/DateTimeUtils.java
+++ b/src/main/java/org/joda/time/DateTimeUtils.java
@@ -17,7 +17,11 @@
 
 import java.lang.reflect.Method;
 import java.text.DateFormatSymbols;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Locale;
+import java.util.Map;
 
 import org.joda.time.chrono.ISOChronology;
 
@@ -35,6 +39,32 @@
     private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();
     /** The millisecond provider currently in use. */
     private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;
+    /** The millisecond provider currently in use. */
+    private static volatile Map<String, DateTimeZone> cZoneNames;
+    static {
+        // names from RFC-822 / JDK
+        // this is all very US-centric and dubious, but perhaps it will help some
+        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();
+        map.put("UT", DateTimeZone.UTC);
+        map.put("UTC", DateTimeZone.UTC);
+        map.put("GMT", DateTimeZone.UTC);
+        put(map, "EST", "America/New_York");
+        put(map, "EDT", "America/New_York");
+        put(map, "CST", "America/Chigaco");
+        put(map, "CDT", "America/Chigaco");
+        put(map, "MST", "America/Denver");
+        put(map, "MDT", "America/Denver");
+        put(map, "PST", "America/Los_Angeles");
+        put(map, "PDT", "America/Los_Angeles");
+        cZoneNames = Collections.unmodifiableMap(map);
+    }
+    private static void put(Map<String, DateTimeZone> map, String name, String id) {
+        try {
+            map.put(name, DateTimeZone.forID(id));
+        } catch (RuntimeException ex) {
+            // ignore
+        }
+    }
 
     /**
      * Restrictive constructor
@@ -369,6 +399,31 @@ public static final DateFormatSymbols getDateFormatSymbols(Locale locale) {
         }
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the default map of time zone names.
+     * <p>
+     * This can be changed by {@link #setDefaultTimeZoneNames}.
+     * 
+     * @return the unmodifiable map of abbreviations to zones, not null
+     * @since 2.2
+     */
+    public static final Map<String, DateTimeZone> getDefaultTimeZoneNames() {
+        return cZoneNames;
+    }
+
+    /**
+     * Sets the default map of time zone names.
+     * <p>
+     * The map is copied before storage.
+     * 
+     * @param names  the map of abbreviations to zones, not null
+     * @since 2.2
+     */
+    public static final void setDefaultTimeZoneNames(Map<String, DateTimeZone> names) {
+        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));
+    }
+
     //-----------------------------------------------------------------------
     /**
      * A millisecond provider, allowing control of the system clock.
diff --git a/src/main/java/org/joda/time/format/DateTimeFormat.java b/src/main/java/org/joda/time/format/DateTimeFormat.java
index 2639f9add..b2f93e40a 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormat.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormat.java
@@ -533,7 +533,7 @@ private static void parsePatternTo(DateTimeFormatterBuilder builder, String patt
                 if (tokenLen >= 4) {
                     builder.appendTimeZoneName();
                 } else {
-                    builder.appendTimeZoneShortName();
+                    builder.appendTimeZoneShortName(null);
                 }
                 break;
             case 'Z': // time zone offset
diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index ff847352d..96781dbff 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -29,6 +29,7 @@
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeField;
 import org.joda.time.DateTimeFieldType;
+import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
 import org.joda.time.MutableDateTime;
 import org.joda.time.ReadablePartial;
@@ -1012,7 +1013,7 @@ public DateTimeFormatterBuilder appendTimeZoneShortName() {
      * The names are searched in the order of the map, thus it is strongly recommended
      * to use a {@code LinkedHashMap} or similar.
      *
-     * @param parseLookup  the table of names, not null
+     * @param parseLookup  the table of names, null to use the {@link DateTimeUtils#getDefaultTimeZoneNames() default names}
      * @return this DateTimeFormatterBuilder, for chaining
      */
     public DateTimeFormatterBuilder appendTimeZoneShortName(Map<String, DateTimeZone> parseLookup) {
@@ -2483,10 +2484,12 @@ public int estimateParsedLength() {
         }
 
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
+            Map<String, DateTimeZone> parseLookup = iParseLookup;
+            parseLookup = (parseLookup != null ? parseLookup : DateTimeUtils.getDefaultTimeZoneNames());
             String str = text.substring(position);
-            for (String name : iParseLookup.keySet()) {
+            for (String name : parseLookup.keySet()) {
                 if (str.startsWith(name)) {
-                    bucket.setZone(iParseLookup.get(name));
+                    bucket.setZone(parseLookup.get(name));
                     return position + name.length();
                 }
             }
diff --git a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
index bbc95e1bb..e064256f9 100644
--- a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
@@ -38,6 +38,8 @@
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
+    private static final DateTimeZone NEW_YORK = DateTimeZone.forID("America/New_York");
+    private static final DateTimeZone LOS_ANGELES = DateTimeZone.forID("America/Los_Angeles");
 
     public static void main(String[] args) {
         junit.textui.TestRunner.run(suite());
@@ -505,6 +507,33 @@ public void test_printParseShortNameWithLookup() {
         }
     }
 
+    public void test_printParseShortNameWithAutoLookup() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+            .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneShortName(null);
+        DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
+        
+        assertEquals(true, f.isPrinter());
+        assertEquals(true, f.isParser());
+        DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, NEW_YORK);
+        assertEquals("2011-01-04 12:30 EST", f.print(dt1));
+        DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, NEW_YORK);
+        assertEquals("2011-07-04 12:30 EDT", f.print(dt2));
+        DateTime dt3 = new DateTime(2011, 1, 4, 12, 30, 0, LOS_ANGELES);
+        assertEquals("2011-01-04 12:30 PST", f.print(dt3));
+        DateTime dt4 = new DateTime(2011, 7, 4, 12, 30, 0, LOS_ANGELES);
+        assertEquals("2011-07-04 12:30 PDT", f.print(dt4));
+        
+        assertEquals(dt1.getZone() + " " + f.parseDateTime("2011-01-04 12:30 EST").getZone(), dt1, f.parseDateTime("2011-01-04 12:30 EST"));
+        assertEquals(dt2, f.parseDateTime("2011-07-04 12:30 EDT"));
+        assertEquals(dt3, f.parseDateTime("2011-01-04 12:30 PST"));
+        assertEquals(dt4, f.parseDateTime("2011-07-04 12:30 PDT"));
+        try {
+            f.parseDateTime("2007-03-04 12:30 PPP");
+            fail();
+        } catch (IllegalArgumentException e) {
+        }
+    }
+
     //-----------------------------------------------------------------------
     public void test_printParseLongName() {
         DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()

From bce8df70d02f86a57eb14774711ec1eec0f664e4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 13 Aug 2012 17:19:05 +0100
Subject: [PATCH 14/52] Better installation docs

---
 src/site/xdoc/installation.xml | 28 ++++++++++++++--------------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git a/src/site/xdoc/installation.xml b/src/site/xdoc/installation.xml
index 699a1f592..78f3dd0fe 100644
--- a/src/site/xdoc/installation.xml
+++ b/src/site/xdoc/installation.xml
@@ -22,20 +22,20 @@ of the source code suitable for linking to the jar file in IDEs such as Eclipse.
 <p>
 The release notes for upgraders can be found here:
 <ul>
-<li><a href="upgradeto210.html">Version 2.0 to Version 2.1</a></li>
-<li><a href="upgradeto200.html">Version 1.6 to Version 2.0</a></li>
-<li><a href="upgradeto162.html">Version 1.6 to Version 1.6.2</a></li>
-<li><a href="upgradeto161.html">Version 1.6 to Version 1.6.1</a></li>
-<li><a href="upgradeto160.html">Version 1.5 to Version 1.6</a></li>
-<li><a href="upgradeto152.html">Version 1.5.1 to Version 1.5.2</a></li>
-<li><a href="upgradeto151.html">Version 1.5 to Version 1.5.1</a></li>
-<li><a href="upgradeto150.html">Version 1.4 to Version 1.5</a></li>
-<li><a href="upgradeto140.html">Version 1.3 to Version 1.4</a></li>
-<li><a href="upgradeto130.html">Version 1.2 to Version 1.3</a></li>
-<li><a href="upgradeto120.html">Version 1.1 to Version 1.2</a></li>
-<li><a href="upgradeto110.html">Version 1.0 to Version 1.1</a></li>
-<li><a href="upgradeto100.html">Version 0.99 to Version 1.0</a></li>
-<li><a href="upgradeto099.html">Version 0.98 to Version 0.99</a></li>
+<li><a href="upgradeto210.html">Version 2.1</a> - upgrade from Version 2.0</li>
+<li><a href="upgradeto200.html">Version 2.0</a> - upgrade from Version 1.6</li>
+<li><a href="upgradeto162.html">Version 1.6.2</a> - upgrade from Version 1.6.1</li>
+<li><a href="upgradeto161.html">Version 1.6.1</a> - upgrade from Version 1.6</li>
+<li><a href="upgradeto160.html">Version 1.6</a> - upgrade from Version 1.5</li>
+<li><a href="upgradeto152.html">Version 1.5.2</a> - upgrade from Version 1.5.1</li>
+<li><a href="upgradeto151.html">Version 1.5.1</a> - upgrade from Version 1.5</li>
+<li><a href="upgradeto150.html">Version 1.5</a> - upgrade from Version 1.4</li>
+<li><a href="upgradeto140.html">Version 1.4</a> - upgrade from Version 1.3</li>
+<li><a href="upgradeto130.html">Version 1.3</a> - upgrade from Version 1.2</li>
+<li><a href="upgradeto120.html">Version 1.2</a> - upgrade from Version 1.1</li>
+<li><a href="upgradeto110.html">Version 1.1</a> - upgrade from Version 1.0</li>
+<li><a href="upgradeto100.html">Version 1.0</a> - upgrade from Version 0.99</li>
+<li><a href="upgradeto099.html">Version 0.99</a> - upgrade from Version 0.98</li>
 </ul>
 </p>
 <p>

From 6a1b24c5d85270b57706b3f7ca0b4c05a752b3ff Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 1 Sep 2012 00:09:10 +0100
Subject: [PATCH 15/52] Add methods to calculate Julian Day

---
 RELEASE-NOTES.txt                             |  3 +
 .../java/org/joda/time/DateTimeUtils.java     | 63 ++++++++++++++++++-
 .../java/org/joda/time/TestDateTimeUtils.java | 46 +++++++++++++-
 3 files changed, 110 insertions(+), 2 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 5a6b62cee..1938947fd 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -23,6 +23,9 @@ Enhancements since 2.1
 ----------------------
 - Change some StringBuffer uses to StringBuilder [3532330]
 
+- Add method to calculate the Julian Day
+  See DateTimeUtils
+
 
 Compatibility with 2.1
 ----------------------
diff --git a/src/main/java/org/joda/time/DateTimeUtils.java b/src/main/java/org/joda/time/DateTimeUtils.java
index 5839b44c7..7a848166b 100644
--- a/src/main/java/org/joda/time/DateTimeUtils.java
+++ b/src/main/java/org/joda/time/DateTimeUtils.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2010 Stephen Colebourne
+ *  Copyright 2001-2012 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -424,6 +424,67 @@ public static final void setDefaultTimeZoneNames(Map<String, DateTimeZone> names
         cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));
     }
 
+    //-------------------------------------------------------------------------
+    /**
+     * Calculates the astronomical Julian Day for an instant.
+     * <p>
+     * The <a href="http://en.wikipedia.org/wiki/Julian_day">Julian day</a> is a well-known
+     * system of time measurement for scientific use by the astronomy community.
+     * It expresses the interval of time in days and fractions of a day since
+     * January 1, 4713 BC (Julian) Greenwich noon.
+     * <p>
+     * Each day starts at midday (not midnight) and time is expressed as a fraction.
+     * Thus the fraction 0.25 is 18:00. equal to one quarter of the day from midday to midday.
+     * <p>
+     * Note that this method has nothing to do with the day-of-year.
+     * 
+     * @param epochMillis  the epoch millis from 1970-01-01Z
+     * @return the astronomical Julian Day represented by the specified instant
+     * @since 2.2
+     */
+    public static final double toJulianDay(long epochMillis) {
+        // useful links
+        // http://en.wikipedia.org/wiki/Julian_day#cite_note-13 - Wikipedia
+        // http://aa.usno.navy.mil/data/docs/JulianDate.php" - USNO
+        // http://users.zoominternet.net/~matto/Java/Julian%20Date%20Converter.htm - Julian Date Converter by Matt Oltersdorf
+        // http://ssd.jpl.nasa.gov/tc.cgi#top - CalTech
+        double epochDay = epochMillis / 86400000d;
+        return epochDay + 2440587.5d;
+    }
+
+    /**
+     * Calculates the astronomical Julian Day Number for an instant.
+     * <p>
+     * The {@link #toJulianDay(long)} method calculates the astronomical Julian Day
+     * with a fraction based on days starting at midday.
+     * This method calculates the variant where days start at midnight.
+     * JDN 0 is used for the date equivalent to Monday January 1, 4713 BC (Julian).
+     * Thus these days start 12 hours before those of the fractional Julian Day.
+     * <p>
+     * Note that this method has nothing to do with the day-of-year.
+     * 
+     * @param epochMillis  the epoch millis from 1970-01-01Z
+     * @return the astronomical Julian Day represented by the specified instant
+     * @since 2.2
+     */
+    public static final long toJulianDayNumber(long epochMillis) {
+        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);
+    }
+
+    /**
+     * Creates a date-time from a Julian Day.
+     * <p>
+     * Returns the {@code DateTime} object equal to the specified Julian Day.
+     * 
+     * @param julianDay  the Julian Day
+     * @return the epoch millis from 1970-01-01Z
+     * @since 2.2
+     */
+    public static final long fromJulianDay(double julianDay) {
+        double epochDay = julianDay - 2440587.5d;
+        return (long) (epochDay * 86400000d);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * A millisecond provider, allowing control of the system clock.
diff --git a/src/test/java/org/joda/time/TestDateTimeUtils.java b/src/test/java/org/joda/time/TestDateTimeUtils.java
index e5ee99628..dceb04619 100644
--- a/src/test/java/org/joda/time/TestDateTimeUtils.java
+++ b/src/test/java/org/joda/time/TestDateTimeUtils.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2010 Stephen Colebourne
+ *  Copyright 2001-2012 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -33,6 +33,7 @@
 import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.ISOChronology;
+import org.joda.time.chrono.JulianChronology;
 
 /**
  * This class is a Junit unit test for DateTimeUtils.
@@ -468,4 +469,47 @@ public void testIsContiguous_RP_GJChronology() {
         } catch (IllegalArgumentException ex) {}
     }
 
+    //-----------------------------------------------------------------------
+    public void test_julianDay() {
+        DateTime base = new DateTime(1970, 1, 1, 0, 0, DateTimeZone.UTC);
+        
+        assertEquals(2440587.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);
+        assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis()));
+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.5d));
+        
+        base = base.plusHours(6);
+        assertEquals(2440587.75d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);
+        assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis()));
+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.75d));
+        
+        base = base.plusHours(6);
+        assertEquals(2440588d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);
+        assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis()));
+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588d));
+        
+        base = base.plusHours(6);
+        assertEquals(2440588.25d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);
+        assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis()));
+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.25d));
+        
+        base = base.plusHours(6);
+        assertEquals(2440588.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);
+        assertEquals(2440589, DateTimeUtils.toJulianDayNumber(base.getMillis()));
+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.5d));
+        
+        base = new DateTime(2012, 8, 31, 23, 50, DateTimeZone.UTC);
+        assertEquals(2456171.4930555555, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);
+        assertEquals(2456171, DateTimeUtils.toJulianDayNumber(base.getMillis()));
+        
+        base = new DateTime(-4713, 1, 1, 12, 0, JulianChronology.getInstanceUTC());
+        assertEquals(0d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);
+        assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis()));
+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(0d));
+        
+        base = new DateTime(-4713, 1, 1, 0, 0, JulianChronology.getInstanceUTC());
+        assertEquals(-0.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);
+        assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis()));
+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(-0.5d));
+    }
+
 }

From 5d08a1cdbfa6ce86a0baf637493c464e91e91968 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 3 Sep 2012 12:00:13 +0100
Subject: [PATCH 16/52] Fix period formatter to correctly output values
 negative milliseconds [3564249]

Fix is between zero and -1 second
---
 RELEASE-NOTES.txt                             |  3 +++
 .../time/format/PeriodFormatterBuilder.java   |  8 +++++--
 .../joda/time/format/TestISOPeriodFormat.java | 22 ++++++++++++++++++-
 3 files changed, 30 insertions(+), 3 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 1938947fd..f67f195ec 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -66,6 +66,9 @@ Bug fixes since 2.1
   Now it does, which means that DateTimeFormatter.isPrinter()/isParser() are now correct.
   The formatter will also now throw UnsupportedOperationException when unable to print/parse.
 
+- Period formatter [3564249]
+  Formatting did not correctly output values for negative milliseconds between zero and -1 second
+
 - Parsing of US short time-zone names
   The time-zone names EST/EDT/CST/CDT/MST/MDT/PST/PDT/UT/UTC/GMT can now be parsed in a limited way.
   This is enabled for formatter patterns of "z" (and "zz" or "zzz").
diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
index 2471fce9e..29b0872cb 100644
--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -1094,8 +1094,8 @@ public int calculatePrintedLength(ReadablePeriod period, Locale locale) {
             int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);
             if (iFieldType >= SECONDS_MILLIS) {
                 // valueLong contains the seconds and millis fields
-                // the minimum output is 0.000, which is 4 digits
-                sum = Math.max(sum, 4);
+                // the minimum output is 0.000, which is 4 or 5 digits with a negative
+                sum = (valueLong < 0 ? Math.max(sum, 5) : Math.max(sum, 4));
                 // plus one for the decimal point
                 sum++;
                 if (iFieldType == SECONDS_OPTIONAL_MILLIS &&
@@ -1130,6 +1130,7 @@ public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {
             if (iPrefix != null) {
                 iPrefix.printTo(buf, value);
             }
+            int bufLen = buf.length();
             int minDigits = iMinPrintedDigits;
             if (minDigits <= 1) {
                 FormatUtils.appendUnpaddedInteger(buf, value);
@@ -1139,6 +1140,9 @@ public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {
             if (iFieldType >= SECONDS_MILLIS) {
                 int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);
                 if (iFieldType == SECONDS_MILLIS || dp > 0) {
+                    if (valueLong < 0 && valueLong > -DateTimeConstants.MILLIS_PER_SECOND) {
+                        buf.insert(bufLen, '-');
+                    }
                     buf.append('.');
                     FormatUtils.appendPaddedInteger(buf, dp, 3);
                 }
diff --git a/src/test/java/org/joda/time/format/TestISOPeriodFormat.java b/src/test/java/org/joda/time/format/TestISOPeriodFormat.java
index ff5e392f1..bef0d425b 100644
--- a/src/test/java/org/joda/time/format/TestISOPeriodFormat.java
+++ b/src/test/java/org/joda/time/format/TestISOPeriodFormat.java
@@ -99,7 +99,7 @@ public void testSubclassableConstructor() {
 
     //-----------------------------------------------------------------------
     public void testFormatStandard() {
-        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);
+        Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8);
         assertEquals("P1Y2M3W4DT5H6M7.008S", ISOPeriodFormat.standard().print(p));
         p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);
         assertEquals("P1Y2M3W4DT5H6M7S", ISOPeriodFormat.standard().print(p));
@@ -115,6 +115,26 @@ public void testFormatStandard() {
         assertEquals("PT5H6M7.008S", ISOPeriodFormat.standard().print(TIME_PERIOD));
     }
 
+    public void testFormatStandard_negative() {
+        Period p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);
+        assertEquals("P-1Y-2M-3W-4DT-5H-6M-7.008S", ISOPeriodFormat.standard().print(p));
+        
+        p = Period.years(-54);
+        assertEquals("P-54Y", ISOPeriodFormat.standard().print(p));
+        
+        p = Period.seconds(4).withMillis(-8);
+        assertEquals("PT3.992S", ISOPeriodFormat.standard().print(p));
+        
+        p = Period.seconds(-4).withMillis(8);
+        assertEquals("PT-3.992S", ISOPeriodFormat.standard().print(p));
+        
+        p = Period.seconds(-23);
+        assertEquals("PT-23S", ISOPeriodFormat.standard().print(p));
+        
+        p = Period.millis(-8);
+        assertEquals("PT-0.008S", ISOPeriodFormat.standard().print(p));
+    }
+
     //-----------------------------------------------------------------------
     public void testFormatAlternate() {
         Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);

From 5d0f10b46684dfa1518e3885e0ef11fdd59f1578 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 6 Sep 2012 23:30:40 +0100
Subject: [PATCH 17/52] Add test case to investigate issue

https://sourceforge.net/projects/joda-time/forums/forum/337835/topic/5625120
---
 .../joda/time/format/TestDateTimeFormatterBuilder.java | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
index e064256f9..ae5bf7fc0 100644
--- a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
@@ -358,6 +358,16 @@ public void test_printParseZoneDawsonCreek() {  // clashes with shorter Dawson
         assertEquals(dt, f.parseDateTime("2007-03-04 12:30 America/Dawson_Creek"));
     }
 
+    public void test_printParseZoneBahiaBanderas() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+            .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId();
+        DateTimeFormatter f = bld.toFormatter();
+        
+        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("America/Bahia_Banderas"));
+        assertEquals("2007-03-04 12:30 America/Bahia_Banderas", f.print(dt));
+        assertEquals(dt, f.parseDateTime("2007-03-04 12:30 America/Bahia_Banderas"));
+    }
+
     public void test_printParseOffset() {
         DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
             .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2);

From a9f1ae91311276c5321e23f880aa3b0078e1d191 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 13 Sep 2012 13:42:51 +0100
Subject: [PATCH 18/52] Fix to avoid exception for times before 1970 with
 non-zero milli-of-second

---
 RELEASE-NOTES.txt                                   |  4 ++++
 src/main/java/org/joda/time/LocalDateTime.java      |  2 +-
 .../joda/time/TestLocalDateTime_Constructors.java   | 13 ++++++++++++-
 3 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index f67f195ec..aa536a219 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -55,6 +55,10 @@ Bug fixes since 2.1
   Addition and subtraction in MonthDay was fixed.
   It previously didn't work when the start value was 29th February.
 
+- LocalDateTime.fromDateFields()
+  This used to fail before 1970 when the input had a milli-of-second field
+  Fixed to not throw an exception
+
 - DateTimeFormatter.parseInto() [3522138]
   The v2.0 changes to handle parsing of month/day on their own (for Feb 29th) cause
   parseInto() to lose the year. This fix reverts behaviour to v1.x so that parseInto()
diff --git a/src/main/java/org/joda/time/LocalDateTime.java b/src/main/java/org/joda/time/LocalDateTime.java
index d9670415f..325192b30 100644
--- a/src/main/java/org/joda/time/LocalDateTime.java
+++ b/src/main/java/org/joda/time/LocalDateTime.java
@@ -238,7 +238,7 @@ public static LocalDateTime fromDateFields(Date date) {
             date.getHours(),
             date.getMinutes(),
             date.getSeconds(),
-            (int) (date.getTime() % 1000)
+            (((int) (date.getTime() % 1000)) + 1000) % 1000
         );
     }
 
diff --git a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
index 853e1e682..1dbb381a0 100644
--- a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
+++ b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
@@ -114,7 +114,7 @@ public void testFactory_FromCalendarFields() throws Exception {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_FromDateFields() throws Exception {
+    public void testFactory_FromDateFields_after1970() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5 ,6, 7);
@@ -125,6 +125,17 @@ public void testFactory_FromDateFields() throws Exception {
         } catch (IllegalArgumentException ex) {}
     }
 
+    public void testFactory_FromDateFields_before1970() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(1969, 2, 3, 4, 5 ,6, 7);
+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
+        try {
+            LocalDateTime.fromDateFields((Date) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
     //-----------------------------------------------------------------------
     public void testConstructor() throws Throwable {
         LocalDateTime test = new LocalDateTime();

From fd88604b0462f26b14575f68e99a4af5c7ac18f7 Mon Sep 17 00:00:00 2001
From: John Fletcher <jfletcher@medlinetec.eu>
Date: Tue, 25 Sep 2012 10:47:54 +0200
Subject: [PATCH 19/52] Corrected accent on i in Spanish 'dias'

---
 src/main/java/org/joda/time/format/messages_es.properties | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/joda/time/format/messages_es.properties b/src/main/java/org/joda/time/format/messages_es.properties
index 150478af6..986175175 100644
--- a/src/main/java/org/joda/time/format/messages_es.properties
+++ b/src/main/java/org/joda/time/format/messages_es.properties
@@ -10,8 +10,8 @@ PeriodFormat.month=\ mes
 PeriodFormat.months=\ meses
 PeriodFormat.week=\ semana
 PeriodFormat.weeks=\ semanas
-PeriodFormat.day=\ dia
-PeriodFormat.days=\ dias
+PeriodFormat.day=\ d�a
+PeriodFormat.days=\ d�as
 PeriodFormat.hour=\ hora
 PeriodFormat.hours=\ horas
 PeriodFormat.minute=\ minuto

From 6d3a272c0ace74604b29e11b9850853b0b03bf34 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 26 Sep 2012 13:48:45 +0100
Subject: [PATCH 20/52] Fix tests to match changes Spanish resource file

---
 RELEASE-NOTES.txt                                      |  3 +++
 .../java/org/joda/time/format/TestPeriodFormat.java    | 10 +++++-----
 2 files changed, 8 insertions(+), 5 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index aa536a219..de2691718 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -86,6 +86,9 @@ Bug fixes since 2.1
 
 - Javadoc fix to BaseChronology [3513326]
 
+- Fixed Spanish translation of day - dia now has accented i
+  https://github.com/JodaOrg/joda-time/pull/5
+
 
 Scala
 --------
diff --git a/src/test/java/org/joda/time/format/TestPeriodFormat.java b/src/test/java/org/joda/time/format/TestPeriodFormat.java
index bbf6939e8..ccf963d3e 100644
--- a/src/test/java/org/joda/time/format/TestPeriodFormat.java
+++ b/src/test/java/org/joda/time/format/TestPeriodFormat.java
@@ -192,31 +192,31 @@ public void test_wordBased_pt_cached() {
     //-----------------------------------------------------------------------
     public void test_wordBased_es_formatStandard() {
         Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);
-        assertEquals("1 dia, 5 horas, 6 minutos, 7 segundos y 8 milisegundos", PeriodFormat.wordBased(ES).print(p));
+        assertEquals("1 d\u00EDa, 5 horas, 6 minutos, 7 segundos y 8 milisegundos", PeriodFormat.wordBased(ES).print(p));
     }
 
     //-----------------------------------------------------------------------
     public void test_wordBased_es_FormatOneField() {
         Period p = Period.days(2);
-        assertEquals("2 dias", PeriodFormat.wordBased(ES).print(p));
+        assertEquals("2 d\u00EDas", PeriodFormat.wordBased(ES).print(p));
     }
 
     //-----------------------------------------------------------------------
     public void test_wordBased_es_formatTwoFields() {
         Period p = Period.days(2).withHours(5);
-        assertEquals("2 dias y 5 horas", PeriodFormat.wordBased(ES).print(p));
+        assertEquals("2 d\u00EDas y 5 horas", PeriodFormat.wordBased(ES).print(p));
     }
 
     //-----------------------------------------------------------------------
     public void test_wordBased_es_parseOneField() {
         Period p = Period.days(2);
-        assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod("2 dias"));
+        assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod("2 d\u00EDas"));
     }
 
     //-----------------------------------------------------------------------
     public void test_wordBased_es_parseTwoFields() {
         Period p = Period.days(2).withHours(5);
-        assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod("2 dias y 5 horas"));
+        assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod("2 d\u00EDas y 5 horas"));
     }
 
     //-----------------------------------------------------------------------

From 136667ccf66c62866dc99c7967cf8491804a54be Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 27 Sep 2012 14:45:18 +0100
Subject: [PATCH 21/52] Add Danish translation of word-based periods

Originated from Kasper Laudrup, checked by SJC
---
 RELEASE-NOTES.txt                             |  4 +++-
 .../joda/time/format/messages_da.properties   | 22 +++++++++++++++++++
 .../joda/time/format/TestPeriodFormat.java    | 16 +++++++++++++-
 3 files changed, 40 insertions(+), 2 deletions(-)
 create mode 100644 src/main/java/org/joda/time/format/messages_da.properties

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index de2691718..36d395d8c 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -26,6 +26,8 @@ Enhancements since 2.1
 - Add method to calculate the Julian Day
   See DateTimeUtils
 
+- Add Danish translation of word-based periods
+
 
 Compatibility with 2.1
 ----------------------
@@ -86,7 +88,7 @@ Bug fixes since 2.1
 
 - Javadoc fix to BaseChronology [3513326]
 
-- Fixed Spanish translation of day - dia now has accented i
+- Fixed Spanish translation of day for periods - dia now has accented i
   https://github.com/JodaOrg/joda-time/pull/5
 
 
diff --git a/src/main/java/org/joda/time/format/messages_da.properties b/src/main/java/org/joda/time/format/messages_da.properties
new file mode 100644
index 000000000..733d8f125
--- /dev/null
+++ b/src/main/java/org/joda/time/format/messages_da.properties
@@ -0,0 +1,22 @@
+PeriodFormat.space=\ 
+PeriodFormat.comma=,
+PeriodFormat.commandand=,og
+PeriodFormat.commaspaceand=, og
+PeriodFormat.commaspace=,\ 
+PeriodFormat.spaceandspace=\ og\ 
+PeriodFormat.year=\ �r
+PeriodFormat.years=\ �r
+PeriodFormat.month=\ m�ned
+PeriodFormat.months=\ m�neder
+PeriodFormat.week=\ uge
+PeriodFormat.weeks=\ uger
+PeriodFormat.day=\ dag
+PeriodFormat.days=\ dage
+PeriodFormat.hour=\ time
+PeriodFormat.hours=\ timer
+PeriodFormat.minute=\ minut
+PeriodFormat.minutes=\ minutter
+PeriodFormat.second=\ sekund
+PeriodFormat.seconds=\ sekunder
+PeriodFormat.millisecond=\ millisekund
+PeriodFormat.milliseconds=\ millisekunder
diff --git a/src/test/java/org/joda/time/format/TestPeriodFormat.java b/src/test/java/org/joda/time/format/TestPeriodFormat.java
index ccf963d3e..e92097113 100644
--- a/src/test/java/org/joda/time/format/TestPeriodFormat.java
+++ b/src/test/java/org/joda/time/format/TestPeriodFormat.java
@@ -28,13 +28,14 @@
  * @author Stephen Colebourne
  */
 public class TestPeriodFormat extends TestCase {
-    
+
     private static final Locale EN = new Locale("en");
     private static final Locale FR = new Locale("fr");
     private static final Locale PT = new Locale("pt");
     private static final Locale ES = new Locale("es");
     private static final Locale DE = new Locale("de");
     private static final Locale NL = new Locale("nl");
+    private static final Locale DA = new Locale("da");
 
     private Locale originalLocale = null;
 
@@ -298,6 +299,19 @@ public void test_wordBased_nl_cached() {
         assertSame(PeriodFormat.wordBased(NL), PeriodFormat.wordBased(NL));
     }
 
+    //-----------------------------------------------------------------------
+    // wordBased(Locale da)
+    //-----------------------------------------------------------------------
+    public void test_wordBased_da_formatMultiple() {
+        Period p = new Period(2, 3, 4, 2, 5, 6 ,7, 8);
+        assertEquals("2 \u00E5r, 3 m\u00E5neder, 4 uger, 2 dage, 5 timer, 6 minutter, 7 sekunder og 8 millisekunder", PeriodFormat.wordBased(DA).print(p));
+    }
+
+    public void test_wordBased_da_formatSinglular() {
+        Period p = new Period(1, 1, 1, 1, 1, 1, 1, 1);
+        assertEquals("1 \u00E5r, 1 m\u00E5ned, 1 uge, 1 dag, 1 time, 1 minut, 1 sekund og 1 millisekund", PeriodFormat.wordBased(DA).print(p));
+    }
+
     //-----------------------------------------------------------------------
     // Cross check languages
     //-----------------------------------------------------------------------

From cd24d5cb2a981ed5af3a3060399a13e010c33a6f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 11 Oct 2012 12:22:28 +0100
Subject: [PATCH 22/52] Fix to handle cross-time-zone issues properly rather
 than always using UTC

MutableDateTime.setDate(ReadableInstant)
---
 RELEASE-NOTES.txt                             |  3 ++
 .../java/org/joda/time/MutableDateTime.java   | 14 +++++--
 .../joda/time/TestMutableDateTime_Sets.java   | 39 +++++++++++++++++++
 3 files changed, 52 insertions(+), 4 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 36d395d8c..804e993fe 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -61,6 +61,9 @@ Bug fixes since 2.1
   This used to fail before 1970 when the input had a milli-of-second field
   Fixed to not throw an exception
 
+- MutableDateTime.setDate(ReadableInstant)
+  Fixed to handle cross-time-zone issues properly rather than always using UTC
+
 - DateTimeFormatter.parseInto() [3522138]
   The v2.0 changes to handle parsing of month/day on their own (for Feb 29th) cause
   parseInto() to lose the year. This fix reverts behaviour to v1.x so that parseInto()
diff --git a/src/main/java/org/joda/time/MutableDateTime.java b/src/main/java/org/joda/time/MutableDateTime.java
index 811f3d02d..237b25604 100644
--- a/src/main/java/org/joda/time/MutableDateTime.java
+++ b/src/main/java/org/joda/time/MutableDateTime.java
@@ -896,16 +896,22 @@ public void setDate(final long instant) {
     /**
      * Set the date from another instant.
      * The time part of this object will be unaffected.
+     * <p>
+     * If the input is a {@code ReadableDateTime} then it is converted to the
+     * same time-zone as this object before using the instant millis.
      *
      * @param instant  an instant to copy the date from, time part ignored
      * @throws IllegalArgumentException if the object is invalid
      */
     public void setDate(final ReadableInstant instant) {
         long instantMillis = DateTimeUtils.getInstantMillis(instant);
-        Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);
-        DateTimeZone zone = instantChrono.getZone();
-        if (zone != null) {
-            instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, instantMillis);
+        if (instant instanceof ReadableDateTime) {
+            ReadableDateTime rdt = (ReadableDateTime) instant;
+            Chronology instantChrono = DateTimeUtils.getChronology(rdt.getChronology());
+            DateTimeZone zone = instantChrono.getZone();
+            if (zone != null) {
+                instantMillis = zone.getMillisKeepLocal(getZone(), instantMillis);
+            }
         }
         setDate(instantMillis);
     }
diff --git a/src/test/java/org/joda/time/TestMutableDateTime_Sets.java b/src/test/java/org/joda/time/TestMutableDateTime_Sets.java
index 7ce9c8200..00e6abfb2 100644
--- a/src/test/java/org/joda/time/TestMutableDateTime_Sets.java
+++ b/src/test/java/org/joda/time/TestMutableDateTime_Sets.java
@@ -275,6 +275,45 @@ public void testSetDate_RI2() {
         assertEquals(501, test.getMillisOfSecond());
     }
 
+    public void testSetDate_RI_same() {
+        MutableDateTime setter = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles"));
+        MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles"));
+        test.setDate(setter);
+        assertEquals(2010, test.getYear());
+        assertEquals(12, test.getMonthOfYear());
+        assertEquals(3, test.getDayOfMonth());
+        assertEquals(2, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(48, test.getSecondOfMinute());
+        assertEquals(501, test.getMillisOfSecond());
+    }
+
+    public void testSetDate_RI_different1() {
+        MutableDateTime setter = new MutableDateTime(2010, 12, 1, 0, 0, 0, 0, DateTimeZone.forID("America/Los_Angeles"));
+        MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("Europe/Moscow"));
+        test.setDate(setter);
+        assertEquals(2010, test.getYear());
+        assertEquals(12, test.getMonthOfYear());
+        assertEquals(1, test.getDayOfMonth());
+        assertEquals(2, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(48, test.getSecondOfMinute());
+        assertEquals(501, test.getMillisOfSecond());
+    }
+
+    public void testSetDate_RI_different2() {
+        MutableDateTime setter = new MutableDateTime(2010, 12, 1, 0, 0, 0, 0, DateTimeZone.forID("Europe/Moscow"));
+        MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles"));
+        test.setDate(setter);
+        assertEquals(2010, test.getYear());
+        assertEquals(12, test.getMonthOfYear());
+        assertEquals(1, test.getDayOfMonth());
+        assertEquals(2, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(48, test.getSecondOfMinute());
+        assertEquals(501, test.getMillisOfSecond());
+    }
+
     //-----------------------------------------------------------------------
     public void testSetTime_int_int_int_int1() {
         MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);

From bb661e139b047bb2b29bebe03651550d0647371b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 11 Oct 2012 13:01:28 +0100
Subject: [PATCH 23/52] Fix to handle cross-time-zone issues properly rather
 than always using UTC [163]

MutableDateTime.setDate(ReadableInstant)
---
 RELEASE-NOTES.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 804e993fe..5a458c5f8 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -61,7 +61,7 @@ Bug fixes since 2.1
   This used to fail before 1970 when the input had a milli-of-second field
   Fixed to not throw an exception
 
-- MutableDateTime.setDate(ReadableInstant)
+- MutableDateTime.setDate(ReadableInstant)  [163]
   Fixed to handle cross-time-zone issues properly rather than always using UTC
 
 - DateTimeFormatter.parseInto() [3522138]

From e9f90a1ecffe01d9d172b053e94cb300e56cefef Mon Sep 17 00:00:00 2001
From: dancojocar <dan.cojocar@gmail.com>
Date: Thu, 1 Nov 2012 19:43:57 +0200
Subject: [PATCH 24/52] Fix typo

Use "America/Chicago" instead of "America/Chigaco"
---
 src/main/java/org/joda/time/DateTimeUtils.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/joda/time/DateTimeUtils.java b/src/main/java/org/joda/time/DateTimeUtils.java
index 7a848166b..f9ab4982a 100644
--- a/src/main/java/org/joda/time/DateTimeUtils.java
+++ b/src/main/java/org/joda/time/DateTimeUtils.java
@@ -50,8 +50,8 @@
         map.put("GMT", DateTimeZone.UTC);
         put(map, "EST", "America/New_York");
         put(map, "EDT", "America/New_York");
-        put(map, "CST", "America/Chigaco");
-        put(map, "CDT", "America/Chigaco");
+        put(map, "CST", "America/Chicago");
+        put(map, "CDT", "America/Chicago");
         put(map, "MST", "America/Denver");
         put(map, "MDT", "America/Denver");
         put(map, "PST", "America/Los_Angeles");

From f2f9c8146446eff341dc7b66b5237b56d50abec0 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 27 Nov 2012 12:12:58 +0000
Subject: [PATCH 25/52] Maven pom tweaks

from Joakim RIBIER from pull request
---
 pom.xml | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/pom.xml b/pom.xml
index 86fc4a6a7..8e3172819 100644
--- a/pom.xml
+++ b/pom.xml
@@ -164,8 +164,8 @@
             <phase>compile</phase>
             <configuration>
               <target>
-                <property name="tz.src" value="${pom.build.sourceDirectory}/org/joda/time/tz/src" />
-                <property name="tz.dst" value="${pom.build.outputDirectory}/org/joda/time/tz/data" />
+                <property name="tz.src" value="${project.build.sourceDirectory}/org/joda/time/tz/src" />
+                <property name="tz.dst" value="${project.build.outputDirectory}/org/joda/time/tz/data" />
                 <!--uptodate property="tz.build.notneeded" targetfile="${tz.dst}/ZoneInfoMap" >
                   <srcfiles dir="${tz.src}" includes="**/*.*"/>
                 </uptodate-->
@@ -325,6 +325,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-project-info-reports-plugin</artifactId>
+        <version>2.5.1</version>
         <reportSets>
           <reportSet>
             <reports>

From 77a6b3a44da7ae4af62e88b4b27eeefec2d768c2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 27 Nov 2012 12:29:34 +0000
Subject: [PATCH 26/52] Fix fromCalendarFields()/fromDateFields() to handle era
 BC correctly

Fixes #8
---
 RELEASE-NOTES.txt                             |  4 ++
 src/main/java/org/joda/time/LocalDate.java    | 19 +++++--
 .../java/org/joda/time/LocalDateTime.java     | 19 +++++--
 .../time/TestLocalDateTime_Constructors.java  | 48 +++++++++++++++---
 .../joda/time/TestLocalDate_Constructors.java | 50 ++++++++++++++++++-
 5 files changed, 121 insertions(+), 19 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 5a458c5f8..e07942508 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -61,6 +61,10 @@ Bug fixes since 2.1
   This used to fail before 1970 when the input had a milli-of-second field
   Fixed to not throw an exception
 
+- LocalDateTime.fromCalendarFields()/LocalDateTime.fromDateFields()
+  This used to fail before year 1 as the era was ignored
+  Fixed to return the correct year
+
 - MutableDateTime.setDate(ReadableInstant)  [163]
   Fixed to handle cross-time-zone issues properly rather than always using UTC
 
diff --git a/src/main/java/org/joda/time/LocalDate.java b/src/main/java/org/joda/time/LocalDate.java
index 7bb7a08c9..c86b9d736 100644
--- a/src/main/java/org/joda/time/LocalDate.java
+++ b/src/main/java/org/joda/time/LocalDate.java
@@ -21,6 +21,7 @@
 import java.io.Serializable;
 import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.HashSet;
 import java.util.Locale;
 import java.util.Set;
@@ -197,8 +198,8 @@ public static LocalDate parse(String str, DateTimeFormatter formatter) {
      * will only pass in instances of <code>GregorianCalendar</code> however
      * this is not validated.
      *
-     * @param calendar  the Calendar to extract fields from
-     * @return the created LocalDate
+     * @param calendar  the Calendar to extract fields from, not null
+     * @return the created local date, not null
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
@@ -206,8 +207,10 @@ public static LocalDate fromCalendarFields(Calendar calendar) {
         if (calendar == null) {
             throw new IllegalArgumentException("The calendar must not be null");
         }
+        int era = calendar.get(Calendar.ERA);
+        int yearOfEra = calendar.get(Calendar.YEAR);
         return new LocalDate(
-            calendar.get(Calendar.YEAR),
+            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),
             calendar.get(Calendar.MONTH) + 1,
             calendar.get(Calendar.DAY_OF_MONTH)
         );
@@ -228,8 +231,8 @@ public static LocalDate fromCalendarFields(Calendar calendar) {
      * <p>
      * This factory method always creates a LocalDate with ISO chronology.
      *
-     * @param date  the Date to extract fields from
-     * @return the created LocalDate
+     * @param date  the Date to extract fields from, not null
+     * @return the created local date, not null
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
@@ -238,6 +241,12 @@ public static LocalDate fromDateFields(Date date) {
         if (date == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
+        if (date.getTime() < 0) {
+            // handle years in era BC
+            GregorianCalendar cal = new GregorianCalendar();
+            cal.setTime(date);
+            return fromCalendarFields(cal);
+        }
         return new LocalDate(
             date.getYear() + 1900,
             date.getMonth() + 1,
diff --git a/src/main/java/org/joda/time/LocalDateTime.java b/src/main/java/org/joda/time/LocalDateTime.java
index 325192b30..e75deca25 100644
--- a/src/main/java/org/joda/time/LocalDateTime.java
+++ b/src/main/java/org/joda/time/LocalDateTime.java
@@ -21,6 +21,7 @@
 import java.io.Serializable;
 import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.Locale;
 import java.util.TimeZone;
 
@@ -186,8 +187,8 @@ public static LocalDateTime parse(String str, DateTimeFormatter formatter) {
      * will only pass in instances of <code>GregorianCalendar</code> however
      * this is not validated.
      *
-     * @param calendar  the Calendar to extract fields from
-     * @return the created LocalDateTime
+     * @param calendar  the Calendar to extract fields from, not null
+     * @return the created local date-time, not null
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
@@ -195,8 +196,10 @@ public static LocalDateTime fromCalendarFields(Calendar calendar) {
         if (calendar == null) {
             throw new IllegalArgumentException("The calendar must not be null");
         }
+        int era = calendar.get(Calendar.ERA);
+        int yearOfEra = calendar.get(Calendar.YEAR);
         return new LocalDateTime(
-            calendar.get(Calendar.YEAR),
+            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),
             calendar.get(Calendar.MONTH) + 1,
             calendar.get(Calendar.DAY_OF_MONTH),
             calendar.get(Calendar.HOUR_OF_DAY),
@@ -221,8 +224,8 @@ public static LocalDateTime fromCalendarFields(Calendar calendar) {
      * <p>
      * This factory method always creates a LocalDateTime with ISO chronology.
      *
-     * @param date  the Date to extract fields from
-     * @return the created LocalDateTime
+     * @param date  the Date to extract fields from, not null
+     * @return the created local date-time, not null
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
@@ -231,6 +234,12 @@ public static LocalDateTime fromDateFields(Date date) {
         if (date == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
+        if (date.getTime() < 0) {
+            // handle years in era BC
+            GregorianCalendar cal = new GregorianCalendar();
+            cal.setTime(date);
+            return fromCalendarFields(cal);
+        }
         return new LocalDateTime(
             date.getYear() + 1900,
             date.getMonth() + 1,
diff --git a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
index 1dbb381a0..e00ce5dbf 100644
--- a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
+++ b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
@@ -102,11 +102,30 @@ public void testParse_formatter() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_FromCalendarFields() throws Exception {
+    public void testFactory_fromCalendarFields() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5, 6, 7);
         assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
+    }
+
+    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
+    }
+
+    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
+    }
+
+    public void testFactory_fromCalendarFields_null() throws Exception {
         try {
             LocalDateTime.fromCalendarFields((Calendar) null);
             fail();
@@ -114,22 +133,37 @@ public void testFactory_FromCalendarFields() throws Exception {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_FromDateFields_after1970() throws Exception {
+    public void testFactory_fromDateFields_after1970() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5 ,6, 7);
         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
-        try {
-            LocalDateTime.fromDateFields((Date) null);
-            fail();
-        } catch (IllegalArgumentException ex) {}
     }
 
-    public void testFactory_FromDateFields_before1970() throws Exception {
+    public void testFactory_fromDateFields_before1970() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDateTime expected = new LocalDateTime(1969, 2, 3, 4, 5 ,6, 7);
         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_null() throws Exception {
         try {
             LocalDateTime.fromDateFields((Date) null);
             fail();
diff --git a/src/test/java/org/joda/time/TestLocalDate_Constructors.java b/src/test/java/org/joda/time/TestLocalDate_Constructors.java
index acd703c93..ee5fa9d43 100644
--- a/src/test/java/org/joda/time/TestLocalDate_Constructors.java
+++ b/src/test/java/org/joda/time/TestLocalDate_Constructors.java
@@ -94,11 +94,30 @@ public void testParse_formatter() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_FromCalendarFields() throws Exception {
+    public void testFactory_fromCalendarFields() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDate expected = new LocalDate(1970, 2, 3);
         assertEquals(expected, LocalDate.fromCalendarFields(cal));
+    }
+
+    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(0, 2, 3);
+        assertEquals(expected, LocalDate.fromCalendarFields(cal));
+    }
+
+    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(-2, 2, 3);
+        assertEquals(expected, LocalDate.fromCalendarFields(cal));
+    }
+
+    public void testFactory_fromCalendarFields_null() throws Exception {
         try {
             LocalDate.fromCalendarFields((Calendar) null);
             fail();
@@ -106,11 +125,37 @@ public void testFactory_FromCalendarFields() throws Exception {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_FromDateFields() throws Exception {
+    public void testFactory_fromDateFields_after1970() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDate expected = new LocalDate(1970, 2, 3);
         assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_before1970() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(1969, 2, 3);
+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(0, 2, 3);
+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(-2, 2, 3);
+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_null() throws Exception {
         try {
             LocalDate.fromDateFields((Date) null);
             fail();
@@ -383,6 +428,7 @@ public void testConstructor_ObjectLocalDateTime() throws Throwable {
         assertEquals(6, test.getDayOfMonth());
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_ObjectYearMonthDay() throws Throwable {
         YearMonthDay date = new YearMonthDay(1970, 4, 6, BUDDHIST_UTC);
         LocalDate test = new LocalDate(date);

From 8ffa0cd7ff9917423c405ed8ad27e8809545f41d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 27 Nov 2012 13:04:08 +0000
Subject: [PATCH 27/52] Fix calculation of month length when day-of-month
 specified is less than 1

Fixes SF bug 165
---
 RELEASE-NOTES.txt                                         | 3 +++
 src/main/java/org/joda/time/chrono/BasicGJChronology.java | 2 +-
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index e07942508..708011506 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -68,6 +68,9 @@ Bug fixes since 2.1
 - MutableDateTime.setDate(ReadableInstant)  [163]
   Fixed to handle cross-time-zone issues properly rather than always using UTC
 
+- BasicGJChronology.getDaysInMonthMaxForSet  [165]
+  Fixed calculate the correct maximum length if the input day-of-month value is less than 1
+
 - DateTimeFormatter.parseInto() [3522138]
   The v2.0 changes to handle parsing of month/day on their own (for Feb 29th) cause
   parseInto() to lose the year. This fix reverts behaviour to v1.x so that parseInto()
diff --git a/src/main/java/org/joda/time/chrono/BasicGJChronology.java b/src/main/java/org/joda/time/chrono/BasicGJChronology.java
index 3c34c9960..5b651e5d9 100644
--- a/src/main/java/org/joda/time/chrono/BasicGJChronology.java
+++ b/src/main/java/org/joda/time/chrono/BasicGJChronology.java
@@ -131,7 +131,7 @@ int getDaysInMonthMax(int month) {
 
     //-----------------------------------------------------------------------
     int getDaysInMonthMaxForSet(long instant, int value) {
-        return (value > 28 ? getDaysInMonthMax(instant) : 28);
+        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);
     }
 
     //-----------------------------------------------------------------------

From 101995f41c8cd6b0aafa0c840de3da1951e0889d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 27 Nov 2012 13:16:49 +0000
Subject: [PATCH 28/52] Javadoc clarify on formatter builder

from mailing list email
---
 RELEASE-NOTES.txt                             |  2 +
 .../joda/time/format/DateTimeFormatter.java   |  3 +-
 .../time/format/DateTimeFormatterBuilder.java | 37 +++++++++++++++++++
 3 files changed, 41 insertions(+), 1 deletion(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 708011506..a48612901 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -98,6 +98,8 @@ Bug fixes since 2.1
 
 - Javadoc fix to BaseChronology [3513326]
 
+- Javadoc clarify on formatter builder [mailing list email]
+
 - Fixed Spanish translation of day for periods - dia now has accented i
   https://github.com/JodaOrg/joda-time/pull/5
 
diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java
index baa276a5e..9cbd3c2b9 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java
@@ -21,7 +21,6 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTime;
-import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
 import org.joda.time.LocalDate;
@@ -55,6 +54,8 @@
  * <li>{@link #withZone(DateTimeZone)} - returns a new formatter that uses the specified time zone</li>
  * <li>{@link #withChronology(Chronology)} - returns a new formatter that uses the specified chronology</li>
  * <li>{@link #withOffsetParsed()} - returns a new formatter that returns the parsed time zone offset</li>
+ * <li>{@link #withPivotYear()} - returns a new formatter with the specified pivot year</li>
+ * <li>{@link #withDefaultYear()} - returns a new formatter with the specified default year</li>
  * </ul>
  * Each of these returns a new formatter (instances of this class are immutable).
  * <p>
diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 96781dbff..33bc9889d 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -201,6 +201,13 @@ public void clear() {
     //-----------------------------------------------------------------------
     /**
      * Appends another formatter.
+     * <p>
+     * This extracts the underlying printer and parser and appends them
+     * The printer and parser interfaces are the low-level part of the formatting API.
+     * Normally, instances are extracted from another formatter.
+     * Note however that any formatter specific information, such as the locale,
+     * time-zone, chronology, offset parsing or pivot/default year, will not be
+     * extracted by this method.
      *
      * @param formatter  the formatter to add
      * @return this DateTimeFormatterBuilder, for chaining
@@ -216,6 +223,12 @@ public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {
     /**
      * Appends just a printer. With no matching parser, a parser cannot be
      * built from this DateTimeFormatterBuilder.
+     * <p>
+     * The printer interface is part of the low-level part of the formatting API.
+     * Normally, instances are extracted from another formatter.
+     * Note however that any formatter specific information, such as the locale,
+     * time-zone, chronology, offset parsing or pivot/default year, will not be
+     * extracted by this method.
      *
      * @param printer  the printer to add, not null
      * @return this DateTimeFormatterBuilder, for chaining
@@ -229,6 +242,12 @@ public DateTimeFormatterBuilder append(DateTimePrinter printer) {
     /**
      * Appends just a parser. With no matching printer, a printer cannot be
      * built from this builder.
+     * <p>
+     * The parser interface is part of the low-level part of the formatting API.
+     * Normally, instances are extracted from another formatter.
+     * Note however that any formatter specific information, such as the locale,
+     * time-zone, chronology, offset parsing or pivot/default year, will not be
+     * extracted by this method.
      *
      * @param parser  the parser to add, not null
      * @return this DateTimeFormatterBuilder, for chaining
@@ -241,6 +260,12 @@ public DateTimeFormatterBuilder append(DateTimeParser parser) {
 
     /**
      * Appends a printer/parser pair.
+     * <p>
+     * The printer and parser interfaces are the low-level part of the formatting API.
+     * Normally, instances are extracted from another formatter.
+     * Note however that any formatter specific information, such as the locale,
+     * time-zone, chronology, offset parsing or pivot/default year, will not be
+     * extracted by this method.
      *
      * @param printer  the printer to add, not null
      * @param parser  the parser to add, not null
@@ -263,6 +288,12 @@ public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser p
      * last of the parser array elements to be null. If the last element is
      * null, this represents the empty parser. The presence of an empty parser
      * indicates that the entire array of parse formats is optional.
+     * <p>
+     * The printer and parser interfaces are the low-level part of the formatting API.
+     * Normally, instances are extracted from another formatter.
+     * Note however that any formatter specific information, such as the locale,
+     * time-zone, chronology, offset parsing or pivot/default year, will not be
+     * extracted by this method.
      *
      * @param printer  the printer to add
      * @param parsers  the parsers to add
@@ -300,6 +331,12 @@ public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser[]
     /**
      * Appends just a parser element which is optional. With no matching
      * printer, a printer cannot be built from this DateTimeFormatterBuilder.
+     * <p>
+     * The parser interface is part of the low-level part of the formatting API.
+     * Normally, instances are extracted from another formatter.
+     * Note however that any formatter specific information, such as the locale,
+     * time-zone, chronology, offset parsing or pivot/default year, will not be
+     * extracted by this method.
      *
      * @return this DateTimeFormatterBuilder, for chaining
      * @throws IllegalArgumentException if parser is null or of an invalid type

From 6d56b7e65306d748a038fb30bff30cee5e18597d Mon Sep 17 00:00:00 2001
From: Hajime Senuma <hajime.senuma@gmail.com>
Date: Fri, 4 Jan 2013 07:50:23 +0900
Subject: [PATCH 29/52] Add Japanese translation of word-based periods

This commit adds Japanese translation of word-based periods and
support for parsing the strings of languages lacking word spacing.
The following files are added or modified.

- messages_ja.properties

- PeriodFormat#wordBased:
  Add available languages in the Javadoc description.

- PeriodFormatter#Separator#parseInto:
  The previous impl. fails when any separator is an empty string.
  This commit fixes the problem.

- TestPeriodFormat:
  Add unit tests for Japanese.
  Also add tests whether parsing correctly throws an exception
    when a string has rendundant separators
    AND seperators for the language are not empty.

- pom.xml: Add Kasper Laudrup (author of Danish translation)
  and Hajime Senuma (author of this commit).
---
 pom.xml                                       |  6 ++
 .../org/joda/time/format/PeriodFormat.java    |  2 +-
 .../time/format/PeriodFormatterBuilder.java   |  6 +-
 .../joda/time/format/messages_ja.properties   | 22 +++++++
 .../joda/time/format/TestPeriodFormat.java    | 59 +++++++++++++++++++
 5 files changed, 92 insertions(+), 3 deletions(-)
 create mode 100755 src/main/java/org/joda/time/format/messages_ja.properties

diff --git a/pom.xml b/pom.xml
index 8e3172819..b4ce19752 100644
--- a/pom.xml
+++ b/pom.xml
@@ -65,6 +65,9 @@
     <contributor>
       <name>Ashish Katyal</name>
     </contributor>
+    <contributor>
+      <name>Kasper Laudrup</name>
+    </contributor>
     <contributor>
       <name>Antonio Leitao</name>
     </contributor>
@@ -86,6 +89,9 @@
     <contributor>
       <name>Mike Schrag</name>
     </contributor>
+    <contributor>
+      <name>Hajime Senuma</name>
+    </contributor>
     <contributor>
       <name>Kandarp Shah</name>
     </contributor>
diff --git a/src/main/java/org/joda/time/format/PeriodFormat.java b/src/main/java/org/joda/time/format/PeriodFormat.java
index 59f6caf09..cee66f634 100644
--- a/src/main/java/org/joda/time/format/PeriodFormat.java
+++ b/src/main/java/org/joda/time/format/PeriodFormat.java
@@ -86,7 +86,7 @@ public static PeriodFormatter wordBased() {
      * {@code org.joda.time.format.messages}.
      * This can be added to via the normal classpath resource bundle mechanisms.
      * <p>
-     * Available languages are English, German, Dutch, French, Spanish and Portuguese.
+     * Available languages are Danish, Dutch, English, French, German, Japanese, Portuguese, and Spanish.
      * 
      * @return the formatter, not null
      * @since 2.0
diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
index 29b0872cb..c3dd8cc36 100644
--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -1713,6 +1713,7 @@ public int parseInto(
             }
 
             boolean found = false;
+            int parsedFormLength = -1;
             if (position > oldPos) {
                 // Consume this separator.
                 String[] parsedForms = iParsedForms;
@@ -1723,7 +1724,8 @@ public int parseInto(
                         periodStr.regionMatches
                         (true, position, parsedForm, 0, parsedForm.length())) {
                         
-                        position += (parsedForm == null ? 0 : parsedForm.length());
+                        parsedFormLength = (parsedForm == null ? 0 : parsedForm.length());
+                        position += parsedFormLength;
                         found = true;
                         break;
                     }
@@ -1737,7 +1739,7 @@ public int parseInto(
                 return position;
             }
 
-            if (found && position == oldPos) {
+            if (found && position == oldPos && parsedFormLength > 0) {
                 // Separator should not have been supplied.
                 return ~oldPos;
             }
diff --git a/src/main/java/org/joda/time/format/messages_ja.properties b/src/main/java/org/joda/time/format/messages_ja.properties
new file mode 100755
index 000000000..1def961df
--- /dev/null
+++ b/src/main/java/org/joda/time/format/messages_ja.properties
@@ -0,0 +1,22 @@
+PeriodFormat.space=
+PeriodFormat.comma=
+PeriodFormat.commandand=
+PeriodFormat.commaspaceand=
+PeriodFormat.commaspace=
+PeriodFormat.spaceandspace=
+PeriodFormat.year=\u5E74
+PeriodFormat.years=\u5E74
+PeriodFormat.month=\u304B\u6708
+PeriodFormat.months=\u304B\u6708
+PeriodFormat.week=\u9031\u9593
+PeriodFormat.weeks=\u9031\u9593
+PeriodFormat.day=\u65E5
+PeriodFormat.days=\u65E5
+PeriodFormat.hour=\u6642\u9593
+PeriodFormat.hours=\u6642\u9593
+PeriodFormat.minute=\u5206
+PeriodFormat.minutes=\u5206
+PeriodFormat.second=\u79D2
+PeriodFormat.seconds=\u79D2
+PeriodFormat.millisecond=\u30DF\u30EA\u79D2
+PeriodFormat.milliseconds=\u30DF\u30EA\u79D2
diff --git a/src/test/java/org/joda/time/format/TestPeriodFormat.java b/src/test/java/org/joda/time/format/TestPeriodFormat.java
index e92097113..e358e79c0 100644
--- a/src/test/java/org/joda/time/format/TestPeriodFormat.java
+++ b/src/test/java/org/joda/time/format/TestPeriodFormat.java
@@ -36,6 +36,7 @@
     private static final Locale DE = new Locale("de");
     private static final Locale NL = new Locale("nl");
     private static final Locale DA = new Locale("da");
+    private static final Locale JA = new Locale("ja");
 
     private Locale originalLocale = null;
 
@@ -101,6 +102,16 @@ public void test_getDefault_parseTwoFields() {
         assertEquals(p, PeriodFormat.getDefault().parsePeriod("2 days and 5 hours"));
     }
 
+    //-----------------------------------------------------------------------
+    public void test_getDefault_checkRedundantSeparator() {
+        try {
+            PeriodFormat.getDefault().parsePeriod("2 days and 5 hours ");
+            fail("No exception was caught");
+        } catch (Exception e) {
+            assertEquals(IllegalArgumentException.class, e.getClass());
+        }
+    }    
+    
     //-----------------------------------------------------------------------
     public void test_getDefault_cached() {
         assertSame(PeriodFormat.getDefault(), PeriodFormat.getDefault());
@@ -307,11 +318,59 @@ public void test_wordBased_da_formatMultiple() {
         assertEquals("2 \u00E5r, 3 m\u00E5neder, 4 uger, 2 dage, 5 timer, 6 minutter, 7 sekunder og 8 millisekunder", PeriodFormat.wordBased(DA).print(p));
     }
 
+    //-----------------------------------------------------------------------
     public void test_wordBased_da_formatSinglular() {
         Period p = new Period(1, 1, 1, 1, 1, 1, 1, 1);
         assertEquals("1 \u00E5r, 1 m\u00E5ned, 1 uge, 1 dag, 1 time, 1 minut, 1 sekund og 1 millisekund", PeriodFormat.wordBased(DA).print(p));
     }
+    
+    //-----------------------------------------------------------------------
+    public void test_wordBased_da_cached() {
+        assertSame(PeriodFormat.wordBased(DA), PeriodFormat.wordBased(DA));
+    }
+    
+    //-----------------------------------------------------------------------
+    // wordBased(Locale ja)
+    //-----------------------------------------------------------------------
+    public void test_wordBased_ja_formatMultiple() {
+        Period p = new Period(2, 3, 4, 2, 5, 6 ,7, 8);
+        assertEquals("2\u5E743\u304B\u67084\u9031\u95932\u65E55\u6642\u95936\u52067\u79D28\u30DF\u30EA\u79D2", PeriodFormat.wordBased(JA).print(p));
+    }
 
+    //-----------------------------------------------------------------------
+    public void test_wordBased_ja_formatSingular() {
+        Period p = new Period(1, 1, 1, 1, 1, 1, 1, 1);
+        assertEquals("1\u5E741\u304B\u67081\u9031\u95931\u65E51\u6642\u95931\u52061\u79D21\u30DF\u30EA\u79D2", PeriodFormat.wordBased(JA).print(p));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_wordBased_ja_cached() {
+        assertSame(PeriodFormat.wordBased(JA), PeriodFormat.wordBased(JA));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_wordBased_ja_parseOneField() {
+        Period p = Period.days(2);
+        assertEquals(p, PeriodFormat.wordBased(JA).parsePeriod("2\u65E5"));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_wordBased_ja_parseTwoFields() {
+        Period p = Period.days(2).withHours(5);
+        assertEquals(p, PeriodFormat.wordBased(JA).parsePeriod("2\u65E55\u6642\u9593"));
+    }
+    
+    //-----------------------------------------------------------------------
+    public void test_wordBased_ja_checkRedundantSeparator() {
+        try {
+            // Spaces are not valid separators in Japanese
+            PeriodFormat.wordBased(JA).parsePeriod("2\u65E5 ");
+            fail("No exception was caught");
+        } catch (Exception e) {
+            assertEquals(IllegalArgumentException.class, e.getClass());
+        }
+    }   
+    
     //-----------------------------------------------------------------------
     // Cross check languages
     //-----------------------------------------------------------------------

From 263d4427abd09e4aa28a7c760a446b8eb3a9041a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 4 Jan 2013 17:37:01 +0000
Subject: [PATCH 30/52] Accept pull request

Fixes #9
---
 RELEASE-NOTES.txt                                | 16 ++++++++++------
 .../java/org/joda/time/format/PeriodFormat.java  |  2 +-
 2 files changed, 11 insertions(+), 7 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index a48612901..674670a4e 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -26,7 +26,15 @@ Enhancements since 2.1
 - Add method to calculate the Julian Day
   See DateTimeUtils
 
-- Add Danish translation of word-based periods
+- Add Danish translation of word-based periods (Kasper Laudrup)
+
+- Add Japanese translation of word-based periods (Hajime Senuma)
+  https://github.com/JodaOrg/joda-time/pull/9
+
+- Parsing of US short time-zone names
+  The time-zone names EST/EDT/CST/CDT/MST/MDT/PST/PDT/UT/UTC/GMT can now be parsed in a limited way.
+  This is enabled for formatter patterns of "z" (and "zz" or "zzz").
+  The builder continues to offer a better way of manually managing this.
 
 
 Compatibility with 2.1
@@ -64,6 +72,7 @@ Bug fixes since 2.1
 - LocalDateTime.fromCalendarFields()/LocalDateTime.fromDateFields()
   This used to fail before year 1 as the era was ignored
   Fixed to return the correct year
+  https://github.com/JodaOrg/joda-time/pull/8
 
 - MutableDateTime.setDate(ReadableInstant)  [163]
   Fixed to handle cross-time-zone issues properly rather than always using UTC
@@ -85,11 +94,6 @@ Bug fixes since 2.1
 - Period formatter [3564249]
   Formatting did not correctly output values for negative milliseconds between zero and -1 second
 
-- Parsing of US short time-zone names
-  The time-zone names EST/EDT/CST/CDT/MST/MDT/PST/PDT/UT/UTC/GMT can now be parsed in a limited way.
-  This is enabled for formatter patterns of "z" (and "zz" or "zzz").
-  The builder continues to offer a better way of manually managing this.
-
 - FieldUtils.safeMultiply(long,int) [3520651]
   Fix implementation to throw exception for (Long.MIN_VALUE, -1)
 
diff --git a/src/main/java/org/joda/time/format/PeriodFormat.java b/src/main/java/org/joda/time/format/PeriodFormat.java
index cee66f634..0cb59f74a 100644
--- a/src/main/java/org/joda/time/format/PeriodFormat.java
+++ b/src/main/java/org/joda/time/format/PeriodFormat.java
@@ -86,7 +86,7 @@ public static PeriodFormatter wordBased() {
      * {@code org.joda.time.format.messages}.
      * This can be added to via the normal classpath resource bundle mechanisms.
      * <p>
-     * Available languages are Danish, Dutch, English, French, German, Japanese, Portuguese, and Spanish.
+     * Available languages are English, Danish, Dutch, French, German, Japanese, Portuguese, and Spanish.
      * 
      * @return the formatter, not null
      * @since 2.0

From 2e564955a4b46087f027ad160cef92808e8c587c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 7 Jan 2013 11:01:36 +0000
Subject: [PATCH 31/52] Update to time-zone data 2012j

---
 RELEASE-NOTES.txt                             |   2 +-
 src/main/java/org/joda/time/tz/src/Readme.txt |   2 +-
 src/main/java/org/joda/time/tz/src/africa     |  78 ++++++--
 src/main/java/org/joda/time/tz/src/antarctica |   1 -
 src/main/java/org/joda/time/tz/src/asia       | 183 ++++++++++--------
 .../java/org/joda/time/tz/src/australasia     |  94 +++++----
 src/main/java/org/joda/time/tz/src/backward   |   1 -
 src/main/java/org/joda/time/tz/src/etcetera   |   1 -
 src/main/java/org/joda/time/tz/src/europe     |  17 +-
 .../java/org/joda/time/tz/src/northamerica    |  36 ++--
 src/main/java/org/joda/time/tz/src/pacificnew |   1 -
 .../java/org/joda/time/tz/src/southamerica    |  36 ++--
 src/main/java/org/joda/time/tz/src/systemv    |   1 -
 13 files changed, 267 insertions(+), 186 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 674670a4e..c7694cf83 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -46,7 +46,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
- - DateTimeZone data updated to version 2012c
+ - DateTimeZone data updated to version 2012j
 
 Semantic compatible - Yes, except
  - DateTimeFormatter.parseInto() retains the year if only month parsed (as it did in v1.x)
diff --git a/src/main/java/org/joda/time/tz/src/Readme.txt b/src/main/java/org/joda/time/tz/src/Readme.txt
index 1495eb3e5..2dc66f42e 100644
--- a/src/main/java/org/joda/time/tz/src/Readme.txt
+++ b/src/main/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2012c.
+http://www.twinsun.com/tz/tz-link.htm, version 2012j.
diff --git a/src/main/java/org/joda/time/tz/src/africa b/src/main/java/org/joda/time/tz/src/africa
index 98e0e73da..54c7a1e6a 100644
--- a/src/main/java/org/joda/time/tz/src/africa
+++ b/src/main/java/org/joda/time/tz/src/africa
@@ -1,11 +1,10 @@
 # <pre>
-# @(#)africa	8.35
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
+# tz@iana.org for general use in the future).
 
 # From Paul Eggert (2006-03-22):
 #
@@ -238,7 +237,7 @@ Rule	Egypt	2006	only	-	Sep	21	23:00s	0	-
 # I received a mail from an airline which says that the daylight
 # saving time in Egypt will end in the night of 2007-09-06 to 2007-09-07.
 # From Jesper Norgaard Welen (2007-08-15): [The following agree:]
-# http://www.nentjes.info/Bill/bill5.htm 
+# http://www.nentjes.info/Bill/bill5.htm
 # http://www.timeanddate.com/worldclock/city.html?n=53
 # From Steffen Thorsen (2007-09-04): The official information...:
 # http://www.sis.gov.eg/En/EgyptOnline/Miscellaneous/000002/0207000000000000001580.htm
@@ -292,18 +291,18 @@ Rule	Egypt	2007	only	-	Sep	Thu>=1	23:00s	0	-
 # in September.
 
 # From Steffen Thorsen (2009-08-11):
-# We have been able to confirm the August change with the Egyptian Cabinet 
+# We have been able to confirm the August change with the Egyptian Cabinet
 # Information and Decision Support Center:
 # <a href="http://www.timeanddate.com/news/time/egypt-dst-ends-2009.html">
 # http://www.timeanddate.com/news/time/egypt-dst-ends-2009.html
 # </a>
-# 
+#
 # The Middle East News Agency
 # <a href="http://www.mena.org.eg/index.aspx">
 # http://www.mena.org.eg/index.aspx
 # </a>
 # also reports "Egypt starts winter time on August 21"
-# today in article numbered "71, 11/08/2009 12:25 GMT." 
+# today in article numbered "71, 11/08/2009 12:25 GMT."
 # Only the title above is available without a subscription to their service,
 # and can be found by searching for "winter" in their search engine
 # (at least today).
@@ -425,6 +424,20 @@ Zone	Africa/Monrovia	-0:43:08 -	LMT	1882
 
 # Libya
 
+# From Even Scharning (2012-11-10):
+# Libya set their time one hour back at 02:00 on Saturday November 10.
+# http://www.libyaherald.com/2012/11/04/clocks-to-go-back-an-hour-on-saturday/
+# Here is an official source [in Arabic]: http://ls.ly/fb6Yc
+#
+# Steffen Thorsen forwarded a translation (2012-11-10) in
+# http://mm.icann.org/pipermail/tz/2012-November/018451.html
+#
+# From Tim Parenti (2012-11-11):
+# Treat the 2012-11-10 change as a zone change from UTC+2 to UTC+1.
+# The DST rules planned for 2013 and onward roughly mirror those of Europe
+# (either two days before them or five days after them, so as to fall on
+# lastFri instead of lastSun).
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Libya	1951	only	-	Oct	14	2:00	1:00	S
 Rule	Libya	1952	only	-	Jan	 1	0:00	0	-
@@ -439,17 +452,21 @@ Rule	Libya	1986	only	-	Apr	 4	0:00	1:00	S
 Rule	Libya	1986	only	-	Oct	 3	0:00	0	-
 Rule	Libya	1987	1989	-	Apr	 1	0:00	1:00	S
 Rule	Libya	1987	1989	-	Oct	 1	0:00	0	-
+Rule	Libya	1997	only	-	Apr	 4	0:00	1:00	S
+Rule	Libya	1997	only	-	Oct	 4	0:00	0	-
+Rule	Libya	2013	max	-	Mar	lastFri	1:00	1:00	S
+Rule	Libya	2013	max	-	Oct	lastFri	2:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Tripoli	0:52:44 -	LMT	1920
 			1:00	Libya	CE%sT	1959
 			2:00	-	EET	1982
 			1:00	Libya	CE%sT	1990 May  4
-# The following entries are from Shanks & Pottenger;
+# The 1996 and 1997 entries are from Shanks & Pottenger;
 # the IATA SSIM data contain some obvious errors.
 			2:00	-	EET	1996 Sep 30
-			1:00	-	CET	1997 Apr  4
-			1:00	1:00	CEST	1997 Oct  4
-			2:00	-	EET
+			1:00	Libya	CE%sT	1997 Oct  4
+			2:00	-	EET	2012 Nov 10 2:00
+			1:00	Libya	CE%sT
 
 # Madagascar
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -482,7 +499,7 @@ Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
 # From Steffen Thorsen (2008-06-25):
 # Mauritius plans to observe DST from 2008-11-01 to 2009-03-31 on a trial
 # basis....
-# It seems that Mauritius observed daylight saving time from 1982-10-10 to 
+# It seems that Mauritius observed daylight saving time from 1982-10-10 to
 # 1983-03-20 as well, but that was not successful....
 # http://www.timeanddate.com/news/time/mauritius-daylight-saving-time.html
 
@@ -506,12 +523,12 @@ Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
 # than previously announced (2008-11-01 to 2009-03-31).  The new start
 # date is 2008-10-26 at 02:00 and the new end date is 2009-03-27 (no time
 # given, but it is probably at either 2 or 3 wall clock time).
-# 
-# A little strange though, since the article says that they moved the date 
-# to align itself with Europe and USA which also change time on that date, 
-# but that means they have not paid attention to what happened in 
-# USA/Canada last year (DST ends first Sunday in November). I also wonder 
-# why that they end on a Friday, instead of aligning with Europe which 
+#
+# A little strange though, since the article says that they moved the date
+# to align itself with Europe and USA which also change time on that date,
+# but that means they have not paid attention to what happened in
+# USA/Canada last year (DST ends first Sunday in November). I also wonder
+# why that they end on a Friday, instead of aligning with Europe which
 # changes two days later.
 
 # From Alex Krivenyshev (2008-07-11):
@@ -570,7 +587,7 @@ Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
 # </a>
 
 # From Arthur David Olson (2009-07-11):
-# The "mauritius-dst-will-not-repeat" wrapup includes this: 
+# The "mauritius-dst-will-not-repeat" wrapup includes this:
 # "The trial ended on March 29, 2009, when the clocks moved back by one hour
 # at 2am (or 02:00) local time..."
 
@@ -664,8 +681,8 @@ Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
 # XXX--guess that it is only Morocco for now; guess only 2008 for now.
 
 # From Steffen Thorsen (2008-08-27):
-# Morocco will change the clocks back on the midnight between August 31 
-# and September 1. They originally planned to observe DST to near the end 
+# Morocco will change the clocks back on the midnight between August 31
+# and September 1. They originally planned to observe DST to near the end
 # of September:
 #
 # One article about it (in French):
@@ -799,6 +816,23 @@ Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
 # "...&agrave; partir du dernier dimance d'avril et non fins mars,
 # comme annonc&eacute; pr&eacute;c&eacute;demment."
 
+# From Milamber Space Network (2012-07-17):
+# The official return to GMT is announced by the Moroccan government:
+# <a href="http://www.mmsp.gov.ma/fr/actualites.aspx?id=288">
+# http://www.mmsp.gov.ma/fr/actualites.aspx?id=288 [in French]
+# </a>
+#
+# Google translation, lightly edited:
+# Back to the standard time of the Kingdom (GMT)
+# Pursuant to Decree No. 2-12-126 issued on 26 Jumada (I) 1433 (April 18,
+# 2012) and in accordance with the order of Mr. President of the
+# Government No. 3-47-12 issued on 24 Sha'ban (11 July 2012), the Ministry
+# of Public Service and Administration Modernization announces the return
+# of the legal time of the Kingdom (GMT) from Friday, July 20, 2012 until
+# Monday, August 20, 2012.  So the time will be delayed by 60 minutes from
+# 3:00 am Friday, July 20, 2012 and will again be advanced by 60 minutes
+# August 20, 2012 from 2:00 am.
+
 # RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 
 Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
@@ -826,6 +860,8 @@ Rule	Morocco	2011	only	-	Apr	 3	 0:00	1:00	S
 Rule	Morocco	2011	only	-	Jul	 31	 0	0	-
 Rule	Morocco	2012	max	-	Apr	 lastSun 2:00	1:00	S
 Rule	Morocco	2012	max	-	Sep	 lastSun 3:00	0	-
+Rule	Morocco	2012	only	-	Jul	 20	 3:00	0	-
+Rule	Morocco	2012	only	-	Aug	 20	 2:00	1:00	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
@@ -854,7 +890,7 @@ Zone	Africa/Maputo	2:10:20 -	LMT	1903 Mar
 # Forecasting Riaan van Zyl explained that the far eastern parts of
 # the country are close to 40 minutes earlier in sunrise than the rest
 # of the country.
-# 
+#
 # From Paul Eggert (2007-03-31):
 # Apparently the Caprivi Strip informally observes Botswana time, but
 # we have no details.  In the meantime people there can use Africa/Gaborone.
diff --git a/src/main/java/org/joda/time/tz/src/antarctica b/src/main/java/org/joda/time/tz/src/antarctica
index 2fca366d6..f55cbde05 100644
--- a/src/main/java/org/joda/time/tz/src/antarctica
+++ b/src/main/java/org/joda/time/tz/src/antarctica
@@ -1,5 +1,4 @@
 # <pre>
-# @(#)antarctica	8.10
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
diff --git a/src/main/java/org/joda/time/tz/src/asia b/src/main/java/org/joda/time/tz/src/asia
index 3be182e91..d5562c846 100644
--- a/src/main/java/org/joda/time/tz/src/asia
+++ b/src/main/java/org/joda/time/tz/src/asia
@@ -1,11 +1,10 @@
 # <pre>
-# @(#)asia	8.73
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
+# tz@iana.org for general use in the future).
 
 # From Paul Eggert (2006-03-22):
 #
@@ -102,7 +101,7 @@ Zone	Asia/Kabul	4:36:48 -	LMT	1890
 # From Alexander Krivenyshev (2012-02-10):
 # According to News Armenia, on Feb 9, 2012,
 # http://newsarmenia.ru/society/20120209/42609695.html
-# 
+#
 # The Armenia National Assembly adopted final reading of Amendments to the
 # Law "On procedure of calculation time on the territory of the Republic of
 # Armenia" according to which Armenia [is] abolishing Daylight Saving Time.
@@ -182,15 +181,15 @@ Zone	Asia/Bahrain	3:22:20 -	LMT	1920		# Al Manamah
 # </a>
 
 # From A. N. M. Kamrus Saadat (2009-06-15):
-# Finally we've got the official mail regarding DST start time where DST start 
-# time is mentioned as Jun 19 2009, 23:00 from BTRC (Bangladesh 
-# Telecommunication Regulatory Commission). 
+# Finally we've got the official mail regarding DST start time where DST start
+# time is mentioned as Jun 19 2009, 23:00 from BTRC (Bangladesh
+# Telecommunication Regulatory Commission).
 #
 # No DST end date has been announced yet.
 
 # From Alexander Krivenyshev (2009-09-25):
-# Bangladesh won't go back to Standard Time from October 1, 2009, 
-# instead it will continue DST measure till the cabinet makes a fresh decision. 
+# Bangladesh won't go back to Standard Time from October 1, 2009,
+# instead it will continue DST measure till the cabinet makes a fresh decision.
 #
 # Following report by same newspaper-"The Daily Star Friday":
 # "DST change awaits cabinet decision-Clock won't go back by 1-hr from Oct 1"
@@ -204,8 +203,8 @@ Zone	Asia/Bahrain	3:22:20 -	LMT	1920		# Al Manamah
 
 # From Steffen Thorsen (2009-10-13):
 # IANS (Indo-Asian News Service) now reports:
-# Bangladesh has decided that the clock advanced by an hour to make 
-# maximum use of daylight hours as an energy saving measure would 
+# Bangladesh has decided that the clock advanced by an hour to make
+# maximum use of daylight hours as an energy saving measure would
 # "continue for an indefinite period."
 #
 # One of many places where it is published:
@@ -233,7 +232,7 @@ Zone	Asia/Bahrain	3:22:20 -	LMT	1920		# Al Manamah
 
 # From Alexander Krivenyshev (2010-03-22):
 # According to Bangladesh newspaper "The Daily Star,"
-# Cabinet cancels Daylight Saving Time 
+# Cabinet cancels Daylight Saving Time
 # <a href="http://www.thedailystar.net/newDesign/latest_news.php?nid=22817">
 # http://www.thedailystar.net/newDesign/latest_news.php?nid=22817
 # </a>
@@ -361,11 +360,11 @@ Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
 # observing daylight saving time in 1986.
 #
 # From Thomas S. Mullaney (2008-02-11):
-# I think you're combining two subjects that need to treated 
-# separately: daylight savings (which, you're correct, wasn't 
-# implemented until the 1980s) and the unified time zone centered near 
-# Beijing (which was implemented in 1949). Briefly, there was also a 
-# "Lhasa Time" in Tibet and "Urumqi Time" in Xinjiang. The first was 
+# I think you're combining two subjects that need to treated
+# separately: daylight savings (which, you're correct, wasn't
+# implemented until the 1980s) and the unified time zone centered near
+# Beijing (which was implemented in 1949). Briefly, there was also a
+# "Lhasa Time" in Tibet and "Urumqi Time" in Xinjiang. The first was
 # ceased, and the second eventually recognized (again, in the 1980s).
 #
 # From Paul Eggert (2008-06-30):
@@ -502,7 +501,7 @@ Zone	Asia/Kashgar	5:03:56	-	LMT	1928 # or Kashi or Kaxgar
 # as of 2009-10-28:
 # Year        Period
 # 1941        1 Apr to 30 Sep
-# 1942        Whole year 
+# 1942        Whole year
 # 1943        Whole year
 # 1944        Whole year
 # 1945        Whole year
@@ -593,16 +592,16 @@ Zone	Asia/Hong_Kong	7:36:36 -	LMT	1904 Oct 30
 # From Arthur David Olson (2010-04-07):
 # Here's Google's translation of the table at the bottom of the "summert.htm" page:
 # Decade 	                                                    Name                      Start and end date
-# Republic of China 34 years to 40 years (AD 1945-1951 years) Summer Time               May 1 to September 30 
-# 41 years of the Republic of China (AD 1952)                 Daylight Saving Time      March 1 to October 31 
-# Republic of China 42 years to 43 years (AD 1953-1954 years) Daylight Saving Time      April 1 to October 31 
-# In the 44 years to 45 years (AD 1955-1956 years)            Daylight Saving Time      April 1 to September 30 
-# Republic of China 46 years to 48 years (AD 1957-1959)       Summer Time               April 1 to September 30 
-# Republic of China 49 years to 50 years (AD 1960-1961)       Summer Time               June 1 to September 30 
-# Republic of China 51 years to 62 years (AD 1962-1973 years) Stop Summer Time 
-# Republic of China 63 years to 64 years (1974-1975 AD)       Daylight Saving Time      April 1 to September 30 
-# Republic of China 65 years to 67 years (1976-1978 AD)       Stop Daylight Saving Time 
-# Republic of China 68 years (AD 1979)                        Daylight Saving Time      July 1 to September 30 
+# Republic of China 34 years to 40 years (AD 1945-1951 years) Summer Time               May 1 to September 30
+# 41 years of the Republic of China (AD 1952)                 Daylight Saving Time      March 1 to October 31
+# Republic of China 42 years to 43 years (AD 1953-1954 years) Daylight Saving Time      April 1 to October 31
+# In the 44 years to 45 years (AD 1955-1956 years)            Daylight Saving Time      April 1 to September 30
+# Republic of China 46 years to 48 years (AD 1957-1959)       Summer Time               April 1 to September 30
+# Republic of China 49 years to 50 years (AD 1960-1961)       Summer Time               June 1 to September 30
+# Republic of China 51 years to 62 years (AD 1962-1973 years) Stop Summer Time
+# Republic of China 63 years to 64 years (1974-1975 AD)       Daylight Saving Time      April 1 to September 30
+# Republic of China 65 years to 67 years (1976-1978 AD)       Stop Daylight Saving Time
+# Republic of China 68 years (AD 1979)                        Daylight Saving Time      July 1 to September 30
 # Republic of China since 69 years (AD 1980)                  Stop Daylight Saving Time
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
@@ -1171,15 +1170,15 @@ Rule	Zion	2004	only	-	Sep	22	1:00	0	S
 #
 #	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps
 
-# From Paul Eggert (2005-02-22):
+# From Paul Eggert (2012-10-26):
 # I used Ephraim Silverberg's dst-israel.el program
 # <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)
 # along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,
-# to generate the transitions in this list.
+# to generate the transitions from 2005 through 2012.
 # (I replaced "lastFri" with "Fri>=26" by hand.)
-# The spring transitions below all correspond to the following Rule:
+# The spring transitions all correspond to the following Rule:
 #
-# Rule	Zion	2005	max	-	Mar	Fri>=26	2:00	1:00	D
+# Rule	Zion	2005	2012	-	Mar	Fri>=26	2:00	1:00	D
 #
 # but older zic implementations (e.g., Solaris 8) do not support
 # "Fri>=26" to mean April 1 in years like 2005, so for now we list the
@@ -1196,39 +1195,39 @@ Rule	Zion	2009	only	-	Sep	27	2:00	0	S
 Rule	Zion	2010	only	-	Sep	12	2:00	0	S
 Rule	Zion	2011	only	-	Apr	 1	2:00	1:00	D
 Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2012	2015	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2012	only	-	Mar	Fri>=26	2:00	1:00	D
 Rule	Zion	2012	only	-	Sep	23	2:00	0	S
-Rule	Zion	2013	only	-	Sep	 8	2:00	0	S
-Rule	Zion	2014	only	-	Sep	28	2:00	0	S
-Rule	Zion	2015	only	-	Sep	20	2:00	0	S
-Rule	Zion	2016	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2016	only	-	Oct	 9	2:00	0	S
-Rule	Zion	2017	2021	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2017	only	-	Sep	24	2:00	0	S
-Rule	Zion	2018	only	-	Sep	16	2:00	0	S
-Rule	Zion	2019	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2020	only	-	Sep	27	2:00	0	S
-Rule	Zion	2021	only	-	Sep	12	2:00	0	S
-Rule	Zion	2022	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2022	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2023	2032	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2023	only	-	Sep	24	2:00	0	S
-Rule	Zion	2024	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2025	only	-	Sep	28	2:00	0	S
-Rule	Zion	2026	only	-	Sep	20	2:00	0	S
-Rule	Zion	2027	only	-	Oct	10	2:00	0	S
-Rule	Zion	2028	only	-	Sep	24	2:00	0	S
-Rule	Zion	2029	only	-	Sep	16	2:00	0	S
-Rule	Zion	2030	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2031	only	-	Sep	21	2:00	0	S
-Rule	Zion	2032	only	-	Sep	12	2:00	0	S
-Rule	Zion	2033	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2033	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2034	2037	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2034	only	-	Sep	17	2:00	0	S
-Rule	Zion	2035	only	-	Oct	 7	2:00	0	S
-Rule	Zion	2036	only	-	Sep	28	2:00	0	S
-Rule	Zion	2037	only	-	Sep	13	2:00	0	S
+
+# From Ephraim Silverberg (2012-10-18):
+# Yesterday, the Interior Ministry Committee, after more than a year
+# past, approved sending the proposed June 2011 changes to the Time
+# Decree Law back to the Knesset for second and third (final) votes
+# before the upcoming elections on Jan. 22, 2013.  Hence, although the
+# changes are not yet law, they are expected to be so before February 2013.
+#
+# As of 2013, DST starts at 02:00 on the Friday before the last Sunday in March.
+# DST ends at 02:00 on the first Sunday after October 1, unless it occurs on the
+# second day of the Jewish Rosh Hashana holiday, in which case DST ends a day
+# later (i.e. at 02:00 the first Monday after October 2).
+# [Rosh Hashana holidays are factored in until 2100.]
+
+# From Ephraim Silverberg (2012-11-05):
+# The Knesset passed today (in second and final readings) the amendment to the
+# Time Decree Law making the changes ... law.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	2013	max	-	Mar	Fri>=23	2:00	1:00	D
+Rule	Zion	2013	2026	-	Oct	Sun>=2	2:00	0	S
+Rule	Zion	2027	only	-	Oct	Mon>=3	2:00	0	S
+Rule	Zion	2028	max	-	Oct	Sun>=2	2:00	0	S
+# The following rules are commented out for now, as they break older
+# versions of zic that support only signed 32-bit timestamps, i.e.,
+# through 2038-01-19 03:14:07 UTC.
+#Rule	Zion	2028	2053	-	Oct	Sun>=2	2:00	0	S
+#Rule	Zion	2054	only	-	Oct	Mon>=3	2:00	0	S
+#Rule	Zion	2055	2080	-	Oct	Sun>=2	2:00	0	S
+#Rule	Zion	2081	only	-	Oct	Mon>=3	2:00	0	S
+#Rule	Zion	2082	max	-	Oct	Sun>=2	2:00	0	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
@@ -1363,6 +1362,16 @@ Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
 # From Arthur David Olson (2009-04-06):
 # We still have Jordan switching to DST on Thursdays in 2000 and 2001.
 
+# From Steffen Thorsen (2012-10-25):
+# Yesterday the government in Jordan announced that they will not
+# switch back to standard time this winter, so the will stay on DST
+# until about the same time next year (at least).
+# http://www.petra.gov.jo/Public_News/Nws_NewsDetails.aspx?NewsID=88950
+#
+# From Paul Eggert (2012-10-25):
+# For now, assume this is just a one-year measure.  If it becomes
+# permanent, we should move Jordan from EET to AST effective tomorrow.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Jordan	1973	only	-	Jun	6	0:00	1:00	S
 Rule	Jordan	1973	1975	-	Oct	1	0:00	0	-
@@ -1391,7 +1400,8 @@ Rule	Jordan	2002	max	-	Mar	lastThu	24:00	1:00	S
 Rule	Jordan	2003	only	-	Oct	24	0:00s	0	-
 Rule	Jordan	2004	only	-	Oct	15	0:00s	0	-
 Rule	Jordan	2005	only	-	Sep	lastFri	0:00s	0	-
-Rule	Jordan	2006	max	-	Oct	lastFri	0:00s	0	-
+Rule	Jordan	2006	2011	-	Oct	lastFri	0:00s	0	-
+Rule	Jordan	2013	max	-	Oct	lastFri	0:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Amman	2:23:44 -	LMT	1931
 			2:00	Jordan	EE%sT
@@ -1836,15 +1846,15 @@ Zone	Asia/Muscat	3:54:20 -	LMT	1920
 # shown 8 per cent higher consumption of electricity.
 
 # From Alex Krivenyshev (2008-05-15):
-# 
-# Here is an article that Pakistan plan to introduce Daylight Saving Time 
+#
+# Here is an article that Pakistan plan to introduce Daylight Saving Time
 # on June 1, 2008 for 3 months.
-# 
-# "... The federal cabinet on Wednesday announced a new conservation plan to help 
-# reduce load shedding by approving the closure of commercial centres at 9pm and 
-# moving clocks forward by one hour for the next three months. 
+#
+# "... The federal cabinet on Wednesday announced a new conservation plan to help
+# reduce load shedding by approving the closure of commercial centres at 9pm and
+# moving clocks forward by one hour for the next three months.
 # ...."
-# 
+#
 # <a href="http://www.worldtimezone.net/dst_news/dst_news_pakistan01.html">
 # http://www.worldtimezone.net/dst_news/dst_news_pakistan01.html
 # </a>
@@ -1904,7 +1914,7 @@ Zone	Asia/Muscat	3:54:20 -	LMT	1920
 # Government has decided to restore the previous time by moving the
 # clocks backward by one hour from October 1. A formal announcement to
 # this effect will be made after the Prime Minister grants approval in
-# this regard." 
+# this regard."
 # <a href="http://www.thenews.com.pk/updates.asp?id=87168">
 # http://www.thenews.com.pk/updates.asp?id=87168
 # </a>
@@ -2042,8 +2052,7 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # occurred before our cutoff date of 1970.
 # However, as we get more information, we may need to add entries
 # for parts of the West Bank as they transitioned from Israel's rules
-# to Palestine's rules.  If you have more info about this, please
-# send it to tz@elsie.nci.nih.gov for incorporation into future editions.
+# to Palestine's rules.
 
 # From IINS News Service - Israel - 1998-03-23 10:38:07 Israel time,
 # forwarded by Ephraim Silverberg:
@@ -2200,7 +2209,7 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # <a href="http://www.maannews.net/eng/ViewDetails.aspx?ID=306795">
 # http://www.maannews.net/eng/ViewDetails.aspx?ID=306795
 # </a>
-# the clocks were set back one hour at 2010-08-11 00:00:00 local time in 
+# the clocks were set back one hour at 2010-08-11 00:00:00 local time in
 # Gaza and the West Bank.
 # Some more background info:
 # <a href="http://www.timeanddate.com/news/time/westbank-gaza-end-dst-2010.html">
@@ -2239,7 +2248,7 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # The rules for Egypt are stolen from the `africa' file.
 
 # From Steffen Thorsen (2011-09-30):
-# West Bank did end Daylight Saving Time this morning/midnight (2011-09-30 
+# West Bank did end Daylight Saving Time this morning/midnight (2011-09-30
 # 00:00).
 # So West Bank and Gaza now have the same time again.
 #
@@ -2294,6 +2303,8 @@ Rule Palestine	2010	only	-	Aug	11	0:00	0	-
 
 # From Arthur David Olson (2011-09-20):
 # 2011 transitions per http://www.timeanddate.com as of 2011-09-20.
+# From Paul Eggert (2012-10-12):
+# 2012 transitions per http://www.timeanddate.com as of 2012-10-12.
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
@@ -2304,7 +2315,7 @@ Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
 			2:00 Palestine	EE%sT	2011 Apr  2 12:01
 			2:00	1:00	EEST	2011 Aug  1
 			2:00	-	EET	2012 Mar 30
-			2:00	1:00	EEST	2012 Sep 28
+			2:00	1:00	EEST	2012 Sep 21 1:00
 			2:00	-	EET
 
 Zone	Asia/Hebron	2:20:23	-	LMT	1900 Oct
@@ -2319,7 +2330,7 @@ Zone	Asia/Hebron	2:20:23	-	LMT	1900 Oct
 			2:00	-	EET	2011 Aug 30
 			2:00	1:00	EEST	2011 Sep 30 3:00
 			2:00	-	EET	2012 Mar 30
-			2:00	1:00	EEST	2012 Sep 28 3:00
+			2:00	1:00	EEST	2012 Sep 21 1:00
 			2:00	-	EET
 
 # Paracel Is
@@ -2513,19 +2524,19 @@ Rule	Syria	2007	only	-	Mar	lastFri	0:00	1:00	S
 # having it between Wednesday and Thursday (two workdays in Syria) since the
 # weekend in Syria is not Saturday and Sunday, but Friday and Saturday. So now
 # it is implemented at midnight of the last workday before weekend...
-# 
+#
 # From Steffen Thorsen (2007-10-27):
 # Jesper Norgaard Welen wrote:
-# 
+#
 # > "Winter local time in Syria will be observed at midnight of Thursday 1
 # > November 2007, and the clock will be put back 1 hour."
-# 
+#
 # I found confirmation on this in this gov.sy-article (Arabic):
 # http://wehda.alwehda.gov.sy/_print_veiw.asp?FileName=12521710520070926111247
-# 
+#
 # which using Google's translate tools says:
-# Council of Ministers also approved the commencement of work on 
-# identifying the winter time as of Friday, 2/11/2007 where the 60th 
+# Council of Ministers also approved the commencement of work on
+# identifying the winter time as of Friday, 2/11/2007 where the 60th
 # minute delay at midnight Thursday 1/11/2007.
 Rule	Syria	2007	only	-	Nov	 Fri>=1	0:00	0	-
 
@@ -2591,8 +2602,8 @@ Rule	Syria	2007	only	-	Nov	 Fri>=1	0:00	0	-
 # </a>
 
 # From Steffen Thorsen (2009-10-27):
-# The Syrian Arab News Network on 2009-09-29 reported that Syria will 
-# revert back to winter (standard) time on midnight between Thursday 
+# The Syrian Arab News Network on 2009-09-29 reported that Syria will
+# revert back to winter (standard) time on midnight between Thursday
 # 2009-10-29 and Friday 2009-10-30:
 # <a href="http://www.sana.sy/ara/2/2009/09/29/247012.htm">
 # http://www.sana.sy/ara/2/2009/09/29/247012.htm (Arabic)
diff --git a/src/main/java/org/joda/time/tz/src/australasia b/src/main/java/org/joda/time/tz/src/australasia
index 07b55d491..bef6f2042 100644
--- a/src/main/java/org/joda/time/tz/src/australasia
+++ b/src/main/java/org/joda/time/tz/src/australasia
@@ -1,5 +1,4 @@
 # <pre>
-# @(#)australasia	8.30
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -284,9 +283,9 @@ Zone	Indian/Cocos	6:27:40	-	LMT	1900
 # </a>
 
 # From Alexander Krivenyshev (2010-10-24):
-# According to Radio Fiji and Fiji Times online, Fiji will end DST 3 
+# According to Radio Fiji and Fiji Times online, Fiji will end DST 3
 # weeks earlier than expected - on March 6, 2011, not March 27, 2011...
-# Here is confirmation from Government of the Republic of the Fiji Islands, 
+# Here is confirmation from Government of the Republic of the Fiji Islands,
 # Ministry of Information (fiji.gov.fj) web site:
 # <a href="http://www.fiji.gov.fj/index.php?option=com_content&view=article&id=2608:daylight-savings&catid=71:press-releases&Itemid=155">
 # http://www.fiji.gov.fj/index.php?option=com_content&view=article&id=2608:daylight-savings&catid=71:press-releases&Itemid=155
@@ -297,15 +296,15 @@ Zone	Indian/Cocos	6:27:40	-	LMT	1900
 # </a>
 
 # From Steffen Thorsen (2011-10-03):
-# Now the dates have been confirmed, and at least our start date 
+# Now the dates have been confirmed, and at least our start date
 # assumption was correct (end date was one week wrong).
 #
 # <a href="http://www.fiji.gov.fj/index.php?option=com_content&view=article&id=4966:daylight-saving-starts-in-fiji&catid=71:press-releases&Itemid=155">
 # www.fiji.gov.fj/index.php?option=com_content&view=article&id=4966:daylight-saving-starts-in-fiji&catid=71:press-releases&Itemid=155
 # </a>
 # which says
-# Members of the public are reminded to change their time to one hour in 
-# advance at 2am to 3am on October 23, 2011 and one hour back at 3am to 
+# Members of the public are reminded to change their time to one hour in
+# advance at 2am to 3am on October 23, 2011 and one hour back at 3am to
 # 2am on February 26 next year.
 
 # From Ken Rylander (2011-10-24)
@@ -322,15 +321,23 @@ Zone	Indian/Cocos	6:27:40	-	LMT	1900
 # The commencement of daylight saving will remain unchanged and start
 # on the  23rd of October, 2011.
 
+# From the Fiji Government Online Portal (2012-08-21) via Steffen Thorsen:
+# The Minister for Labour, Industrial Relations and Employment Mr Jone Usamate
+# today confirmed that Fiji will start daylight savings at 2 am on Sunday 21st
+# October 2012 and end at 3 am on Sunday 20th January 2013.
+# http://www.fiji.gov.fj/index.php?option=com_content&view=article&id=6702&catid=71&Itemid=155
+#
+# From Paul Eggert (2012-08-31):
+# For now, guess a pattern of the penultimate Sundays in October and January.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Fiji	1998	1999	-	Nov	Sun>=1	2:00	1:00	S
 Rule	Fiji	1999	2000	-	Feb	lastSun	3:00	0	-
 Rule	Fiji	2009	only	-	Nov	29	2:00	1:00	S
 Rule	Fiji	2010	only	-	Mar	lastSun	3:00	0	-
-Rule	Fiji	2010	only	-	Oct	24	2:00	1:00	S
+Rule	Fiji	2010	max	-	Oct	Sun>=18	2:00	1:00	S
 Rule	Fiji	2011	only	-	Mar	Sun>=1	3:00	0	-
-Rule	Fiji	2011	only	-	Oct	23	2:00	1:00	S
-Rule	Fiji	2012	only	-	Jan	22	3:00	0	-
+Rule	Fiji	2012	max	-	Jan	Sun>=18	3:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Pacific/Fiji	11:53:40 -	LMT	1915 Oct 26	# Suva
 			12:00	Fiji	FJ%sT	# Fiji Time
@@ -559,7 +566,7 @@ Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
 
 # From David Zuelke (2011-05-09):
 # Subject: Samoa to move timezone from east to west of international date line
-# 
+#
 # <a href="http://www.morningstar.co.uk/uk/markets/newsfeeditem.aspx?id=138501958347963">
 # http://www.morningstar.co.uk/uk/markets/newsfeeditem.aspx?id=138501958347963
 # </a>
@@ -621,6 +628,23 @@ Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
 # Although Samoa has used Daylight Saving Time in the 2010-2011 and 2011-2012
 # seasons, there is not yet any indication that this trend will continue on
 # a regular basis. For now, we have explicitly listed the transitions below.
+#
+# From Nicky (2012-09-10):
+# Daylight Saving Time commences on Sunday 30th September 2012 and
+# ends on Sunday 7th of April 2013.
+#
+# Please find link below for more information.
+# http://www.mcil.gov.ws/mcil_publications.html
+#
+# That publication also includes dates for Summer of 2013/4 as well
+# which give the impression of a pattern in selecting dates for the
+# future, so for now, we will guess this will continue.
+
+# Western Samoa
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	WS	2012	max	-	Sep	lastSun	3:00	1	D
+Rule	WS	2012	max	-	Apr	Sun>=1	4:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
 			-11:26:56 -	LMT	1911
 			-11:30	-	SAMT	1950		# Samoa Time
@@ -628,8 +652,8 @@ Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
 			-11:00	1:00	WSDT	2011 Apr 2 4:00
 			-11:00	-	WST	2011 Sep 24 3:00
 			-11:00	1:00	WSDT	2011 Dec 30
-			 13:00	1:00	WSDT	2012 Apr 1 4:00
-			 13:00	-	WST
+			 13:00	1:00	WSDT	2012 Apr Sun>=1 4:00
+			 13:00	WS	WS%sT
 
 # Solomon Is
 # excludes Bougainville, for which see Papua New Guinea
@@ -641,25 +665,25 @@ Zone Pacific/Guadalcanal 10:39:48 -	LMT	1912 Oct	# Honiara
 #
 # From Gwillim Law (2011-12-29)
 # A correspondent informed me that Tokelau, like Samoa, will be skipping
-# December 31 this year, thereby changing its time zone from UTC-10 to
-# UTC+14. When I tried to verify this statement, I found a confirming
-# article in Time magazine online
-# <a href="http://www.time.com/time/world/article/0,8599,2103243,00.html">
-# (http://www.time.com/time/world/article/0,8599,2103243,00.html).
-# </a>
+# December 31 this year ...
 #
-# From Jonathan Leffler (2011-12-29)
-# Information from the BBC to the same effect:
-# <a href="http://www.bbc.co.uk/news/world-asia-16351377">
-# http://www.bbc.co.uk/news/world-asia-16351377
-# </a>
+# From Steffen Thorsen (2012-07-25)
+# ... we double checked by calling hotels and offices based in Tokelau asking
+# about the time there, and they all told a time that agrees with UTC+13....
+# Shanks says UTC-10 from 1901 [but] ... there is a good chance the change
+# actually was to UTC-11 back then.
 #
-# Patch supplied by Tim Parenti (2011-12-29)
+# From Paul Eggert (2012-07-25)
+# A Google Books snippet of Appendix to the Journals of the House of
+# Representatives of New Zealand, Session 1948,
+# <http://books.google.com/books?id=ZaVCAQAAIAAJ>, page 65, says Tokelau
+# was "11 hours slow on G.M.T."  Go with Thorsen and assume Shanks & Pottenger
+# are off by an hour starting in 1901.
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Pacific/Fakaofo	-11:24:56 -	LMT	1901
-			-10:00	-	TKT 2011 Dec 30	# Tokelau Time
-			14:00	-	TKT
+			-11:00	-	TKT 2011 Dec 30	# Tokelau Time
+			13:00	-	TKT
 
 # Tonga
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
@@ -756,7 +780,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
+# tz@iana.org for general use in the future).
 
 # From Paul Eggert (2006-03-22):
 # A good source for time zone historical data outside the U.S. is
@@ -1340,22 +1364,22 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # See "southeast Australia" above for 2008 and later.
 
 # From Steffen Thorsen (2009-04-28):
-# According to the official press release, South Australia's extended daylight 
-# saving period will continue with the same rules as used during the 2008-2009 
+# According to the official press release, South Australia's extended daylight
+# saving period will continue with the same rules as used during the 2008-2009
 # summer (southern hemisphere).
-# 
+#
 # From
 # <a href="http://www.safework.sa.gov.au/uploaded_files/DaylightDatesSet.pdf">
 # http://www.safework.sa.gov.au/uploaded_files/DaylightDatesSet.pdf
 # </a>
-# The extended daylight saving period that South Australia has been trialling 
+# The extended daylight saving period that South Australia has been trialling
 # for over the last year is now set to be ongoing.
-# Daylight saving will continue to start on the first Sunday in October each 
+# Daylight saving will continue to start on the first Sunday in October each
 # year and finish on the first Sunday in April the following year.
-# Industrial Relations Minister, Paul Caica, says this provides South Australia 
-# with a consistent half hour time difference with NSW, Victoria, Tasmania and 
+# Industrial Relations Minister, Paul Caica, says this provides South Australia
+# with a consistent half hour time difference with NSW, Victoria, Tasmania and
 # the ACT for all 52 weeks of the year...
-# 
+#
 # We have a wrap-up here:
 # <a href="http://www.timeanddate.com/news/time/south-australia-extends-dst.html">
 # http://www.timeanddate.com/news/time/south-australia-extends-dst.html
diff --git a/src/main/java/org/joda/time/tz/src/backward b/src/main/java/org/joda/time/tz/src/backward
index b2d837d2f..dc7769fb1 100644
--- a/src/main/java/org/joda/time/tz/src/backward
+++ b/src/main/java/org/joda/time/tz/src/backward
@@ -1,5 +1,4 @@
 # <pre>
-# @(#)backward	8.11
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
diff --git a/src/main/java/org/joda/time/tz/src/etcetera b/src/main/java/org/joda/time/tz/src/etcetera
index f8eb4b58e..a9ff72938 100644
--- a/src/main/java/org/joda/time/tz/src/etcetera
+++ b/src/main/java/org/joda/time/tz/src/etcetera
@@ -1,5 +1,4 @@
 # <pre>
-# @(#)etcetera	8.3
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
diff --git a/src/main/java/org/joda/time/tz/src/europe b/src/main/java/org/joda/time/tz/src/europe
index fceb41035..ad9816c10 100644
--- a/src/main/java/org/joda/time/tz/src/europe
+++ b/src/main/java/org/joda/time/tz/src/europe
@@ -1,11 +1,10 @@
 # <pre>
-# @(#)europe	8.41
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
+# tz@iana.org for general use in the future).
 
 # From Paul Eggert (2006-03-22):
 # A good source for time zone historical data outside the U.S. is
@@ -575,12 +574,12 @@ Rule	Russia	1996	2010	-	Oct	lastSun	 2:00s	0	-
 # According to Kremlin press service, Russian President Dmitry Medvedev
 # signed a federal law "On calculation of time" on June 9, 2011.
 # According to the law Russia is abolishing daylight saving time.
-# 
-# Medvedev signed a law "On the Calculation of Time" (in russian): 
+#
+# Medvedev signed a law "On the Calculation of Time" (in russian):
 # <a href="http://bmockbe.ru/events/?ID=7583">
 # http://bmockbe.ru/events/?ID=7583
 # </a>
-# 
+#
 # Medvedev signed a law on the calculation of the time (in russian):
 # <a href="http://www.regnum.ru/news/polit/1413906.html">
 # http://www.regnum.ru/news/polit/1413906.html
@@ -1688,7 +1687,7 @@ Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2 0:00s # Valletta
 # From Alexander Krivenyshev (2011-10-26)
 # NO need to divide Moldova into two timezones at this point.
 # As of today, Transnistria (Pridnestrovie)- Tiraspol reversed its own
-# decision to abolish DST this winter. 
+# decision to abolish DST this winter.
 # Following Moldova and neighboring Ukraine- Transnistria (Pridnestrovie)-
 # Tiraspol will go back to winter time on October 30, 2011.
 # News from Moldova (in russian):
@@ -2578,11 +2577,11 @@ Zone	Europe/Zurich	0:34:08 -	LMT	1848 Sep 12
 # http://www.alomaliye.com/bkk_2002_3769.htm
 
 # From G&ouml;kdeniz Karada&#x011f; (2011-03-10):
-# 
+#
 # According to the articles linked below, Turkey will change into summer
 # time zone (GMT+3) on March 28, 2011 at 3:00 a.m. instead of March 27.
 # This change is due to a nationwide exam on 27th.
-# 
+#
 # <a href="http://www.worldbulletin.net/?aType=haber&ArticleID=70872">
 # http://www.worldbulletin.net/?aType=haber&ArticleID=70872
 # </a>
@@ -2699,7 +2698,7 @@ Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
 # time this year after all.
 #
 # From Udo Schwedt (2011-10-18):
-# As far as I understand, the recent change to the Ukranian time zone 
+# As far as I understand, the recent change to the Ukranian time zone
 # (Europe/Kiev) to introduce permanent daylight saving time (similar
 # to Russia) was reverted today:
 #
diff --git a/src/main/java/org/joda/time/tz/src/northamerica b/src/main/java/org/joda/time/tz/src/northamerica
index 605eb0094..772d7a439 100644
--- a/src/main/java/org/joda/time/tz/src/northamerica
+++ b/src/main/java/org/joda/time/tz/src/northamerica
@@ -1,5 +1,4 @@
 # <pre>
-# @(#)northamerica	8.54
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -7,7 +6,7 @@
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
+# tz@iana.org for general use in the future).
 
 # From Paul Eggert (1999-03-22):
 # A reliable and entertaining source about time zones is
@@ -479,7 +478,7 @@ Zone America/Juneau	 15:02:19 -	LMT	1867 Oct 18
 			 -8:00	US	P%sT	1946
 			 -8:00	-	PST	1969
 			 -8:00	US	P%sT	1980 Apr 27 2:00
-			 -9:00	US	Y%sT	1980 Oct 26 2:00	
+			 -9:00	US	Y%sT	1980 Oct 26 2:00
 			 -8:00	US	P%sT	1983 Oct 30 2:00
 			 -9:00	US	Y%sT	1983 Nov 30
 			 -9:00	US	AK%sT
@@ -1844,7 +1843,7 @@ Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
 # Here is a summary of the three clock change events in Creston's history:
 # 1. 1884 or 1885: adoption of Mountain Standard Time (GMT-7)
 # Exact date unknown
-# 2. Oct 1916: switch to Pacific Standard Time (GMT-8) 
+# 2. Oct 1916: switch to Pacific Standard Time (GMT-8)
 # Exact date in October unknown;  Sunday October 1 is a reasonable guess.
 # 3. June 1918: switch to Pacific Daylight Time (GMT-7)
 # Exact date in June unknown; Sunday June 2 is a reasonable guess.
@@ -2674,20 +2673,20 @@ Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
 # except that it switches at midnight standard time as usual.
 #
 # From Steffen Thorsen (2007-10-25):
-# Carlos Alberto Fonseca Arauz informed me that Cuba will end DST one week 
+# Carlos Alberto Fonseca Arauz informed me that Cuba will end DST one week
 # earlier - on the last Sunday of October, just like in 2006.
-# 
+#
 # He supplied these references:
-# 
+#
 # http://www.prensalatina.com.mx/article.asp?ID=%7B4CC32C1B-A9F7-42FB-8A07-8631AFC923AF%7D&language=ES
 # http://actualidad.terra.es/sociedad/articulo/cuba_llama_ahorrar_energia_cambio_1957044.htm
-# 
+#
 # From Alex Kryvenishev (2007-10-25):
 # Here is also article from Granma (Cuba):
-# 
+#
 # [Regira] el Horario Normal desde el [proximo] domingo 28 de octubre
 # http://www.granma.cubaweb.cu/2007/10/24/nacional/artic07.html
-# 
+#
 # http://www.worldtimezone.com/dst_news/dst_news_cuba03.html
 
 # From Arthur David Olson (2008-03-09):
@@ -2771,7 +2770,7 @@ Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
 # </a>
 #
 # From Steffen Thorsen (2011-10-30)
-# Cuba will end DST two weeks later this year. Instead of going back 
+# Cuba will end DST two weeks later this year. Instead of going back
 # tonight, it has been delayed to 2011-11-13 at 01:00.
 #
 # One source (Spanish)
@@ -2783,11 +2782,11 @@ Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
 # <a href="http://www.timeanddate.com/news/time/cuba-time-changes-2011.html">
 # http://www.timeanddate.com/news/time/cuba-time-changes-2011.html
 # </a>
-# 
+#
 # From Steffen Thorsen (2012-03-01)
-# According to Radio Reloj, Cuba will start DST on Midnight between March 
+# According to Radio Reloj, Cuba will start DST on Midnight between March
 # 31 and April 1.
-# 
+#
 # Radio Reloj has the following info (Spanish):
 # <a href="http://www.radioreloj.cu/index.php/noticias-radio-reloj/71-miscelaneas/7529-cuba-aplicara-el-horario-de-verano-desde-el-1-de-abril">
 # http://www.radioreloj.cu/index.php/noticias-radio-reloj/71-miscelaneas/7529-cuba-aplicara-el-horario-de-verano-desde-el-1-de-abril
@@ -2798,6 +2797,13 @@ Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
 # http://www.timeanddate.com/news/time/cuba-starts-dst-2012.html
 # </a>
 
+# From Steffen Thorsen (2012-11-03):
+# Radio Reloj and many other sources report that Cuba is changing back
+# to standard time on 2012-11-04:
+# http://www.radioreloj.cu/index.php/noticias-radio-reloj/36-nacionales/9961-regira-horario-normal-en-cuba-desde-el-domingo-cuatro-de-noviembre
+# From Paul Eggert (2012-11-03):
+# For now, assume the future rule is first Sunday in November.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
 Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
@@ -2835,7 +2841,7 @@ Rule	Cuba	2009	2010	-	Mar	Sun>=8	0:00s	1:00	D
 Rule	Cuba	2011	only	-	Mar	Sun>=15	0:00s	1:00	D
 Rule	Cuba	2011	only	-	Nov	13	0:00s	0	S
 Rule	Cuba	2012	only	-	Apr	1	0:00s	1:00	D
-Rule	Cuba	2012	max	-	Oct	lastSun	0:00s	0	S
+Rule	Cuba	2012	max	-	Nov	Sun>=1	0:00s	0	S
 Rule	Cuba	2013	max	-	Mar	Sun>=8	0:00s	1:00	D
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
diff --git a/src/main/java/org/joda/time/tz/src/pacificnew b/src/main/java/org/joda/time/tz/src/pacificnew
index e2512c1d1..bccd85210 100644
--- a/src/main/java/org/joda/time/tz/src/pacificnew
+++ b/src/main/java/org/joda/time/tz/src/pacificnew
@@ -1,5 +1,4 @@
 # <pre>
-# @(#)pacificnew	8.2
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
diff --git a/src/main/java/org/joda/time/tz/src/southamerica b/src/main/java/org/joda/time/tz/src/southamerica
index 45632b4cc..3301a43ac 100644
--- a/src/main/java/org/joda/time/tz/src/southamerica
+++ b/src/main/java/org/joda/time/tz/src/southamerica
@@ -1,11 +1,10 @@
 # <pre>
-# @(#)southamerica	8.53
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
+# tz@iana.org for general use in the future).
 
 # From Paul Eggert (2006-03-22):
 # A good source for time zone historical data outside the U.S. is
@@ -232,7 +231,7 @@ Rule	Arg	2000	only	-	Mar	3	0:00	0	-
 Rule	Arg	2007	only	-	Dec	30	0:00	1:00	S
 Rule	Arg	2008	2009	-	Mar	Sun>=15	0:00	0	-
 Rule	Arg	2008	only	-	Oct	Sun>=15	0:00	1:00	S
- 
+
 # From Mariano Absatz (2004-05-21):
 # Today it was officially published that the Province of Mendoza is changing
 # its timezone this winter... starting tomorrow night....
@@ -322,9 +321,9 @@ Rule	Arg	2008	only	-	Oct	Sun>=15	0:00	1:00	S
 # confirms what Alex Krivenyshev has earlier sent to the tz
 # emailing list about that San Luis plans to return to standard
 # time much earlier than the rest of the country. It also
-# confirms that upon request the provinces San Juan and Mendoza 
-# refused to follow San Luis in this change. 
-# 
+# confirms that upon request the provinces San Juan and Mendoza
+# refused to follow San Luis in this change.
+#
 # The change is supposed to take place Monday the 21.st at 0:00
 # hours. As far as I understand it if this goes ahead, we need
 # a new timezone for San Luis (although there are also documented
@@ -386,7 +385,7 @@ Rule	Arg	2008	only	-	Oct	Sun>=15	0:00	1:00	S
 # <a href="http://www.lanacion.com.ar/nota.asp?nota_id=1107912">
 # http://www.lanacion.com.ar/nota.asp?nota_id=1107912
 # </a>
-# 
+#
 # The press release says:
 #  (...) anunci� que el pr�ximo domingo a las 00:00 los puntanos deber�n
 # atrasar una hora sus relojes.
@@ -800,8 +799,8 @@ Zone	America/La_Paz	-4:32:36 -	LMT	1890
 #
 # From Alexander Krivenyshev (2011-10-04):
 # State Bahia will return to Daylight savings time this year after 8 years off.
-# The announcement was made by Governor Jaques Wagner in an interview to a 
-# television station in Salvador. 
+# The announcement was made by Governor Jaques Wagner in an interview to a
+# television station in Salvador.
 
 # In Portuguese:
 # <a href="http://g1.globo.com/bahia/noticia/2011/10/governador-jaques-wagner-confirma-horario-de-verao-na-bahia.html">
@@ -830,6 +829,15 @@ Zone	America/La_Paz	-4:32:36 -	LMT	1890
 # http://www.in.gov.br/visualiza/index.jsp?data=13/10/2011&jornal=1000&pagina=6&totalArquivos=6
 # </a>
 
+# From Kelley Cook (2012-10-16):
+# The governor of state of Bahia in Brazil announced on Thursday that
+# due to public pressure, he is reversing the DST policy they implemented
+# last year and will not be going to Summer Time on October 21st....
+# http://www.correio24horas.com.br/r/artigo/apos-pressoes-wagner-suspende-horario-de-verao-na-bahia
+
+# From Rodrigo Severo (2012-10-16):
+# Tocantins state will have DST.
+# http://noticias.terra.com.br/brasil/noticias/0,,OI6232536-EI306.html
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 # Decree <a href="http://pcdsh01.on.br/HV20466.htm">20,466</a> (1931-10-01)
@@ -1049,7 +1057,8 @@ Zone America/Araguaina	-3:12:48 -	LMT	1914
 			-3:00	Brazil	BR%sT	1990 Sep 17
 			-3:00	-	BRT	1995 Sep 14
 			-3:00	Brazil	BR%sT	2003 Sep 24
-			-3:00	-	BRT
+			-3:00	-	BRT	2012 Oct 21
+			-3:00	Brazil	BR%sT
 #
 # Alagoas (AL), Sergipe (SE)
 Zone America/Maceio	-2:22:52 -	LMT	1914
@@ -1068,7 +1077,8 @@ Zone America/Maceio	-2:22:52 -	LMT	1914
 Zone America/Bahia	-2:34:04 -	LMT	1914
 			-3:00	Brazil	BR%sT	2003 Sep 24
 			-3:00	-	BRT	2011 Oct 16
-			-3:00	Brazil	BR%sT
+			-3:00	Brazil	BR%sT	2012 Oct 21
+			-3:00	-	BRT
 #
 # Goias (GO), Distrito Federal (DF), Minas Gerais (MG),
 # Espirito Santo (ES), Rio de Janeiro (RJ), Sao Paulo (SP), Parana (PR),
@@ -1160,7 +1170,7 @@ Zone America/Rio_Branco	-4:31:12 -	LMT	1914
 # Due to drought, Chile extends Daylight Time in three weeks.  This
 # is one-time change (Saturday 3/29 at 24:00 for America/Santiago
 # and Saturday 3/29 at 22:00 for Pacific/Easter)
-# The Supreme Decree is located at 
+# The Supreme Decree is located at
 # <a href="http://www.shoa.cl/servicios/supremo316.pdf">
 # http://www.shoa.cl/servicios/supremo316.pdf
 # </a>
@@ -1171,7 +1181,7 @@ Zone America/Rio_Branco	-4:31:12 -	LMT	1914
 
 # From Jose Miguel Garrido (2008-03-05):
 # ...
-# You could see the announces of the change on 
+# You could see the announces of the change on
 # <a href="http://www.shoa.cl/noticias/2008/04hora/hora.htm">
 # http://www.shoa.cl/noticias/2008/04hora/hora.htm
 # </a>.
diff --git a/src/main/java/org/joda/time/tz/src/systemv b/src/main/java/org/joda/time/tz/src/systemv
index 767388d6a..e651e8540 100644
--- a/src/main/java/org/joda/time/tz/src/systemv
+++ b/src/main/java/org/joda/time/tz/src/systemv
@@ -1,5 +1,4 @@
 # <pre>
-# @(#)systemv	8.2
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 

From e329ecf6177bd19a9d4520514cfc6b02a8109eec Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 7 Jan 2013 11:20:28 +0000
Subject: [PATCH 32/52] Delete TODO file

---
 ToDo.txt | 56 --------------------------------------------------------
 1 file changed, 56 deletions(-)
 delete mode 100644 ToDo.txt

diff --git a/ToDo.txt b/ToDo.txt
deleted file mode 100644
index 6073af17b..000000000
--- a/ToDo.txt
+++ /dev/null
@@ -1,56 +0,0 @@
-JodaTime ToDo list
-==================
-
-For 2.1
--------
-
-The TODO list for 2.1 has not been set yet.
-Some of the following are likely targets, as they are interesting ideas.
-However, JSR-310 is also ongoing and may be a better focus for new features.
-
-Join joda-interest.at.lists.sourceforge.net to help out!
-
-Ideas
------
-- Pluggable text providers:
-   Allow all text output to be controlled and updated.
-   Probably use the CLDR files.
-
-- More chronologies:
-   Implement more chronologies, like ChineseChronology, HebrewChronology,
-   PersianChronology, etc. This may require more work in localization.
-
-- DateTimeFormatter.appendLocaleFormatterMap(map):
-    Adds a map of Locale to Formatter, which picks the formatter to use
-    based on the locale of the print/parse. Allows for the flexible insertion
-    of any locale based text into a shared multi-language formatter.
-
-- DateTimeField.setNext(instant, value, howManyNext):
-    Allows questions like what is the date next Tuesday
-
-- Partial matching:
-    Add code to allow full matching of partials. Thus you might define
-    DayOfWeek=Friday and DayOfMonth=13, and then resolve to find the
-    next matching Friday the 13th.
-
-- Chronology:
-    Add daysFrom(year)
-    This would be a DateTimeField that, given a base year, returns the number of
-    elapsed days from 1st Jan that year. Apparantly useful for Excel, where a
-    standard format is days from 1900.
-
-- ISOCalendar:
-    Calendar subclass that implements our interface. This might be difficult to
-    do since Calendar has so many final methods and a rigid specification.
-
-- ISODate:
-    Date subclasses that implements our interface. This might not be a worthwhile
-    effort since almost all Date methods are deprecated.
-
-- Recurrence:
-    Create a set of classes for supporting recurrences. This will need to support
-    complex specifications such as "2nd Wednesday in May" and "next Thursday".
-    A builder design might be helpful.
-
-- Holidays:
-    These might simply be special instances of Recurrences.

From 14221a4e49631e469f5e6e712ce38d3d3a60427f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 7 Jan 2013 11:28:42 +0000
Subject: [PATCH 33/52] Change maven build to use exec-maven-plugin

https://sourceforge.net/p/joda-time/bugs/158/
---
 RELEASE-NOTES.txt                             |  3 +
 pom.xml                                       | 66 ++++++++++---------
 .../org/joda/time/tz/ZoneInfoCompiler.java    |  6 +-
 3 files changed, 43 insertions(+), 32 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index c7694cf83..0bd96eb69 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -107,6 +107,9 @@ Bug fixes since 2.1
 - Fixed Spanish translation of day for periods - dia now has accented i
   https://github.com/JodaOrg/joda-time/pull/5
 
+- Change maven build to use exec-maven-plugin [158]
+  https://sourceforge.net/p/joda-time/bugs/158/
+
 
 Scala
 --------
diff --git a/pom.xml b/pom.xml
index b4ce19752..0119700d9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -8,7 +8,7 @@
   <artifactId>joda-time</artifactId>
   <packaging>jar</packaging>
   <name>Joda time</name>
-  <version>2.1</version>
+  <version>2.2-SNAPSHOT</version>
   <description>Date and time library to replace JDK date handling</description>
   <url>http://joda-time.sourceforge.net</url>
   <issueManagement>
@@ -123,6 +123,9 @@
   </organization>
   <build>
     <resources>
+      <resource>
+        <directory>src/main/resources</directory>
+      </resource>
       <resource>
         <targetPath>META-INF</targetPath>
         <directory>.</directory>
@@ -163,42 +166,45 @@
         </configuration>
       </plugin>
       <plugin>
-        <artifactId>maven-antrun-plugin</artifactId>
-        <version>1.7</version>
+        <groupId>org.codehaus.mojo</groupId>      
+        <artifactId>exec-maven-plugin</artifactId>
+        <version>1.2.1</version>
         <executions>
           <execution>
             <phase>compile</phase>
-            <configuration>
-              <target>
-                <property name="tz.src" value="${project.build.sourceDirectory}/org/joda/time/tz/src" />
-                <property name="tz.dst" value="${project.build.outputDirectory}/org/joda/time/tz/data" />
-                <!--uptodate property="tz.build.notneeded" targetfile="${tz.dst}/ZoneInfoMap" >
-                  <srcfiles dir="${tz.src}" includes="**/*.*"/>
-                </uptodate-->
-                <mkdir dir="${tz.dst}" />
-                <java classname="org.joda.time.tz.ZoneInfoCompiler" fork="true" failonerror="true">
-                  <classpath refid="maven.compile.classpath" />
-                  <sysproperty key="org.joda.time.DateTimeZone.Provider" value="org.joda.time.tz.UTCProvider" />
-                  <arg line="-src ${tz.src} -dst ${tz.dst}" />
-                  <arg value="africa" />
-                  <arg value="antarctica" />
-                  <arg value="asia" />
-                  <arg value="australasia" />
-                  <arg value="europe" />
-                  <arg value="northamerica" />
-                  <arg value="southamerica" />
-                  <arg value="pacificnew" />
-                  <arg value="etcetera" />
-                  <arg value="backward" />
-                  <arg value="systemv" />
-                </java>
-              </target>
-            </configuration>
             <goals>
-              <goal>run</goal>
+              <goal>java</goal>
             </goals>
           </execution>
         </executions>
+        <configuration>
+          <mainClass>org.joda.time.tz.ZoneInfoCompiler</mainClass>
+          <classpathScope>compile</classpathScope>
+          <verbose>true</verbose>
+          <systemProperties>
+            <systemProperty>
+              <key>org.joda.time.DateTimeZone.Provider</key>
+              <value>org.joda.time.tz.UTCProvider</value>
+            </systemProperty>
+          </systemProperties>
+          <arguments>
+            <argument>-src</argument>
+            <argument>${pom.build.sourceDirectory}/org/joda/time/tz/src</argument>
+            <argument>-dst</argument>
+            <argument>${pom.build.outputDirectory}/org/joda/time/tz/data</argument>
+            <argument>africa</argument>
+            <argument>antarctica</argument>
+            <argument>asia</argument>
+            <argument>australasia</argument>
+            <argument>europe</argument>
+            <argument>northamerica</argument>
+            <argument>southamerica</argument>
+            <argument>pacificnew</argument>
+            <argument>etcetera</argument>
+            <argument>backward</argument>
+            <argument>systemv</argument>
+          </arguments>
+        </configuration>
       </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
diff --git a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
index 08a77bc0b..6efe07166 100644
--- a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
+++ b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2010 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -374,7 +374,9 @@ public ZoneInfoCompiler() {
 
         if (outputDir != null) {
             if (!outputDir.exists()) {
-                throw new IOException("Destination directory doesn't exist: " + outputDir);
+                if (!outputDir.mkdirs()) {
+                    throw new IOException("Destination directory doesn't exist and cannot be created: " + outputDir);
+                }
             }
             if (!outputDir.isDirectory()) {
                 throw new IOException("Destination is not a directory: " + outputDir);

From 7a847c21d6d2c622ea75b3136f4caa1919850220 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 7 Jan 2013 11:32:22 +0000
Subject: [PATCH 34/52] Remove ant build

---
 RELEASE-NOTES.txt |   3 +
 build.xml         | 473 ----------------------------------------------
 2 files changed, 3 insertions(+), 473 deletions(-)
 delete mode 100644 build.xml

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 0bd96eb69..23ae233aa 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -39,6 +39,9 @@ Enhancements since 2.1
 
 Compatibility with 2.1
 ----------------------
+Build system - No
+ - Ant build removed. Build only on Maven now.
+
 Binary compatible - Yes
 
 Source compatible - Yes
diff --git a/build.xml b/build.xml
deleted file mode 100644
index 7ea0ad10d..000000000
--- a/build.xml
+++ /dev/null
@@ -1,473 +0,0 @@
-<project name="joda-time" default="jar" basedir=".">
-
-<!-- Joda-time ANT script -->
-<!-- Based on scripts from Apache Jakarta Commons and elsewhere -->
-
-<!-- This is the recommended way to build Joda-Time. -->
-<!-- Maven is only intended for building the website. -->
-
-<!-- This ant file will download junit-3.8.1.jar to the lib subdirectory -->
-<!-- automatically if it does not find it there already. To change this -->
-<!-- behaviour, override the junit.jar property in build.properties. -->
-
-<!-- ========== Properties ================================================ -->
-
-  <property file="build.properties"/>
-
-<!-- ========== Component Declarations ==================================== -->
-
-
-  <!-- The name of this component -->
-  <property name="component.name"          value="joda-time"/>
-
-  <!-- The primary package name of this component -->
-  <property name="component.package"       value="org.joda.time"/>
-
-  <!-- The title of this component -->
-  <property name="component.title"         value="Joda date and time"/>
-
-  <!-- The current version number of this component -->
-  <property name="component.version"       value="2.1"/>
-  <property name="previous.version"        value="2.0"/>
-
-  <!-- The current version number of this component -->
-  <property name="component.fullname"      value="${component.name}-${component.version}"/>
-  
-  <!-- The directory of source files -->
-  <property name="xdocs"                   value="xdocs"/>
-
-  <!-- Dependencies -->
-  <property name="lib"                     value="lib"/>
-  <property name="junit.jar"               value="${lib}/junit-3.8.2.jar"/>
-  <property name="jodaconvert.jar"         value="${lib}/joda-convert-1.2.jar"/>
-  <property name="jodaprevious.jar"        value="${lib}/joda-time-${previous.version}.jar"/>
-
-  <!-- The directory of source files -->
-  <property name="source"                  value="src"/>
-  <property name="source.home"             value="${source}/main/java"/>
-  <property name="source.tz"               value="${source.home}/org/joda/time/tz/src"/>
-  <property name="conf.home"               value="${source}/conf"/>
-  <property name="test.home"               value="${source}/test/java"/>
-
-  <!-- The base directory for example sources -->
-  <property name="example.home"            value="src/example"/>
-
-  <!-- The base directory for compilation targets -->
-  <property name="build"                   value="build"/>
-  <property name="build.conf"              value="${build}/conf"/>
-  <property name="build.classes"           value="${build}/classes"/>
-  <property name="build.tz"                value="${build.classes}/org/joda/time/tz/data"/>
-  <property name="build.tests"             value="${build}/tests"/>
-  <property name="build.docs"              value="${build}/docs"/>
-  <property name="build.sources"           value="${build}/sources"/>
-  <property name="build.javadoc"           value="${build}/javadoc"/>
-  <property name="build.dist"              value="${build}/dist"/>
-  <property name="build.fullname"          value="${build}/${component.fullname}"/>
-  <property name="build.dist.fullname"     value="${build.dist}/${component.fullname}"/>
-  <property name="build.dist.src.fullname" value="${build.dist.fullname}-src"/>
-  <property name="build.dist.bundle"       value="${build.dist.fullname}-bundle"/>
-
-<!-- ========== Compiler Defaults ========================================= -->
-
-  <!-- Should Java compilations set the 'debug' compiler option? -->
-  <property name="compile.debug"           value="true"/>
-  <property name="compile.debuglevel"      value="lines,source"/>
-
-  <!-- Should Java compilations set the 'deprecation' compiler option? -->
-  <property name="compile.deprecation"     value="false"/>
-
-  <!-- Should Java compilations set the 'optimize' compiler option? -->
-  <property name="compile.optimize"        value="true"/>
-
-  <!-- Construct compile classpath -->
-  <path id="compile.classpath">
-    <pathelement location="${build.classes}"/>
-    <pathelement location="${jodaconvert.jar}"/>
-  </path>
-
-
-<!-- ========== Test Execution Defaults =================================== -->
-
-  <!-- Construct unit test classpath -->
-  <path id="test.classpath">
-    <pathelement location="${build.classes}"/>
-    <pathelement location="${build.tests}"/>
-    <pathelement location="${junit.jar}"/>
-    <pathelement location="${jodaconvert.jar}"/>
-  </path>
-
-  <!-- Should all tests fail if one does? -->
-  <property name="test.failonerror"        value="true"/>
-
-  <!-- The test runner to execute -->
-  <property name="test.runner"             value="junit.textui.TestRunner"/>
-
-
-<!-- ====================================================================== -->
-<!-- ========== Executable Targets ======================================== -->
-<!-- ====================================================================== -->
-
-  <target name="clean"
-          description="Clean build and distribution directories">
-    <delete dir="${build}"/>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="init"
-          description="Initialize and evaluate conditionals">
-    <echo message="-------- ${component.name} ${component.version} --------"/>
-    <filter token="name"                  value="${component.name}"/>
-    <filter token="package"               value="${component.package}"/>
-    <filter token="version"               value="${component.version}"/>
-    <available property="junit.ant" classname="junit.framework.Test"/>
-    <available property="junit.present" file="${junit.jar}"/>
-    <available property="jodaconvert.present" file="${jodaconvert.jar}"/>
-    <available property="jodaprevious.present" file="${jodaprevious.jar}"/>
-    <uptodate property="tz.build.notneeded" targetfile="${build.tz}/ZoneInfoMap" >
-      <srcfiles dir= "${source.tz}" includes="**/*.*"/>
-    </uptodate>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="getjunit" unless="junit.present">
-    <echo message="Getting junit from http://repo2.maven.org/maven2/junit/junit/3.8.2"/>
-    <setproxy />
-    <mkdir dir="${lib}"/>
-    <get dest="${junit.jar}" usetimestamp="true" ignoreerrors="true" src="http://repo2.maven.org/maven2/junit/junit/3.8.2/junit-3.8.2.jar" />
-  </target>
-  <target name="getjodaconvert" unless="jodaconvert.present">
-    <echo message="Getting joda-convert from http://repo2.maven.org/maven2/org/joda/joda-convert/1.2"/>
-    <setproxy />
-    <mkdir dir="${lib}"/>
-    <get dest="${jodaconvert.jar}" usetimestamp="true" ignoreerrors="true" src="http://repo2.maven.org/maven2/org/joda/joda-convert/1.2/joda-convert-1.2.jar" />
-  </target>
-  <target name="getjodaprevious" unless="jodaprevious.present">
-    <echo message="Getting joda-convert from http://repo2.maven.org/maven2/joda-time/joda-time/${previous.version}"/>
-    <setproxy />
-    <mkdir dir="${lib}"/>
-    <get dest="${jodaprevious.jar}" usetimestamp="true" ignoreerrors="true" src="http://repo2.maven.org/maven2/joda-time/joda-time/${previous.version}/joda-time-${previous.version}.jar" />
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="installjunit" unless="junit.ant">
-    <echo message="Installing junit in ${ant.home}/lib"/>
-  	<copy file="${junit.jar}" todir="${ant.home}/lib" />
-    <echo message="***************************************************************"/>
-    <echo message="*  A copy of junit has been installed in your ant directory   *"/>
-    <echo message="*                                                             *"/>
-    <echo message="* You will need to restart the ant build to pickup the change *"/>
-    <echo message="***************************************************************"/>
-  	<fail message="Please restart ant"/>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="prepare" depends="init,getjunit,installjunit,getjodaconvert"
-          description="Prepare build directory">
-    <mkdir dir="${build}"/>
-    <mkdir dir="${build.classes}"/>
-    <mkdir dir="${build.conf}"/>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="static" depends="prepare"
-          description="Copy static files to build directory">
-    <tstamp/>
-    <copy todir="${build.conf}" filtering="on">
-      <fileset dir="${conf.home}" includes="*.MF"/>
-    </copy>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="compile" depends="compile.main,compile.zoneinfo"
-          description="Compile shareable components">
-  </target>
-          
-          
-  <target name="compile.main" depends="static"
-          description="Compile main datetime classes">
-    <javac  srcdir="${source.home}"
-           destdir="${build.classes}"
-             debug="${compile.debug}"
-        debuglevel="${compile.debuglevel}"
-       deprecation="${compile.deprecation}"
-          optimize="${compile.optimize}"
-    	    source="1.5" target="1.5" includeantruntime="false">
-      <classpath refid="compile.classpath"/>
-    </javac>
-    <copy todir="${build.classes}">
-      <fileset dir="${source.home}" includes="**/*.properties"/>
-    </copy>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="compile.zoneinfo"
-          depends="compile.main"
-          description="Compile timezone data files"
-          unless="tz.build.notneeded">
-    <!-- Invoke the newly built ZoneInfoCompiler to compile the zoneinfo data files -->
-    <mkdir dir="${build.tz}" />
-    <java classname="org.joda.time.tz.ZoneInfoCompiler"
-          fork="true"
-          failonerror="true">
-      <classpath path="${build.classes}" />
-      <!-- Override default provider since data directory doesn't exist yet -->
-      <sysproperty key="org.joda.time.DateTimeZone.Provider"
-                   value="org.joda.time.tz.UTCProvider" />
-      <!-- Specify source and destination directories -->
-      <arg line="-src ${source.tz} -dst ${build.tz}" />
-      <!-- Specify all the data files to compile -->
-      <arg value="africa" />
-      <arg value="antarctica" />
-      <arg value="asia" />
-      <arg value="australasia" />
-      <arg value="europe" />
-      <arg value="northamerica" />
-      <arg value="southamerica" />
-      <arg value="pacificnew" />
-      <arg value="etcetera" />
-      <arg value="backward" />
-      <arg value="systemv" />
-    </java>
-  </target>
-  
-<!-- ====================================================================== -->
-
-  <target name="compile.tests" depends="compile"
-          description="Compile unit test cases">
-    <mkdir dir="${build.tests}"/>
-    <javac  srcdir="${test.home}"
-           destdir="${build.tests}"
-             debug="${compile.debug}"
-       deprecation="${compile.deprecation}"
-          optimize="${compile.optimize}" includeantruntime="false">
-      <classpath refid="test.classpath"/>
-    </javac>
-    <copy    todir="${build.tests}" filtering="on">
-      <fileset dir="${test.home}" excludes="**/*.java"/>
-    </copy>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="all" depends="clean,compile"
-          description="Clean and compile all components"/>
-
-<!-- ====================================================================== -->
-
-  <target name="javadoc" depends="compile"
-          description="Create component Javadoc documentation">
-    <mkdir      dir="${build.docs}"/>
-    <javadoc sourcepath="${source.home}"
-                destdir="${build.docs}"
-           packagenames="org.joda.time.*"
-                 author="true"
-                private="false"
-                package="false"
-                version="true"
-                    use="yes"
-             splitindex="yes"
-               doctitle="&lt;h1&gt;${component.title}&lt;/h1&gt;"
-            windowtitle="${component.title} (Version ${component.version})"
-                 bottom="Copyright (c) 2001-2006 - Joda.org"
-               Overview="${source.home}/org/joda/time/overview.html">
-      <classpath refid="compile.classpath"/>
-      <group title="User Packages" packages="org.joda.time:org.joda.time.format:org.joda.time.chrono">
-      </group>
-      <group title="Implementation Packages" packages="org.joda.time.base:org.joda.time.convert:org.joda.time.field:org.joda.time.tz">
-      </group>
-    </javadoc>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="jar" depends="compile"
-          description="Create jar">
-    <mkdir      dir="${build.classes}/META-INF"/>
-    <copy      file="LICENSE.txt"
-             tofile="${build.classes}/META-INF/LICENSE.txt"/>
-    <copy      file="NOTICE.txt"
-             tofile="${build.classes}/META-INF/NOTICE.txt"/>
-    <jar    jarfile="${build.fullname}.jar"
-            basedir="${build.classes}"
-           manifest="${build.conf}/MANIFEST.MF"/>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="javadoc.jar">
-    <mkdir      dir="${build.javadoc}"/>
-    <copy     todir="${build.javadoc}">
-  	  <fileset dir="${build.docs}" includes="**/*" />
-  	</copy>
-    <mkdir      dir="${build.javadoc}/META-INF"/>
-    <copy      file="LICENSE.txt"
-             tofile="${build.javadoc}/META-INF/LICENSE.txt"/>
-    <copy      file="NOTICE.txt"
-             tofile="${build.javadoc}/META-INF/NOTICE.txt"/>
-    <jar    jarfile="${build.fullname}-javadoc.jar"
-            basedir="${build.javadoc}" />
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="sources.jar">
-    <mkdir      dir="${build.sources}"/>
-    <copy     todir="${build.sources}">
-  	  <fileset dir="${source.home}" includes="**/*.java" />
-  	</copy>
-    <mkdir      dir="${build.sources}/META-INF"/>
-    <copy      file="LICENSE.txt"
-             tofile="${build.sources}/META-INF/LICENSE.txt"/>
-    <copy      file="NOTICE.txt"
-             tofile="${build.sources}/META-INF/NOTICE.txt"/>
-    <jar    jarfile="${build.fullname}-sources.jar"
-            basedir="${build.sources}" />
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="dist" depends="compile,jar,test.jar,javadoc,javadoc.jar,sources.jar"
-          description="Create binary distribution">
-    
-	<!-- binary -->
-    <delete     dir="${build.dist.fullname}"/>
-    <mkdir      dir="${build.dist.fullname}"/>
-    <copy      file="LICENSE.txt" todir="${build.dist.fullname}"/>
-    <copy      file="NOTICE.txt" todir="${build.dist.fullname}"/>
-    <copy      file="RELEASE-NOTES.txt" todir="${build.dist.fullname}"/>
-    <copy      file="${build.fullname}.jar"
-              todir="${build.dist.fullname}"/>
-    <copy      file="${build.fullname}-sources.jar"
-              todir="${build.dist.fullname}"/>
-    <copy      file="${build.fullname}-javadoc.jar"
-              todir="${build.dist.fullname}"/>
-    
-	<fixcrlf srcdir="${build.dist.fullname}" eol="lf" includes="*.txt"/>
-	<tar   destfile="${build.fullname}.tar" basedir="${build.dist}"/>
-	<gzip   zipfile="${build.fullname}.tar.gz" src="${build.fullname}.tar"/>
-	<delete    file="${build.fullname}.tar"/>
-	<fixcrlf srcdir="${build.dist.fullname}" eol="crlf" includes="*.txt"/>
-	<zip   destfile="${build.fullname}.zip" basedir="${build.dist}"/>
-    <delete     dir="${build.dist.fullname}"/>
-	
-	<!-- source -->
-    <delete     dir="${build.dist.src.fullname}"/>
-    <mkdir      dir="${build.dist.src.fullname}"/>
-    <copy      file="LICENSE.txt" todir="${build.dist.src.fullname}"/>
-    <copy      file="NOTICE.txt" todir="${build.dist.src.fullname}"/>
-    <copy      file="RELEASE-NOTES.txt" todir="${build.dist.src.fullname}"/>
-    <copy      file="${build.fullname}.jar"
-              todir="${build.dist.src.fullname}"/>
-    <copy     todir="${build.dist.src.fullname}">
-      <fileset  dir="." includes="${source}/**/*" excludes="CVS/**/*"/>
-    </copy>
-    <copy     todir="${build.dist.src.fullname}">
-      <fileset  dir="." includes="${xdocs}/**/*" excludes="CVS/**/*"/>
-    </copy>
-	<delete     dir="${build.dist.src.fullname}/src/tzdata"/>
-    <copy      file="build.xml" todir="${build.dist.src.fullname}"/>
-    <copy      file="pom.xml" todir="${build.dist.src.fullname}"/>
-    <copy      file="checkstyle.xml" todir="${build.dist.src.fullname}"/>
-    <copy      file="ToDo.txt" todir="${build.dist.src.fullname}"/>
-	
-	<fixcrlf srcdir="${build.dist.src.fullname}" eol="lf" includes="*.txt,*.properties,*.xml"/>
-	<tar   destfile="${build.fullname}-src.tar" basedir="${build.dist}"/>
-	<gzip   zipfile="${build.fullname}-src.tar.gz" src="${build.fullname}-src.tar"/>
-	<delete    file="${build.fullname}-src.tar"/>
-	<fixcrlf srcdir="${build.dist.src.fullname}" eol="crlf" includes="*.txt,*.properties,*.xml"/>
-	<zip   destfile="${build.fullname}-src.zip" basedir="${build.dist}"/>
-    <delete     dir="${build.dist.src.fullname}"/>
-  	
-	<!-- bundle -->
-    <delete     dir="${build.dist.bundle}"/>
-    <mkdir      dir="${build.dist.bundle}"/>
-    <copy      file="LICENSE.txt" todir="${build.dist.bundle}"/>
-    <copy      file="NOTICE.txt" todir="${build.dist.bundle}"/>
-    <copy      file="pom.xml" todir="${build.dist.bundle}"/>
-    <copy      file="${build.fullname}.jar"
-              todir="${build.dist.bundle}"/>
-    <copy      file="${build.fullname}-sources.jar"
-              todir="${build.dist.bundle}"/>
-	<copy      file="${build.fullname}-javadoc.jar"
-	          todir="${build.dist.bundle}"/>
-    
-	<fixcrlf srcdir="${build.dist.bundle}" eol="crlf" includes="*.txt"/>
-	<jar    jarfile="${build.fullname}-bundle.jar" basedir="${build.dist.bundle}"/>
-    <delete     dir="${build.dist.bundle}"/>
-	
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="test"  depends="compile.tests, test.time"
-          description="Run all unit test cases">
-  </target>
-
-  <target name="test.time" depends="compile.tests,compile.zoneinfo">
-    <echo message="Running time tests ..."/>
-    <junit printsummary="yes" haltonfailure="yes">
-      <formatter type="plain" usefile="false" />
-      <classpath>
-        <pathelement location="${build.classes}"/>
-        <pathelement location="${build.tests}"/>
-        <pathelement location="${build.tz}"/>
-        <pathelement location="${jodaconvert.jar}"/>
-        <pathelement path="${java.class.path}"/>
-      </classpath>
-
-      <batchtest fork="yes">
-        <fileset dir="${test.home}">
-          <include name="**/TestAll.java"/>
-        </fileset>
-      </batchtest>
-    </junit>
-  </target>
-
-  <!-- don't depend on jar, so we can test jar built on another JDK version -->
-  <target name="test.jar" depends="compile.tests">
-    <echo message="Running time tests from jar ..."/>
-    <junit printsummary="yes" haltonfailure="yes">
-      <formatter type="plain" usefile="false" />
-      <classpath>
-        <pathelement location="${build.fullname}.jar"/>
-        <pathelement location="${build.tests}"/>
-        <pathelement location="${junit.jar}"/>
-        <pathelement location="${jodaconvert.jar}"/>
-        <pathelement path="${java.class.path}"/>
-      </classpath>
-
-      <batchtest fork="yes">
-        <fileset dir="${test.home}">
-          <include name="**/TestAll.java"/>
-        </fileset>
-      </batchtest>
-    </junit>
-  </target>
-
-  <target name="clirr" depends="getjodaprevious,jar" description="clirr binary compatibility">
-  	<echo message="Clirr must be manually downloaded to ${lib}/clirr-core-0.6-uber.jar"></echo>
-    <taskdef classpath="${lib}/clirr-core-0.6-uber.jar" resource="clirrtask.properties"/>
-    <clirr>
-      <origfiles dir="." includes="${jodaprevious.jar}"/>
-      <newfiles dir="." includes="${build.fullname}.jar"/>
-      <formatter type="xml" outfile="build/clirr.xml" />
-    </clirr>
-  </target>
-
-  <!--property name="emma.dir" value="${lib}" />
-  <path id="emma.lib" >
-    <pathelement location="${emma.dir}/emma.jar" />
-    <pathelement location="${emma.dir}/emma_ant.jar" />
-  </path>
-  <target name="emma" description="turns on EMMA's on-the-fly instrumentation mode" >
-  	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />
-    <property name="emma.enabled" value="true" />
-  </target-->
-</project>

From 2fcc704a0e7d863f19b5b14fb412c14f3c063dd4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 7 Jan 2013 11:53:17 +0000
Subject: [PATCH 35/52] Add IllegalInstantException

Better handle DST gaps
---
 RELEASE-NOTES.txt                             |  4 ++
 src/main/java/org/joda/time/DateTimeZone.java | 10 ++-
 .../joda/time/IllegalInstantException.java    | 72 +++++++++++++++++++
 .../org/joda/time/chrono/ZonedChronology.java | 33 ++++-----
 .../time/format/DateTimeParserBucket.java     |  8 +--
 .../joda/time/TestDateTimeZoneCutover.java    | 14 ++--
 6 files changed, 106 insertions(+), 35 deletions(-)
 create mode 100644 src/main/java/org/joda/time/IllegalInstantException.java

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 23ae233aa..cc4ffec7f 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -36,6 +36,10 @@ Enhancements since 2.1
   This is enabled for formatter patterns of "z" (and "zz" or "zzz").
   The builder continues to offer a better way of manually managing this.
 
+- Add new exception, IllegalInstantException
+  This allows applications to better capture problems with daylight savings gaps
+  The exception is a subclass of IllegalArgumentException, so existing logic will still work
+
 
 Compatibility with 2.1
 ----------------------
diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 71814d368..f62ab9c07 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2012 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -966,7 +966,7 @@ public long convertLocalToUTC(long instantLocal, boolean strict, long originalIn
      * @param strict  whether the conversion should reject non-existent local times
      * @return the UTC instant with the same local time, 
      * @throws ArithmeticException if the result overflows a long
-     * @throws IllegalArgumentException if the zone has no equivalent local time
+     * @throws IllegalInstantException if the zone has no equivalent local time
      * @since 1.5
      */
     public long convertLocalToUTC(long instantLocal, boolean strict) {
@@ -993,9 +993,7 @@ public long convertLocalToUTC(long instantLocal, boolean strict) {
                     // yes we are in the DST gap
                     if (strict) {
                         // DST gap is not acceptable
-                        throw new IllegalArgumentException("Illegal instant due to time zone offset transition: " +
-                                DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(instantLocal)) +
-                                " (" + getID() + ")");
+                        throw new IllegalInstantException(instantLocal, getID());
                     } else {
                         // DST gap is acceptable, but for the Western hemisphere
                         // the offset is wrong and will result in local times
@@ -1148,7 +1146,7 @@ public boolean isLocalDateTimeGap(LocalDateTime localDateTime) {
         try {
             localDateTime.toDateTime(this);
             return false;
-        } catch (IllegalArgumentException ex) {
+        } catch (IllegalInstantException ex) {
             return true;
         }
     }
diff --git a/src/main/java/org/joda/time/IllegalInstantException.java b/src/main/java/org/joda/time/IllegalInstantException.java
new file mode 100644
index 000000000..576ebb6f3
--- /dev/null
+++ b/src/main/java/org/joda/time/IllegalInstantException.java
@@ -0,0 +1,72 @@
+/*
+ *  Copyright 2001-2013 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import org.joda.time.format.DateTimeFormat;
+
+/**
+ * Exception thrown when attempting to create an instant or date-time that cannot exist.
+ * <p>
+ * Classes like {@code DateTime} only store valid date-times.
+ * One of the cases where validity is important is handling daylight savings time (DST).
+ * In many places DST is used, where the local clock moves forward by an hour in spring and back by an hour in autumn/fall.
+ * This means that in spring, there is a "gap" where a local time does not exist.
+ * <p>
+ * This exception refers to this gap, and it means that your application tried to create
+ * a date-time inside the gap - a time that did not exist.
+ * Since Joda-Time objects must be valid, this is not allowed.
+ * <p>
+ * Possible solutions may be as follows:<br />
+ * Use <code>LocalDateTime</code>, as all local date-times are valid.<br />
+ * When converting a <code>LocalDate</code> to a <code>DateTime</code>, then use <code>toDateTimeAsStartOfDay()</code>
+ * as this handles and manages any gaps.<br />
+ * When parsing, use <code>parseLocalDateTime()</code> if the string being parsed has no time-zone.
+ *
+ * @author Stephen Colebourne
+ * @since 2.2
+ */
+public class IllegalInstantException extends IllegalArgumentException {
+    
+    /** Serialization lock. */
+    private static final long serialVersionUID = 2858712538216L;
+
+
+    /**
+     * Constructor.
+     * 
+     * @param message  the message
+     */
+    public IllegalInstantException(String message) {
+        super(message);
+    }
+
+    /**
+     * Constructor.
+     * 
+     * @param instantLocal  the local instant
+     * @param zoneId  the time-zone ID, may be null
+     */
+    public IllegalInstantException(long instantLocal, String zoneId) {
+        super(createMessage(instantLocal, zoneId));
+    }
+
+    private static String createMessage(long instantLocal, String zoneId) {
+        String localDateTime = DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(instantLocal));
+        String zone = (zoneId != null ? " (" + zoneId + ")" : "");
+        return "Illegal instant due to time zone offset transition (daylight savings time 'gap'): " + localDateTime + zone;
+    }
+
+}
diff --git a/src/main/java/org/joda/time/chrono/ZonedChronology.java b/src/main/java/org/joda/time/chrono/ZonedChronology.java
index f0f022252..45c448c57 100644
--- a/src/main/java/org/joda/time/chrono/ZonedChronology.java
+++ b/src/main/java/org/joda/time/chrono/ZonedChronology.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -24,11 +24,10 @@
 import org.joda.time.DateTimeZone;
 import org.joda.time.DurationField;
 import org.joda.time.IllegalFieldValueException;
-import org.joda.time.Instant;
+import org.joda.time.IllegalInstantException;
 import org.joda.time.ReadablePartial;
 import org.joda.time.field.BaseDateTimeField;
 import org.joda.time.field.BaseDurationField;
-import org.joda.time.format.DateTimeFormat;
 
 /**
  * Wraps another Chronology to add support for time zones.
@@ -132,19 +131,17 @@ public long getDateTimeMillis(long instant,
     }
 
     /**
-     * @param instant instant from 1970-01-01T00:00:00 local time
-     * @return instant from 1970-01-01T00:00:00Z
+     * @param localInstant  the instant from 1970-01-01T00:00:00 local time
+     * @return the instant from 1970-01-01T00:00:00Z
      */
-    private long localToUTC(long instant) {
+    private long localToUTC(long localInstant) {
         DateTimeZone zone = getZone();
-        int offset = zone.getOffsetFromLocal(instant);
-        instant -= offset;
-        if (offset != zone.getOffset(instant)) {
-            throw new IllegalArgumentException
-                ("Illegal instant due to time zone offset transition: " +
-                    DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(instant)));
-        }
-        return instant;
+        int offset = zone.getOffsetFromLocal(localInstant);
+        localInstant -= offset;
+        if (offset != zone.getOffset(localInstant)) {
+            throw new IllegalInstantException(localInstant, zone.getID());
+        }
+        return localInstant;
     }
 
     protected void assemble(Fields fields) {
@@ -466,10 +463,10 @@ public long set(long instant, int value) {
             localInstant = iField.set(localInstant, value);
             long result = iZone.convertLocalToUTC(localInstant, false, instant);
             if (get(result) != value) {
-                throw new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),
-                    "Illegal instant due to time zone offset transition: " +
-                    DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(localInstant)) +
-                    " (" + iZone.getID() + ")");
+                IllegalInstantException cause = new IllegalInstantException(localInstant,  iZone.getID());
+                IllegalFieldValueException ex = new IllegalFieldValueException(iField.getType(), Integer.valueOf(value), cause.getMessage());
+                ex.initCause(cause);
+                throw ex;
             }
             return result;
         }
diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java
index 4c5f5b47b..93dfaa78a 100644
--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java
+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2011 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -26,6 +26,7 @@
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
 import org.joda.time.IllegalFieldValueException;
+import org.joda.time.IllegalInstantException;
 
 /**
  * DateTimeParserBucket is an advanced class, intended mainly for parser
@@ -382,12 +383,11 @@ public long computeMillis(boolean resetFields, String text) {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
-                String message =
-                    "Illegal instant due to time zone offset transition (" + iZone + ')';
+                String message = "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
-                throw new IllegalArgumentException(message);
+                throw new IllegalInstantException(message);
             }
         }
         
diff --git a/src/test/java/org/joda/time/TestDateTimeZoneCutover.java b/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
index d86b68e0b..394aa71cf 100644
--- a/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
+++ b/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2012 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -224,7 +224,7 @@ public void test_LocalDate_toDateMidnight_Gaza() {
         try {
             date.toDateMidnight(MOCK_GAZA);
             fail();
-        } catch (IllegalArgumentException ex) {
+        } catch (IllegalInstantException ex) {
             assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition"));
         }
     }
@@ -233,7 +233,7 @@ public void test_DateTime_new_Gaza() {
         try {
             new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_GAZA);
             fail();
-        } catch (IllegalArgumentException ex) {
+        } catch (IllegalInstantException ex) {
             assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0);
         }
     }
@@ -253,7 +253,7 @@ public void test_DateTime_parse_Gaza() {
         try {
             new DateTime("2007-04-01T00:00", MOCK_GAZA);
             fail();
-        } catch (IllegalArgumentException ex) {
+        } catch (IllegalInstantException ex) {
             assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0);
         }
     }
@@ -440,7 +440,7 @@ public void test_LocalDate_toDateMidnight_Turk() {
         try {
             date.toDateMidnight(MOCK_TURK);
             fail();
-        } catch (IllegalArgumentException ex) {
+        } catch (IllegalInstantException ex) {
             assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition"));
         }
     }
@@ -449,7 +449,7 @@ public void test_DateTime_new_Turk() {
         try {
             new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_TURK);
             fail();
-        } catch (IllegalArgumentException ex) {
+        } catch (IllegalInstantException ex) {
             assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0);
         }
     }
@@ -468,7 +468,7 @@ public void test_DateTime_parse_Turk() {
         try {
             new DateTime("2007-04-01T00:00", MOCK_TURK);
             fail();
-        } catch (IllegalArgumentException ex) {
+        } catch (IllegalInstantException ex) {
             assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0);
         }
     }

From 4e511f5a6fab8df41f1e8cdda6c583fb4ab4c0c6 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 7 Jan 2013 12:43:29 +0000
Subject: [PATCH 36/52] Fix withMaximumValue()/withMinimumValue() to handle DST
 gap

https://sourceforge.net/p/joda-time/bugs/159/
---
 RELEASE-NOTES.txt                             |  4 +++
 src/main/java/org/joda/time/DateTime.java     | 30 +++++++++++++++++--
 .../joda/time/IllegalInstantException.java    | 17 +++++++++++
 .../joda/time/TestDateTime_Properties.java    | 16 +++++++++-
 4 files changed, 63 insertions(+), 4 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index cc4ffec7f..118e33391 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -68,6 +68,10 @@ None
 
 Bug fixes since 2.1
 -------------------
+- DateTime.millisOfDay().withMaximumValue()/withMinimumValue() [159]
+  Now handle daylight savings gaps
+  https://sourceforge.net/p/joda-time/bugs/159/
+
 - MonthDay add/subtract [3528941]
   Addition and subtraction in MonthDay was fixed.
   It previously didn't work when the start value was 29th February.
diff --git a/src/main/java/org/joda/time/DateTime.java b/src/main/java/org/joda/time/DateTime.java
index 4595faec8..376853b9f 100644
--- a/src/main/java/org/joda/time/DateTime.java
+++ b/src/main/java/org/joda/time/DateTime.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2011 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -2218,13 +2218,25 @@ public DateTime setCopy(String text) {
          * may need to call {@link DateTime#withLaterOffsetAtOverlap()} on the result
          * to force the later time during a DST overlap if desired.
          * <p>
+         * From v2.2, this method handles a daylight svaings time gap, setting the
+         * time to the last instant before the gap.
+         * <p>
          * The DateTime attached to this property is unchanged by this call.
          *
          * @return a copy of the DateTime with this field set to its maximum
          * @since 1.2
          */
         public DateTime withMaximumValue() {
-            return setCopy(getMaximumValue());
+            try {
+                return setCopy(getMaximumValue());
+            } catch (RuntimeException ex) {
+                if (IllegalInstantException.isIllegalInstant(ex)) {
+                    // adding MILLIS_PER_DAY is not perfect, but will work in almost all situations
+                    long beforeGap = getChronology().getZone().previousTransition(getMillis() + DateTimeConstants.MILLIS_PER_DAY);
+                    return new DateTime(beforeGap, getChronology());
+                }
+                throw ex;
+            }
         }
         
         /**
@@ -2235,13 +2247,25 @@ public DateTime withMaximumValue() {
          * may need to call {@link DateTime#withEarlierOffsetAtOverlap()} on the result
          * to force the earlier time during a DST overlap if desired.
          * <p>
+         * From v2.2, this method handles a daylight svaings time gap, setting the
+         * time to the first instant after the gap.
+         * <p>
          * The DateTime attached to this property is unchanged by this call.
          *
          * @return a copy of the DateTime with this field set to its minimum
          * @since 1.2
          */
         public DateTime withMinimumValue() {
-            return setCopy(getMinimumValue());
+            try {
+                return setCopy(getMinimumValue());
+            } catch (RuntimeException ex) {
+                if (IllegalInstantException.isIllegalInstant(ex)) {
+                    // subtracting MILLIS_PER_DAY is not perfect, but will work in almost all situations
+                    long afterGap = getChronology().getZone().nextTransition(getMillis() - DateTimeConstants.MILLIS_PER_DAY);
+                    return new DateTime(afterGap, getChronology());
+                }
+                throw ex;
+            }
         }
         
         //-----------------------------------------------------------------------
diff --git a/src/main/java/org/joda/time/IllegalInstantException.java b/src/main/java/org/joda/time/IllegalInstantException.java
index 576ebb6f3..470cbe9e0 100644
--- a/src/main/java/org/joda/time/IllegalInstantException.java
+++ b/src/main/java/org/joda/time/IllegalInstantException.java
@@ -69,4 +69,21 @@ private static String createMessage(long instantLocal, String zoneId) {
         return "Illegal instant due to time zone offset transition (daylight savings time 'gap'): " + localDateTime + zone;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Checks if the exception is, or has a cause, of {@code IllegalInstantException}.
+     * 
+     * @param ex  the exception to check
+     * @return true if an {@code IllegalInstantException}
+     */
+    public static boolean isIllegalInstant(Throwable ex) {
+        if (ex instanceof IllegalInstantException) {
+            return true;
+        }
+        while (ex.getCause() != null && ex.getCause() != ex) {
+            return isIllegalInstant(ex.getCause());
+        }
+        return false;
+    }
+
 }
diff --git a/src/test/java/org/joda/time/TestDateTime_Properties.java b/src/test/java/org/joda/time/TestDateTime_Properties.java
index 584712967..d49062add 100644
--- a/src/test/java/org/joda/time/TestDateTime_Properties.java
+++ b/src/test/java/org/joda/time/TestDateTime_Properties.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -643,6 +643,13 @@ public void testPropertyWithMaximumValueDayOfMonth() {
         assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString());
     }
 
+    public void testPropertyWithMaximumValueMillisOfDayDSTGap() {
+        DateTimeZone paris = DateTimeZone.forID("Europe/Paris");
+        DateTime dt = new DateTime(1926, 4, 17, 18, 0, 0, 0, paris);  // DST gap 23:00 to 00:00
+        DateTime test = dt.millisOfDay().withMaximumValue();
+        assertEquals("1926-04-17T22:59:59.999Z", test.toString());
+    }
+
     public void testPropertyWithMinimumValueDayOfMonth() {
         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);
         DateTime copy = test.dayOfMonth().withMinimumValue();
@@ -650,6 +657,13 @@ public void testPropertyWithMinimumValueDayOfMonth() {
         assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString());
     }
 
+    public void testPropertyWithMinimumValueMillisOfDayDSTGap() {
+        DateTimeZone gaza = DateTimeZone.forID("Asia/Gaza");
+        DateTime dt = new DateTime(2001, 4, 20, 18, 0, 0, 0, gaza);  // DST gap 00:00 to 01:00
+        DateTime test = dt.millisOfDay().withMinimumValue();
+        assertEquals("2001-04-20T01:00:00.000+03:00", test.toString());
+    }
+
     public void testPropertyCompareToDayOfMonth() {
         DateTime test1 = new DateTime(TEST_TIME1);
         DateTime test2 = new DateTime(TEST_TIME2);

From da82913207f29f90da1af3ce788c7aedd8ddbd5d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 7 Jan 2013 13:03:53 +0000
Subject: [PATCH 37/52] Document and test constructor behavior

https://sourceforge.net/p/joda-time/bugs/154/
---
 src/main/java/org/joda/time/LocalDate.java        |  6 +++++-
 src/main/java/org/joda/time/LocalDateTime.java    |  6 +++++-
 .../joda/time/TestLocalDateTime_Constructors.java | 15 ++++++++++++++-
 .../org/joda/time/TestLocalDate_Constructors.java | 11 ++++++++++-
 4 files changed, 34 insertions(+), 4 deletions(-)

diff --git a/src/main/java/org/joda/time/LocalDate.java b/src/main/java/org/joda/time/LocalDate.java
index c86b9d736..af7e500c1 100644
--- a/src/main/java/org/joda/time/LocalDate.java
+++ b/src/main/java/org/joda/time/LocalDate.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2011 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -396,6 +396,10 @@ public LocalDate(Object instant, DateTimeZone zone) {
      * <p>
      * If the chronology is null, ISO in the default time zone is used.
      * Once the constructor is completed, the zone is no longer used.
+     * If the instant contains a chronology, it will be ignored.
+     * For example, passing a {@code LocalDate} and a different chronology
+     * will return a date with the year/month/day from the date applied
+     * unaltered to the specified chronology.
      * <p>
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
diff --git a/src/main/java/org/joda/time/LocalDateTime.java b/src/main/java/org/joda/time/LocalDateTime.java
index e75deca25..7a988d7ce 100644
--- a/src/main/java/org/joda/time/LocalDateTime.java
+++ b/src/main/java/org/joda/time/LocalDateTime.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2011 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -391,6 +391,10 @@ public LocalDateTime(Object instant, DateTimeZone zone) {
      * <p>
      * If the chronology is null, ISO in the default time zone is used.
      * Once the constructor is completed, the zone is no longer used.
+     * If the instant contains a chronology, it will be ignored.
+     * For example, passing a {@code LocalDate} and a different chronology
+     * will return a date with the year/month/day from the date applied
+     * unaltered to the specified chronology.
      * <p>
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
diff --git a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
index e00ce5dbf..55d492104 100644
--- a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
+++ b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -588,6 +588,19 @@ public void testConstructor_Object_Chronology() throws Throwable {
         assertEquals(0, test.getMillisOfSecond());
     }
 
+    public void testConstructor_Object_Chronology_crossChronology() throws Throwable {
+        LocalDateTime input = new LocalDateTime(1970, 4, 6, 12, 30, 0, 0, ISO_UTC);
+        LocalDateTime test = new LocalDateTime(input, BUDDHIST_UTC);
+        assertEquals(BUDDHIST_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12, test.getHourOfDay());
+        assertEquals(30, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
     public void testConstructor_Object_ChronologyMoscow() throws Throwable {
         LocalDateTime test = new LocalDateTime("1970-04-06T12:24:00", GREGORIAN_MOSCOW);
         assertEquals(GREGORIAN_UTC, test.getChronology());
diff --git a/src/test/java/org/joda/time/TestLocalDate_Constructors.java b/src/test/java/org/joda/time/TestLocalDate_Constructors.java
index ee5fa9d43..21b31996a 100644
--- a/src/test/java/org/joda/time/TestLocalDate_Constructors.java
+++ b/src/test/java/org/joda/time/TestLocalDate_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -482,6 +482,15 @@ public void testConstructor_Object_Chronology() throws Throwable {
         assertEquals(6, test.getDayOfMonth());
     }
 
+    public void testConstructor_Object_Chronology_crossChronology() throws Throwable {
+        LocalDate input = new LocalDate(1970, 4, 6, ISO_UTC);
+        LocalDate test = new LocalDate(input, BUDDHIST_UTC);
+        assertEquals(BUDDHIST_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
     public void testConstructor_nullObject_Chronology() throws Throwable {
         LocalDate test = new LocalDate((Object) null, GREGORIAN_PARIS);
         assertEquals(GREGORIAN_UTC, test.getChronology());

From cb28cb59711355f0b0f61e9eb81a9fcf377b277e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 16 Jan 2013 10:15:57 +0000
Subject: [PATCH 38/52] Javadoc fix to Years [169]

---
 RELEASE-NOTES.txt                      | 2 ++
 src/main/java/org/joda/time/Years.java | 4 ++--
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 118e33391..9a2462391 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -113,6 +113,8 @@ Bug fixes since 2.1
 
 - Javadoc fix to BaseChronology [3513326]
 
+- Javadoc fix to Years [169]
+
 - Javadoc clarify on formatter builder [mailing list email]
 
 - Fixed Spanish translation of day for periods - dia now has accented i
diff --git a/src/main/java/org/joda/time/Years.java b/src/main/java/org/joda/time/Years.java
index 8099ae26f..e7faa69dc 100644
--- a/src/main/java/org/joda/time/Years.java
+++ b/src/main/java/org/joda/time/Years.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2010 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * An immutable time period representing a number of years.
  * <p>
  * <code>Years</code> is an immutable period that can only store years.
- * It does not store years, days or hours for example. As such it is a
+ * It does not store months, days or hours for example. As such it is a
  * type-safe way of representing a number of years in an application.
  * <p>
  * The number of years is set in the constructor, and may be queried using

From da86724314ec8b7f12396aa35aa70e619cbc82fd Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 21 Feb 2013 10:57:49 +0000
Subject: [PATCH 39/52] Fix LocalTime Javadoc

---
 RELEASE-NOTES.txt                          | 2 ++
 src/main/java/org/joda/time/LocalTime.java | 2 +-
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 9a2462391..cf8be0f05 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -115,6 +115,8 @@ Bug fixes since 2.1
 
 - Javadoc fix to Years [169]
 
+- Javadoc fix to LocalTime [171]
+
 - Javadoc clarify on formatter builder [mailing list email]
 
 - Fixed Spanish translation of day for periods - dia now has accented i
diff --git a/src/main/java/org/joda/time/LocalTime.java b/src/main/java/org/joda/time/LocalTime.java
index 2e03ae60f..6c3c57778 100644
--- a/src/main/java/org/joda/time/LocalTime.java
+++ b/src/main/java/org/joda/time/LocalTime.java
@@ -1290,7 +1290,7 @@ public DateTime toDateTimeToday(DateTimeZone zone) {
 
     //-----------------------------------------------------------------------
     /**
-     * Output the time in ISO8601 format (HH:mm:ss.SSSZZ).
+     * Output the time in ISO8601 format (HH:mm:ss.SSS).
      * 
      * @return ISO8601 time formatted string.
      */

From b99b715061f2e333d6d2586e77d257807b9f6cd0 Mon Sep 17 00:00:00 2001
From: Martin Kneissl <m.kneissl@dasgip.de>
Date: Thu, 28 Feb 2013 16:13:19 +0100
Subject: [PATCH 40/52] Fix Duration conversion from String for negative
 millisecond durations.

---
 .../joda/time/convert/StringConverter.java    | 22 +++++++++++++------
 .../time/convert/TestStringConverter.java     | 13 +++++++++++
 2 files changed, 28 insertions(+), 7 deletions(-)

diff --git a/src/main/java/org/joda/time/convert/StringConverter.java b/src/main/java/org/joda/time/convert/StringConverter.java
index fdbf0d2ec..97415a653 100644
--- a/src/main/java/org/joda/time/convert/StringConverter.java
+++ b/src/main/java/org/joda/time/convert/StringConverter.java
@@ -112,11 +112,14 @@ public long getDurationMillis(Object object) {
         }
         str = str.substring(2, len - 1);
         int dot = -1;
+        boolean negative = false;
         for (int i = 0; i < str.length(); i++) {
-            if ((str.charAt(i) >= '0' && str.charAt(i) <= '9') ||
-                (i == 0 && str.charAt(0) == '-')) {
+            if (str.charAt(i) >= '0' && str.charAt(i) <= '9') {
                 // ok
-            } else if (i > 0 && str.charAt(i) == '.' && dot == -1) {
+            } else if (i == 0 && str.charAt(0) == '-') {
+            	// ok
+            	negative = true;
+            } else if (i > (negative ? 1 : 0) && str.charAt(i) == '.' && dot == -1) {
                 // ok
                 dot = i;
             } else {
@@ -124,18 +127,23 @@ public long getDurationMillis(Object object) {
             }
         }
         long millis = 0, seconds = 0;
+        int firstDigit = negative ? 1 : 0;
         if (dot > 0) {
-            seconds = Long.parseLong(str.substring(0, dot));
+            seconds = Long.parseLong(str.substring(firstDigit, dot));
             str = str.substring(dot + 1);
             if (str.length() != 3) {
                 str = (str + "000").substring(0, 3);
             }
             millis = Integer.parseInt(str);
-        } else {
+        } else if (negative) {
+        	seconds = Long.parseLong(str.substring(firstDigit, str.length()));
+        }
+        else {
             seconds = Long.parseLong(str);
         }
-        if (seconds < 0) {
-            return FieldUtils.safeAdd(FieldUtils.safeMultiply(seconds, 1000), -millis);
+        assert(seconds >= 0L);
+        if (negative) {
+            return FieldUtils.safeAdd(FieldUtils.safeMultiply(-seconds, 1000), -millis);
         } else {
             return FieldUtils.safeAdd(FieldUtils.safeMultiply(seconds, 1000), millis);
         }
diff --git a/src/test/java/org/joda/time/convert/TestStringConverter.java b/src/test/java/org/joda/time/convert/TestStringConverter.java
index af7f9cff9..826c1137a 100644
--- a/src/test/java/org/joda/time/convert/TestStringConverter.java
+++ b/src/test/java/org/joda/time/convert/TestStringConverter.java
@@ -302,6 +302,15 @@ public void testGetDurationMillis_Object1() throws Exception {
         millis = StringConverter.INSTANCE.getDurationMillis("pt-12.32s");
         assertEquals(-12320, millis);
         
+        millis = StringConverter.INSTANCE.getDurationMillis("pt-0.32s");
+        assertEquals(-320, millis);
+
+        millis = StringConverter.INSTANCE.getDurationMillis("pt-0.0s");
+        assertEquals(0, millis);
+
+        millis = StringConverter.INSTANCE.getDurationMillis("pt0.0s");
+        assertEquals(0, millis);
+
         millis = StringConverter.INSTANCE.getDurationMillis("pt12.3456s");
         assertEquals(12345, millis);
     }
@@ -339,6 +348,10 @@ public void testGetDurationMillis_Object2() throws Exception {
             StringConverter.INSTANCE.getDurationMillis("PT0-00S");
             fail();
         } catch (IllegalArgumentException ex) {}
+        try {
+            StringConverter.INSTANCE.getDurationMillis("PT-.001S");
+            fail();
+        } catch (IllegalArgumentException ex) {}
     }
 
     //-----------------------------------------------------------------------

From c8dd135b82e79f00c32fe829a11b002ad7009ad1 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Mar 2013 11:16:13 +0000
Subject: [PATCH 41/52] Fix patch and update project files (Duration string
 parsing)

---
 RELEASE-NOTES.txt                                        | 4 ++++
 pom.xml                                                  | 4 ++++
 src/main/java/org/joda/time/convert/StringConverter.java | 4 +---
 3 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index cf8be0f05..e2aa739b7 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -111,6 +111,10 @@ Bug fixes since 2.1
 - Fix TestReadableDurationConverter [3515086]
   Test case didn't work if deafult time zone was UTC
 
+- Fix Duration string parsing for small negative numbers
+  Values between 0 and -1 exclusive previously parsed incorrectly
+  https://github.com/JodaOrg/joda-time/pull/10
+
 - Javadoc fix to BaseChronology [3513326]
 
 - Javadoc fix to Years [169]
diff --git a/pom.xml b/pom.xml
index 0119700d9..eb0f31cc6 100644
--- a/pom.xml
+++ b/pom.xml
@@ -65,6 +65,10 @@
     <contributor>
       <name>Ashish Katyal</name>
     </contributor>
+    <contributor>
+      <name>Martin Kneissl</name>
+      <url>https://github.com/mkneissl</url>
+    </contributor>
     <contributor>
       <name>Kasper Laudrup</name>
     </contributor>
diff --git a/src/main/java/org/joda/time/convert/StringConverter.java b/src/main/java/org/joda/time/convert/StringConverter.java
index 97415a653..ea4553e56 100644
--- a/src/main/java/org/joda/time/convert/StringConverter.java
+++ b/src/main/java/org/joda/time/convert/StringConverter.java
@@ -137,11 +137,9 @@ public long getDurationMillis(Object object) {
             millis = Integer.parseInt(str);
         } else if (negative) {
         	seconds = Long.parseLong(str.substring(firstDigit, str.length()));
-        }
-        else {
+        } else {
             seconds = Long.parseLong(str);
         }
-        assert(seconds >= 0L);
         if (negative) {
             return FieldUtils.safeAdd(FieldUtils.safeMultiply(-seconds, 1000), -millis);
         } else {

From 979e9b461bbdd47436b9901d8771bcb54ccdb23c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Mar 2013 11:12:36 +0000
Subject: [PATCH 42/52] Add recent contributors

---
 pom.xml | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/pom.xml b/pom.xml
index eb0f31cc6..1eb684f92 100644
--- a/pom.xml
+++ b/pom.xml
@@ -33,6 +33,7 @@
         <role>Project Lead</role>
       </roles>
       <timezone>0</timezone>
+      <url>https://github.com/jodastephen</url>
     </developer>
     <developer>
       <id>broneill</id>
@@ -41,6 +42,7 @@
       <roles>
         <role>Senior Developer</role>
       </roles>
+      <url>https://github.com/broneill</url>
     </developer>
   </developers>
   <contributors>
@@ -52,6 +54,11 @@
     </contributor>
     <contributor>
       <name>Dave Brosius</name>
+      <url>https://github.com/mebigfatguy</url>
+    </contributor>
+    <contributor>
+      <name>Dan Cojocar</name>
+      <url>https://github.com/dancojocar</url>
     </contributor>
     <contributor>
       <name>Jeroen van Erp</name>
@@ -59,6 +66,9 @@
     <contributor>
       <name>Gwyn Evans</name>
     </contributor>
+    <contributor>
+      <name>John Fletcher</name>
+    </contributor>
     <contributor>
       <name>Sean Geoghegan</name>
     </contributor>
@@ -69,9 +79,17 @@
       <name>Martin Kneissl</name>
       <url>https://github.com/mkneissl</url>
     </contributor>
+    <contributor>
+      <name>Vidar Larsen</name>
+      <url>https://github.com/vlarsen</url>
+    </contributor>
     <contributor>
       <name>Kasper Laudrup</name>
     </contributor>
+    <contributor>
+      <name>Jeff Lavallee</name>
+      <url>https://github.com/jlavallee</url>
+    </contributor>
     <contributor>
       <name>Antonio Leitao</name>
     </contributor>
@@ -95,6 +113,7 @@
     </contributor>
     <contributor>
       <name>Hajime Senuma</name>
+      <url>https://github.com/hajimes</url>
     </contributor>
     <contributor>
       <name>Kandarp Shah</name>

From c4328d9fde44bf437df122c1504ba09ff6cc7954 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Mar 2013 11:27:13 +0000
Subject: [PATCH 43/52] Update to time-zone data 2013a

---
 src/main/java/org/joda/time/tz/src/africa | 17 +++++++++++++++--
 1 file changed, 15 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/joda/time/tz/src/africa b/src/main/java/org/joda/time/tz/src/africa
index 54c7a1e6a..f378cc452 100644
--- a/src/main/java/org/joda/time/tz/src/africa
+++ b/src/main/java/org/joda/time/tz/src/africa
@@ -6,7 +6,7 @@
 # go ahead and edit the file (and please send any changes to
 # tz@iana.org for general use in the future).
 
-# From Paul Eggert (2006-03-22):
+# From Paul Eggert (2013-02-21):
 #
 # A good source for time zone historical data outside the U.S. is
 # Thomas G. Shanks and Rique Pottenger, The International Atlas (6th edition),
@@ -25,6 +25,10 @@
 # Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
 # I found in the UCLA library.
 #
+# For data circa 1899, a common source is:
+# Milne J. Civil time. Geogr J. 1899 Feb;13(2):173-94
+# <http://www.jstor.org/stable/1774359>.
+#
 # A reliable and entertaining source about time zones is
 # Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
 #
@@ -116,8 +120,12 @@ Zone Africa/Porto-Novo	0:10:28	-	LMT	1912
 			1:00	-	WAT
 
 # Botswana
+# From Paul Eggert (2013-02-21):
+# Milne says they were regulated by the Cape Town Signal in 1899;
+# assume they switched to 2:00 when Cape Town did.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Gaborone	1:43:40 -	LMT	1885
+			1:30	-	SAST	1903 Mar
 			2:00	-	CAT	1943 Sep 19 2:00
 			2:00	1:00	CAST	1944 Mar 19 2:00
 			2:00	-	CAT
@@ -189,6 +197,11 @@ Zone	Africa/Djibouti	2:52:36 -	LMT	1911 Jul
 
 # Egypt
 
+# Milne says Cairo used 2:05:08.9, the local mean time of the Abbasizeh
+# observatory; round to nearest.  Milne also says that the official time for
+# Egypt was mean noon at the Great Pyramid, 2:04:30.5, but apparently this
+# did not apply to Cairo, Alexandria, or Port Said.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Egypt	1940	only	-	Jul	15	0:00	1:00	S
 Rule	Egypt	1940	only	-	Oct	 1	0:00	0	-
@@ -329,7 +342,7 @@ Rule	Egypt	2010	only	-	Sep	10	0:00	1:00	S
 Rule	Egypt	2010	only	-	Sep	lastThu	23:00s	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct
+Zone	Africa/Cairo	2:05:09 -	LMT	1900 Oct
 			2:00	Egypt	EE%sT
 
 # Equatorial Guinea

From db34c4a393ae3d4fdf03fcbd2c19a9ff77bed089 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Mar 2013 12:09:51 +0000
Subject: [PATCH 44/52] Fix typos

---
 src/site/xdoc/upgradeto200.xml | 2 +-
 src/site/xdoc/upgradeto210.xml | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/site/xdoc/upgradeto200.xml b/src/site/xdoc/upgradeto200.xml
index da92f310a..548d76f4b 100644
--- a/src/site/xdoc/upgradeto200.xml
+++ b/src/site/xdoc/upgradeto200.xml
@@ -2,7 +2,7 @@
 
 <document>
  <properties>
-  <title>Java date and time API - Upgrade from 2.0 to 2.1</title>
+  <title>Java date and time API - Upgrade from 1.6 to 2.0</title>
   <author>Stephen Colebourne</author>
  </properties>
 
diff --git a/src/site/xdoc/upgradeto210.xml b/src/site/xdoc/upgradeto210.xml
index e188aa76f..bf0839cf4 100644
--- a/src/site/xdoc/upgradeto210.xml
+++ b/src/site/xdoc/upgradeto210.xml
@@ -2,7 +2,7 @@
 
 <document>
  <properties>
-  <title>Java date and time API - Upgrade from 1.6 to 1.6.1</title>
+  <title>Java date and time API - Upgrade from 2.0 to 2.1</title>
   <author>Stephen Colebourne</author>
  </properties>
 

From bddc55cf70a403d207d8490fc9e9473047450897 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Mar 2013 12:10:13 +0000
Subject: [PATCH 45/52] Clearer release notes

---
 RELEASE-NOTES.txt | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index e2aa739b7..9164fc4d8 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -6,9 +6,7 @@ Date and Calendar classes.
 
 This is the tenth release of Joda-Time.
 This release contains enhancements, bug fixes and a time zone update.
-
-We require JDK 1.5 or later as features such as generics are used.
-It may be possible to use retroweaver to compile this under an earlier JDK but we haven't tried.
+JDK 1.5 or later is required.
 
 Joda-Time is licensed under the business-friendly Apache License Version 2.
 This is the same license as all of Apache, plus other open source projects such as Spring.

From f924b433bc211cdd365d677c725e6377d6b6c369 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Mar 2013 13:42:37 +0000
Subject: [PATCH 46/52] Prepare for v2.2

---
 pom.xml                        |   2 +-
 src/conf/MANIFEST.MF           |  20 ++---
 src/site/site.xml              |   2 +-
 src/site/xdoc/index.xml        |  16 ++--
 src/site/xdoc/installation.xml |   1 +
 src/site/xdoc/upgradeto220.xml | 155 +++++++++++++++++++++++++++++++++
 6 files changed, 176 insertions(+), 20 deletions(-)
 create mode 100644 src/site/xdoc/upgradeto220.xml

diff --git a/pom.xml b/pom.xml
index 1eb684f92..8f27d7b87 100644
--- a/pom.xml
+++ b/pom.xml
@@ -8,7 +8,7 @@
   <artifactId>joda-time</artifactId>
   <packaging>jar</packaging>
   <name>Joda time</name>
-  <version>2.2-SNAPSHOT</version>
+  <version>2.2</version>
   <description>Date and time library to replace JDK date handling</description>
   <url>http://joda-time.sourceforge.net</url>
   <issueManagement>
diff --git a/src/conf/MANIFEST.MF b/src/conf/MANIFEST.MF
index c38d6c936..8431fc9c8 100644
--- a/src/conf/MANIFEST.MF
+++ b/src/conf/MANIFEST.MF
@@ -2,22 +2,22 @@ Package: org.joda.time
 Extension-Name: joda-time
 Specification-Title: Joda-Time
 Specification-Vendor: Joda.org
-Specification-Version: 2.1
+Specification-Version: 2.2
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time
-Implementation-Version: 2.1
+Implementation-Version: 2.2
 Implementation-Vendor-Id: org.joda
 Bundle-ManifestVersion: 2
 Bundle-Vendor: Joda.org
 Bundle-Name: Joda-Time
 Bundle-SymbolicName: joda-time
-Bundle-Version: 2.1
-Export-Package: org.joda.time;version=2.1,
- org.joda.time.base;version=2.1,
- org.joda.time.chrono;version=2.1,
- org.joda.time.convert;version=2.1,
- org.joda.time.field;version=2.1,
- org.joda.time.format;version=2.1,
- org.joda.time.tz;version=2.1
+Bundle-Version: 2.2
+Export-Package: org.joda.time;version=2.2,
+ org.joda.time.base;version=2.2,
+ org.joda.time.chrono;version=2.2,
+ org.joda.time.convert;version=2.2,
+ org.joda.time.field;version=2.2,
+ org.joda.time.format;version=2.2,
+ org.joda.time.tz;version=2.2
 Bundle-License: Apache 2.0
 Bundle-DocURL: http://joda-time.sourceforge.net/
diff --git a/src/site/site.xml b/src/site/site.xml
index ee7cbe367..6d33cd20f 100644
--- a/src/site/site.xml
+++ b/src/site/site.xml
@@ -28,7 +28,7 @@
       <item name="Related projects" href="related.html"/>
       <item name="Javadoc (Release)" href="api-release/index.html"/>
       <item name="License" href="license.html"/>
-      <item name="Download" href="https://sourceforge.net/projects/joda-time/files/joda-time/2.1/"/>
+      <item name="Download" href="https://sourceforge.net/projects/joda-time/files/joda-time/2.2/"/>
     </menu>
 
     <menu name="Key concepts">
diff --git a/src/site/xdoc/index.xml b/src/site/xdoc/index.xml
index f1c084846..002facac5 100644
--- a/src/site/xdoc/index.xml
+++ b/src/site/xdoc/index.xml
@@ -54,8 +54,8 @@ public boolean isJoinedInLastThreeMonths(<a href="api-release/org/joda/time/Date
   return last3Months.contains(datetimeJoined);
 }
 -->
-Version 2.1 was released on 2012-02-22 -
-<a href="https://sourceforge.net/projects/joda-time/files/joda-time/2.1/">Download now</a>
+Version 2.2 was released on 2013-03-08 -
+<a href="https://sourceforge.net/projects/joda-time/files/joda-time/2.2/">Download now</a>
 </p>
 </section>
 
@@ -139,19 +139,19 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="https://sourceforge.net/projects/joda-time/files/joda-time/2.1/">Release 2.1</a>
+<a href="https://sourceforge.net/projects/joda-time/files/joda-time/2.2/">Release 2.2</a>
 is the current latest release.
 This release is an evolution of the 1.x codebase, not a major rewrite.
 It is considered stable and worthy of the 2.x tag.
 </p>
 <p>
-Version 2.1 is a bugfix release compatible with version 2.0.
-See the <a href="upgradeto210.html">upgrade notes</a> for full details.
+Version 2.2 is a bugfix release compatible with version 2.1.
+See the <a href="upgradeto220.html">upgrade notes</a> for full details.
 </p>
 <p>
-Version 2.0 is almost completely source and binary compatible with version 1.x.
+Version 2.x is almost completely source and binary compatible with version 1.x.
 Key changes include the use of JDK 1.5 or later, generics, and the removal of some (but not all)
-deprecated methods. See the <a href="upgradeto200.html">upgrade notes</a> for full details
+deprecated methods. See the <a href="upgradeto220.html">upgrade notes</a> for full details
 including information on the corner cases that are not compatible.
 </p>
 <p>
@@ -162,7 +162,7 @@ The version number will change to 3.0 to indicate a significant change in compat
 
 <p>
 <a href="https://sourceforge.net/projects/joda-time/files/joda-time/1.6.2/">Release 1.6.2</a>
-is the previous release.
+is the last v1.x release.
 It is compatible with JDK 1.4.
 Given that v2.x is essentially compatible with v1.6.2, there are no current plans for further
 releases in the v1.x product line.
diff --git a/src/site/xdoc/installation.xml b/src/site/xdoc/installation.xml
index 78f3dd0fe..ccdb040dd 100644
--- a/src/site/xdoc/installation.xml
+++ b/src/site/xdoc/installation.xml
@@ -22,6 +22,7 @@ of the source code suitable for linking to the jar file in IDEs such as Eclipse.
 <p>
 The release notes for upgraders can be found here:
 <ul>
+<li><a href="upgradeto220.html">Version 2.2</a> - upgrade from Version 2.1</li>
 <li><a href="upgradeto210.html">Version 2.1</a> - upgrade from Version 2.0</li>
 <li><a href="upgradeto200.html">Version 2.0</a> - upgrade from Version 1.6</li>
 <li><a href="upgradeto162.html">Version 1.6.2</a> - upgrade from Version 1.6.1</li>
diff --git a/src/site/xdoc/upgradeto220.xml b/src/site/xdoc/upgradeto220.xml
new file mode 100644
index 000000000..bda5ed784
--- /dev/null
+++ b/src/site/xdoc/upgradeto220.xml
@@ -0,0 +1,155 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Upgrade from 2.1 to 2.2</title>
+  <author>Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="Upgrade">
+<p>
+These are the release notes and advice for upgrading Joda-Time from version 2.1 to version 2.2.
+<source>
+Joda-Time version 2.2
+---------------------
+
+Joda-Time is a date and time handling library that seeks to replace the JDK
+Date and Calendar classes.
+
+This is the tenth release of Joda-Time.
+This release contains enhancements, bug fixes and a time zone update.
+JDK 1.5 or later is required.
+
+Joda-Time is licensed under the business-friendly Apache License Version 2.
+This is the same license as all of Apache, plus other open source projects such as Spring.
+The intent is to make the code available to the Java community with the minimum
+of restrictions. If the license causes you problems please contact the mailing list.
+
+**  Please also check out our related projects   **
+** http://joda-time.sourceforge.net/related.html **
+
+
+Enhancements since 2.1
+----------------------
+- Change some StringBuffer uses to StringBuilder [3532330]
+
+- Add method to calculate the Julian Day
+  See DateTimeUtils
+
+- Add Danish translation of word-based periods (Kasper Laudrup)
+
+- Add Japanese translation of word-based periods (Hajime Senuma)
+  https://github.com/JodaOrg/joda-time/pull/9
+
+- Parsing of US short time-zone names
+  The time-zone names EST/EDT/CST/CDT/MST/MDT/PST/PDT/UT/UTC/GMT can now be parsed in a limited way.
+  This is enabled for formatter patterns of "z" (and "zz" or "zzz").
+  The builder continues to offer a better way of manually managing this.
+
+- Add new exception, IllegalInstantException
+  This allows applications to better capture problems with daylight savings gaps
+  The exception is a subclass of IllegalArgumentException, so existing logic will still work
+
+
+Compatibility with 2.1
+----------------------
+Build system - No
+ - Ant build removed. Build only on Maven now.
+
+Binary compatible - Yes
+
+Source compatible - Yes
+
+Serialization compatible - Yes
+
+Data compatible - Yes, except
+ - DateTimeZone data updated to version 2012j
+
+Semantic compatible - Yes, except
+ - DateTimeFormatter.parseInto() retains the year if only month parsed (as it did in v1.x)
+ - If a formatter cannot print or parse, it will now throw an exception instead of ignoring it
+ - Format pattern "z" now has limited parsing abilities
+
+
+Deprecations since 2.1
+----------------------
+None
+
+
+Bug fixes since 2.1
+-------------------
+- DateTime.millisOfDay().withMaximumValue()/withMinimumValue() [159]
+  Now handle daylight savings gaps
+  https://sourceforge.net/p/joda-time/bugs/159/
+
+- MonthDay add/subtract [3528941]
+  Addition and subtraction in MonthDay was fixed.
+  It previously didn't work when the start value was 29th February.
+
+- LocalDateTime.fromDateFields()
+  This used to fail before 1970 when the input had a milli-of-second field
+  Fixed to not throw an exception
+
+- LocalDateTime.fromCalendarFields()/LocalDateTime.fromDateFields()
+  This used to fail before year 1 as the era was ignored
+  Fixed to return the correct year
+  https://github.com/JodaOrg/joda-time/pull/8
+
+- MutableDateTime.setDate(ReadableInstant)  [163]
+  Fixed to handle cross-time-zone issues properly rather than always using UTC
+
+- BasicGJChronology.getDaysInMonthMaxForSet  [165]
+  Fixed calculate the correct maximum length if the input day-of-month value is less than 1
+
+- DateTimeFormatter.parseInto() [3522138]
+  The v2.0 changes to handle parsing of month/day on their own (for Feb 29th) cause
+  parseInto() to lose the year. This fix reverts behaviour to v1.x so that parseInto()
+  will use the supplied year, not the default year of the formatter.
+
+- DateTimeFormatter.isPrinter()/isParser() and related
+  The Javadoc for DateTimeFormatterBuilder specified behaviour when the formatter
+  could not print or could not parse, but the code didn't implement it
+  Now it does, which means that DateTimeFormatter.isPrinter()/isParser() are now correct.
+  The formatter will also now throw UnsupportedOperationException when unable to print/parse.
+
+- Period formatter [3564249]
+  Formatting did not correctly output values for negative milliseconds between zero and -1 second
+
+- FieldUtils.safeMultiply(long,int) [3520651]
+  Fix implementation to throw exception for (Long.MIN_VALUE, -1)
+
+- Fix TestReadableDurationConverter [3515086]
+  Test case didn't work if deafult time zone was UTC
+
+- Fix Duration string parsing for small negative numbers
+  Values between 0 and -1 exclusive previously parsed incorrectly
+  https://github.com/JodaOrg/joda-time/pull/10
+
+- Javadoc fix to BaseChronology [3513326]
+
+- Javadoc fix to Years [169]
+
+- Javadoc fix to LocalTime [171]
+
+- Javadoc clarify on formatter builder [mailing list email]
+
+- Fixed Spanish translation of day for periods - dia now has accented i
+  https://github.com/JodaOrg/joda-time/pull/5
+
+- Change maven build to use exec-maven-plugin [158]
+  https://sourceforge.net/p/joda-time/bugs/158/
+
+
+Scala
+--------
+Joda-Time uses annotations from Joda-Convert.
+In the Java programming language, this dependency is optional, however in Scala it is not.
+Scala users must manually add the Joda-Convert v1.2 dependency.
+</source>
+</p>
+</section>
+
+</body>
+</document>

From a3cf2fcc6d6c581811d7bba05d44101857c55282 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Mar 2013 13:42:37 +0000
Subject: [PATCH 47/52] Remove old images

---
 src/site/resources/images/joda.png     | Bin 2919 -> 0 bytes
 src/site/resources/images/jodatime.png | Bin 2850 -> 0 bytes
 2 files changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 src/site/resources/images/joda.png
 delete mode 100644 src/site/resources/images/jodatime.png

diff --git a/src/site/resources/images/joda.png b/src/site/resources/images/joda.png
deleted file mode 100644
index 435df26a39732551d2f7ed9b1fdf288be1c83875..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 2919
zcmY*bc{EgSAHT9>C)v0BESbp~S(CBGl$e?^_B~6ojwNKGWSNNUMkJ&mhRl>=EM>`7
zw&BN^Y$4f83=+Nf?T`1I_n!0I=bn4c{XEZozMtibLs(nzaEfyR0KfycG`j}QVc>wU
z9|P|ue%BJgi6g|);lD4L{tg?3&VRv&<Kgft=Eterg8UphIyI<i0N`SSn;D~`iq;(h
zt&rmqaY478CQY0sFSAysyvuRKb8CC3E1D8gl&uN|0<L~w7;mSh;`{CMyf15?_PMm@
zev$O4Gq6zXT!PpL?{n*rgh-9p#P4OVI2kQDc_X{@BUsVG*O+LrAHje6<CZt6%X)2L
z8)0{r^ai5`pu#vanIuU3j*Z0kI&&+U-#^a-UhyNf9aEqZDxEnGg+2Q&a-H=qPb?q}
zx0mHik$r6(9SfaRXPTqQ!+x<OVM*8>gY)N|RP*g@ZEu__R6M^2V~;&6|M-)S2L9Mx
zz?feiZs@?}teW3@okU-cq+H-<H=w=$W87J0{J(XS&kU%hZES30E80xI4fVocvbsE>
zxqT}uD<l%Bv(t=?x`-(@#Qyq-*W{BnnEkn5QBiT6SF&JJjOtlm1dD5Z{W>Bb;A4Px
zSfg{rHHWKL>%*1?($dnpM18a$(<dhfiq8|qS6f`wjQJH56mIWsU^g0<AnEk=)|efC
zCnt&Y`J3alDr#!Metw856dVqxM6T<{?y0BG-!+>3@KB;VU21iGy({#0mxx;pk?8U!
z$OVa{c6PF4bXOCJwr6rb4q6D`9T~Z%n$HE$XteqHdDP+d_BK7ZO+}E?ckl&?gz@u(
zNb({Va5$U`CGtm<fqvjrQ^fxMz5tE|&<^@MF*cUiqZ2$`Q&ZC!`nBCl6pcpzOQ%y_
zzAr^olF4C*zjnwxP7MJLrlzJc{6<#QV~%cae1Nm64!G@^R&0u}h=`r5Yx>u{PdYQ5
zU0uV+GcQ%_?CjXU4$lE8W@T=7_PrZ;{^XJlb~j6q==(a;QC{KUf@iUY;Kv670s@GW
z>GRjBat4>E`#B`(jHRJcQ$G#Sq!TQed3mP=aF9^&<iCaJ3ah`RP;Pf5@%$9aD=eIx
znCL;|ee&UAImVlupxfKq+nsT0_u#O&xcJA9AC+Jkab~jh_Gx>5`ahuud!dZJTqXb4
zF)=aX0J_c<`)hl-zP`S;w)UZfPMNpvZN}PIwVkhz4=_7YaasJ~hxJHiqdRw69f{g_
zt6Q7X*rnoI5DL_p5=m@po7vp`x&NEbaL+v?1W`9$je4Qt)BqUC3!D{y$d=$?*b$&j
zuWLK{b+FmS43rGc)O%S32XB7=9^&OSPx9^u++$;#D=HQl>-23`d3cP0^gWsB+nX)r
z78x6#8_Ca}bp~k1?Tp#^ak3Z}>4vt?g@|$|ef{bq**zTowae>ZZDWd(N##gvPfzD<
zo5@(&oTAtv5br$efv3&QvF`3N0=U?{xnz(_z@vhKC=k<KJ*9`4nc3-0ka^w^Hqy`U
z+Zv5LgWa9#>0$R|J9f9JNx$=RE0%(;E*_jr6;Ug*?DMRTT$?Z!Tl*1ZU96udtf8m3
zPql$n94G_w^75mjqeIC}(LYZYmK(`TkbU`VVOm-d-)D_SS2+%9#{66E95#)wvc`|Q
z-VR)!d~F#6^z`&Vl$1>M84QLa5e<lniG}J)0tggpdlYGNl?hdaIwQz=(H_*7gM$O*
z)+SgO*Vq0+@GSk}jnOKkU9Gc2S|HykLrF<VmUtm0bo1}6{{DP5Lei)HetL7XCaJBi
zPEC}1<oxqz&rr6uS7BJg5^I8Km|$vGZf-6r+eoIeveJGct@|SnHyg7z+S;1e%Yr~4
zlo$5)!U<G8P0jg8%J8BJ6bhH&AL?Z>?(FU^=NR%hCvJOYERjp(ocO~oPlsn7(iz>J
z^-%`Wz#~ifoEmnM(vYqPLI6K+GKdwZEg@vj6yH7HyNFrwg$RP4Q<*le+k*S#Q~r(w
zNF!;>%QsdEm2xjFGnnG-m7n_?NN4mfaweMOToFwg?v>3<nIi*3las&pmr8bbcad69
zC^XX&WCJshKA)yGz`>i`Vc+%kt?o(>4_iXe8;J@9!ICG?qz;dg!Q?&=;-nCFhbXN*
zz(9bf@bTlYu&|12H-ds{`xhObN*MEx<_~2bYZ>!@{p;`!3iRH~dCH}0A-a+|jVK<>
zSx!e{Lt~>@?+XM3G{0AlL~BC%HCgElo!e*mCjzt;ng*A`^ozIAb>lb5Gz7kXu?+d-
zn5hGAvRrmALQjyh^ktG!*1}Ay)rB&U0aBu(AaYF0lPwKEU6lJ9!CBSfo~m1Gkw7(p
zkX+B*(a{0%wY+jgD77m<+v#-nKPnqDZ8jw;@GKv)SSHl(oVXw)41-CRz7Vs}lll91
z>_u6FQ(wM(xvqgnonZwiQ?=CPZ$u;#>E-1GyqgQj%F2SweU&()r6rVmLE6T~hHq@)
z=YA7~BGRyM!dr-wRi8?D{(RJ5Ys-v?zIjf(V@@4-Mj*&#@N*_cM@ReBRiR$Mj`o-<
zP6I<!YB{=EQBjd;Hc`aYo^+i9sBs{(ty9k5+TiBqMl1{r41nTJo!b&l_4fDY1oBi}
zE?qgA>qsVRs<h3(baf}D|6VgQ8TTSE7>tk4>6J2cb)8#VdQWzCwuqYR+RBPaQG2_|
zMQ6`T9iCu1`IcaXfg<ar4A@cB>c1)gJ6l5B(f(4VoP{u&ky+F4S&yJIRVZs|X|Wh1
zgu&REUfq%13T`{h%gakzF_#^tY_`%zMn;B)9^vu0JPU|mLqkJZz}n>No2;y?Dax6a
z({X<eLBW(5L}Nfd573qvLps<Yktg*}naK`|xW&$e>+`Ugy0}Og^QXYQT~22&gDzaT
zwKMM47Wc>S(lf)OJug(R4;dttgoMOkksf&V2@Iapu1V0*z&Mgy?He3?LkkEu27d#0
zQW2q)<N*fGW9`7nmmbU!i+8(b-ZM65U^8<sBUaJby=IDW+rt*yC*$j9!Kgr2=gP)y
z^(ywniP<-WLm%AAAxTL|B_<|T=Jqc>Fq0MJROdFm>Fn$ryT7%#pJUF|h&^EF@i501
z6%~Ol*y(Ifvy?9zUv-OFR`|ev>~4JDpm22!b-AXpvH<I$rlL|@Q1G;kStj<+;jWTh
z?ezd9oY~0e==C@BWvjaJ1DbEiaF_^hG8uIGj$}SxZ|~t;P+?&9mTNN2;(eb~5sBsx
z>YN+5z*u!L0@u>e*N>Tf$Mk_?U@qiAYHHOut_yNGYhhwy;&E^*PLj7n9dE^0%y(n#
z?5NZz3*%R-mcd*J3=9PGc`n4h3Kc|eAXZkUG;yiBYv3p8bS-h7zN05#(fj)P!1jUG
z&kSI(SQQnO^73*H4vueZ%b3QE>6X<<3dg;kzCM#=K6sWRk<p&WmC|^F`aF={z`=5F
zc=)Pdpr)p#5U05e|Jz%e()u|InEgVno8R;j2A3$<gN92L;?mMj@OUsBpddIDTDnO#
zlKDRSKB2VqAHdSeN*Mwv2<vA{Fm7>$85n$A#E{8kkhH;5O}Y8`#{tj!y`_>kRaI4=
zaJ&;ulwVo6f7~rjik)SIO0}zVbwMEFKPw1wf+a2Gk<YYz<+%RBwz{C$mlDb?7_KiR
zbbS${CsZ7$?GzEA1-Ogmfjh}sSZlSJT|970yMO;aD2i=Y4|P#j?2c`s$qAfU+C{mh
zke^Y_FJ7F<;X3;RwsZH7&LjEgrGa9w^m-B9q0KK}hP38?u`fE5Fq1t&nL6s=gZ<v7
z+Q`Yt38%7lyxiN{D=RCrbB$gkzL_q2vLN=iyF8-&e|s4RJf;x@X*Ewdz$O`hn_HXJ
Inz-Nl59h<Bq5uE@

diff --git a/src/site/resources/images/jodatime.png b/src/site/resources/images/jodatime.png
deleted file mode 100644
index 4d5d609868c392a2871e8f15100f4ba54b7e92b6..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 2850
zcmai$c{Ei28^^DVeMuoZ6GADZX}&_k*dh$3F_xskSY|?&2rZUx$d)V_YZwwqizRC)
z2GJN|EJNZuA|~rlWc%Ik@9*C^zkAN}JolV?&b^<{b6?N<{YkJzT@vD#<_7>k$imzN
z4b}uO)OZhp*_0ba2Mb?-xl=G$IsO|qCpt&K8=hMh)}}l|f?^`V0uC{)PXU1cgM|qa
z6PCZ^>|`Z+O$Kq!FXzjbL*gefr_U%sAI3z9NSJh{nAG}<48sy*e3UO|3V2MqTe)b!
zx@eLqE>JTI7jmbht&$qi)(&$1^ph9n<6?x9brZK*lh}8(v#?eFcpsF~V#9a(gQvo2
z;r;7Rk;!F*>FBG64kq}*rp4s_CMEt~_&Uhs>xK}0e0TxF^irc@$q$%_h=|_a-lA)^
zw(axmNCPh?Cnp;l8cl0P=H}NX`q&unzTwJ!uG%E1MLKPsy}c{0j%{H4+6nvhQ|dsy
zsj10Kc`jM%+?D~)R@cXm9}R|^uSfN<x^P<UAs#U4OQBg~zHmvY{_G<O3DtYYr)8{F
zh7=aRYPNg&?YF%l(q9Y@V>Z~omL{yNtpPwjwcf3RTSe5rI505KGV3%4psb>@U!S8J
zl}9{>W|>uBoKGLysCoVRFp<e*UU6~xj5qQV<EOlIs)4$h9Nm&jE`?(&>#D1(!G%44
z-t7wyZk#MFE&bj{;^F2NR;{nC&CJSb4QF%zyM1&89zoIitl?{KZyy=ihOMLo>Vp>o
zaeutp)791Wo6SimG-^Aen~D6J;?Bjxb9lb({+@KADygsgk(@vQnEp0%b)6a*7@#Cc
z6e8{s;d!3g<7L));H#-#>YAEuA*`$qxK%dW(%PEZ-`}-%lZeZsV(slim|ZEYtq35>
zTsilgcR$%QY0P*2XhVcyv4*FYm-gPu)cd~PUVZ@qQT|v6GC)UGgCrv>s~@sBytqhg
zhB~}*Nk~cAWV4yzBjIiuO%o3P)gH~MR@vW=>Vf50adC0Exw#<_2ncdo=Ml5PRxR`L
zv+(e6m5fi%X4!1E+wSx<F8+bv#JdEF`&-ABh)v?GSR`d{=eIXC_r$RzH=cX<?p;Bn
zb#-+U6BA3(CrN$Z19bG|ZB9Lr*AIIvHG<a`7Z*=cUSKjgn?KL9J++<u{g<bwi)wtM
zsis<WNL0orSmgfQ7--y$RJUvwjn}VVUz%kw7-v1YpfQF}5nf1Wa7#^%X!^nSyaL8b
z0CFf@dC+-gEzHx?Q{zM-i4<SEjffuC%cPfDWH_GAGFLWY9qwM++6s#{Z1<`$RXpOJ
zXhN3IbS>iD`MnZ<4*~=<y5R5Jxg#MiexWZEKSE6qRRw#qK`YSv-IXHqd-?0cTMr&a
zE*gziON^O~6_8LIe<XjAF*WrHT@ku6Ma5uB1_xl)c9^g*osE~*nz7H&?;{WP_xE<x
z;`8%mN$CeOO-P8>iY->>k%I0m^D1mx#O5gt4dG2AsK{hX_?0Sb;l(@0(oz)+g!3vf
zrwj}Xeqc^L@$>UrT3Y&1%Vcj;sZ`+%DGooi#KeaWqx#Fs%a@n^YsP)+oHrx(rrzHv
zE~L2IW3gXgRimuIb?3JG??2#*2n??pAt51<3gOYYHD<SWe?Ca3<?Y+`RId^OgIMR~
z>4|i9cPCqZIw*tJc+<@I6cBeMw{NdZ`N8uDxo~L^wAO*faJJXjUDim|fauYq>kC7w
zV*>A84T9&ah9}*$m23s{BllaXs)QKLp-cRNf)Dy)Y4Z{i5(;{uzBpVIxm?}h)#tpw
zR>1G8Wbmbf_$@3g2?6a|$=%E|*P3d{<QOTbjyDe;JZNapsTogZHhjPh_`txqvMEHw
zLTYDxV7WujZ6;1+<>cf%e!RLPXVTNtW5{Ru3_VNh?Twk>Mv4SAwiFk0062Kw%#hyg
zWkaQl7Ym>dHLtg}^AZRI@c(fF?UC`!(K@8);?hKY56arwGs|&mYAP))EhHoah|0=3
z21J>aAZ?VClyW#!t+H_vvK?BLbjILd;LOKZ5WY*P@`O5P!H(?LQ9l+J8TB^{3$7@p
zjS-9w%3+rv@m4ujalW@^0bn-hLbY9ZoMKDlfxI+H<62WVTg9EsI+Hsd8t@_oTS;HI
z1*X2fr0`oxMI73af;|avZ08aF*ntt&=Jdo4oSn_}ZG<{dMgV0ff|`3?I)yvS+oLO4
z>S9FgppUP=KlgRb69%a>WL+g4d{CoHd~vp}kgA}tuu;dW>eco2nD2*^C_&lDSNtwt
zzKnXRUoq%IE-5M0504?2RLbh^o;b=!q<{IM9lnm=$RMl1ZWtLE0l??0v1TRFDBc2;
zH>sn&y}c=fHI24Jq5404vaqyFdh}?jAy8?U+nOr|YD<rbDx-XhHBsDNo#6y<zkZJ2
z7<sw99fztrE1h!c2|rMTu0TZY|6Ex)4E$JH+S^zVRelf`XQZUBpAY2?OUxvZx;s0e
z<F2iDx0k=_`KYR@asuY*__vN?rW^o~NK8*ppT3eu4gI}*tyxwcad&KRkOKtfWlM|f
zHSR$x6Uo2)CpTH6OZiA7(%=Grq!=F`pRG)8nK(aJi|-fM*MR{;JF(Pm8L(p=;HnZ*
zQ@gd2%NC-eqd}0o@pznM=;oq*Z3?-{<<t{Yj`p*6?~VZhbDwiEGc(7=9EIbD==8ea
zc~nC}iu8H@EH`C~xcK-Er^w~W#tXr7J$UWhvIz#GztG?&$v86d;Gh~`Gt+Njhq-Y>
zUB4ahh@TB=WOk?C4j<bWJ?+}E^=Fd>vmPBD)(>07t<QdfAj|2Cpy<n_nB`c#17-B*
z&!00w1;mW}{L`eqiHQjg0Gy;3<>k1yjy|@aFMb&sI@0*&&6~Qqy88P1wzkN<Kb!oq
zMrvXs!^4IMqzEY3tL5G`<1%1dTJJSe+zCWtFOBA)CWfutWYpbQ_23o_-~-(+iBj!N
zlYfS;7+Sb&X-OxZSJqM&Agy+gr%7k^*FVMzfb{3(<;BOvf$s6-^0T(KgSs1|(^-Z?
zFh;a&XHcA|DoSVf2h4x6AwB)5%8)M{6tkXJ%Q3vXyggJZomltqC7nppye^z%2Pw9F
zxI8<}+UxRxX*j+C>=B@pNXD&g--VqqQA|TU-$6<IT+REPmzc;ui_hBm%)7R>Hjq<T
zn3@mDxUz+?LOzJ$#XG->t~ScGIvCH-&7sBYot!GLl|tN{ac&$O96^nD2g#<Oyx_Gj
z$o7Nh0ApigaOQXCs4`*2YwPRaCM+#2`)D+8`97oK)t)q^<HwJu%3oYuUgieOmD4vi
zHezB9HE41I(|eiFhnzgZ5C{YYhksnWprPT<s3nY#kArIR;JnSvo0@+h>&Bg(op?MR
z0J6V1$R5q6{I$_uj2Bj4KX=xT0ekBxXnfoog%UQk1Kq8vs>-?Q7yx=z*CV;Sr%zi6
zLn_U$$-I(#CG@Y8le_EREelZb%mx$19GyUN2L&=nr_%=pR@a!9k|_TyEy;<Bo^$&M
ziC=+B3W5R^a9hzL=+DN2FMJ2&ewAQi0{LSIl5*9-VRUpfo*9P0VBFmmlPE+2A)3q7
z*7k8tbZGX}Jgtxe@P*6V>kBZC^57{@Q?I}z?uQnQvh4Vz<>XQnYwPPft_*zp_RYUY
zS5J?{Vj0}u<po3%OpY8m@-M+Ef?HC4`de35cMW8I$6os1!8H-w7I<}6;7zqmuJI&B
R4?N!j7N#hZS4Oy){{UxZaMAz(


From 4b9e2314e9d5fd809003511b6ca6260b9ac4d535 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Mar 2013 13:42:37 +0000
Subject: [PATCH 48/52] Only one Javadoc link

---
 src/site/site.xml                |  9 ++-------
 src/site/xdoc/faq.xml            |  6 +++---
 src/site/xdoc/index.xml          | 28 ++++++++++++++--------------
 src/site/xdoc/key_chronology.xml |  8 ++++----
 src/site/xdoc/key_duration.xml   |  4 ++--
 src/site/xdoc/key_instant.xml    | 12 ++++++------
 src/site/xdoc/key_interval.xml   |  6 +++---
 src/site/xdoc/key_partial.xml    | 18 +++++++++---------
 src/site/xdoc/key_period.xml     | 22 +++++++++++-----------
 src/site/xdoc/quickstart.xml     | 20 ++++++++++----------
 10 files changed, 64 insertions(+), 69 deletions(-)

diff --git a/src/site/site.xml b/src/site/site.xml
index 6d33cd20f..01ebf8672 100644
--- a/src/site/site.xml
+++ b/src/site/site.xml
@@ -3,12 +3,10 @@
   <publishDate position="navigation-bottom" format="yyyy-MM-dd"/>
   <bannerLeft>
     <name>Joda.org</name>
-    <!--src>http://joda-time.sourceforge.net/images/joda.png</src-->
     <href>http://joda.sourceforge.net/</href>
   </bannerLeft>
   <bannerRight>
     <name>Joda-Time</name>
-    <!--src>http://joda-time.sourceforge.net/images/jodatime.png</src-->
     <href>http://joda-time.sourceforge.net/</href>
   </bannerRight>
 
@@ -26,9 +24,9 @@
       <item name="User guide" href="userguide.html"/>
       <item name="FAQ" href="faq.html"/>
       <item name="Related projects" href="related.html"/>
-      <item name="Javadoc (Release)" href="api-release/index.html"/>
+      <item name="Javadoc" href="apidocs/index.html"/>
       <item name="License" href="license.html"/>
-      <item name="Download" href="https://sourceforge.net/projects/joda-time/files/joda-time/2.2/"/>
+      <item name="Download" href="https://sourceforge.net/projects/joda-time/files/joda-time/"/>
     </menu>
 
     <menu name="Key concepts">
@@ -56,11 +54,8 @@
       <item name="GitHub (Source code)" href="https://github.com/JodaOrg/joda-time"/>
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
       <item name="Test results" href="surefire-report.html"/>
-      <!--item name="Test coverage" href="coverage/index.html"/-->
       <item name="Mailing lists" href="mail-lists.html"/>
       <item name="Tasks" href="tasks.html"/>
-      <!--item name="Subversion" href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTime/"/-->
-      <item name="Javadoc (Development)" href="apidocs/index.html"/>
     </menu>
 
     <menu name="Joda">
diff --git a/src/site/xdoc/faq.xml b/src/site/xdoc/faq.xml
index beff83e60..b749d86bf 100644
--- a/src/site/xdoc/faq.xml
+++ b/src/site/xdoc/faq.xml
@@ -131,7 +131,7 @@ As such, the time-zone offset returned by the JDK and Joda-Time are different fo
 <p>
 This question has more than one answer!
 If you just want the number of whole days between two dates, then you can use the
-new <a href="api-release/org/joda/time/Days.html">Days</a> class
+new <a href="apidocs/org/joda/time/Days.html">Days</a> class
 in version 1.4 of Joda-Time.
 <source>
   Days d = Days.daysBetween(startDate, endDate);
@@ -142,14 +142,14 @@ designed to operate well with the JDK5 static import facility.
 </p>
 <p>
 If however you want to calculate the number of days, weeks, months and years between
-the two dates, then you need a <a href="api-release/org/joda/time/Period.html">Period</a>
+the two dates, then you need a <a href="apidocs/org/joda/time/Period.html">Period</a>
 By default, this will split the difference between the two datetimes into parts,
 such as "1 month, 2 weeks, 4 days and 7 hours".
 <source>
   Period p = new Period(startDate, endDate);
 </source>
 You can control which fields get extracted using a
-<a href="api-release/org/joda/time/PeriodType.html">PeriodType</a>.
+<a href="apidocs/org/joda/time/PeriodType.html">PeriodType</a>.
 <source>
   Period p = new Period(startDate, endDate, PeriodType.yearMonthDay());
 </source>
diff --git a/src/site/xdoc/index.xml b/src/site/xdoc/index.xml
index 002facac5..621afa965 100644
--- a/src/site/xdoc/index.xml
+++ b/src/site/xdoc/index.xml
@@ -23,34 +23,34 @@ time zone, duration, format and parsing.
 <p>
 As a flavour of Joda-Time, here's some example code:
 <source>
-public boolean isAfterPayDay(<a href="api-release/org/joda/time/DateTime.html"><b>DateTime</b></a> datetime) {
+public boolean isAfterPayDay(<a href="apidocs/org/joda/time/DateTime.html"><b>DateTime</b></a> datetime) {
   if (datetime.getMonthOfYear() == 2) {   // February is month 2!!
     return datetime.getDayOfMonth() > 26;
   }
   return datetime.getDayOfMonth() > 28;
 }
 
-public <a href="api-release/org/joda/time/Days.html"><b>Days</b></a> daysToNewYear(<a href="api-release/org/joda/time/LocalDate.html"><b>LocalDate</b></a> fromDate) {
-  <a href="api-release/org/joda/time/LocalDate.html"><b>LocalDate</b></a> newYear = fromDate.plusYears(1).withDayOfYear(1);
-  return <a href="api-release/org/joda/time/Days.html"><b>Days</b></a>.daysBetween(fromDate, newYear);
+public <a href="apidocs/org/joda/time/Days.html"><b>Days</b></a> daysToNewYear(<a href="apidocs/org/joda/time/LocalDate.html"><b>LocalDate</b></a> fromDate) {
+  <a href="apidocs/org/joda/time/LocalDate.html"><b>LocalDate</b></a> newYear = fromDate.plusYears(1).withDayOfYear(1);
+  return <a href="apidocs/org/joda/time/Days.html"><b>Days</b></a>.daysBetween(fromDate, newYear);
 }
 
-public boolean isRentalOverdue(<a href="api-release/org/joda/time/DateTime.html"><b>DateTime</b></a> datetimeRented) {
-  <a href="api-release/org/joda/time/Period.html"><b>Period</b></a> rentalPeriod = new <a href="api-release/org/joda/time/Period.html"><b>Period</b></a>().withDays(2).withHours(12);
+public boolean isRentalOverdue(<a href="apidocs/org/joda/time/DateTime.html"><b>DateTime</b></a> datetimeRented) {
+  <a href="apidocs/org/joda/time/Period.html"><b>Period</b></a> rentalPeriod = new <a href="apidocs/org/joda/time/Period.html"><b>Period</b></a>().withDays(2).withHours(12);
   return datetimeRented.plus(rentalPeriod).isBeforeNow();
 }
 
-public String getBirthMonthText(<a href="api-release/org/joda/time/LocalDate.html"><b>LocalDate</b></a> dateOfBirth) {
+public String getBirthMonthText(<a href="apidocs/org/joda/time/LocalDate.html"><b>LocalDate</b></a> dateOfBirth) {
   return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH);
 }
 </source>
 <!--
-public boolean isDoubleShift(<a href="api-release/org/joda/time/LocalTime.html"><b>LocalTime</b></a> startTime, <a href="api-release/org/joda/time/LocalTime.html"><b>LocalTime</b></a> endTime) {
-  <a href="api-release/org/joda/time/Hours.html"><b>Hours</b></a> hoursBetween = <a href="api-release/org/joda/time/Hours.html"><b>Hours</b></a>.hoursBetween(time1, time2);
-  return hoursBetween.isGreaterThan(<a href="api-release/org/joda/time/Hours.html"><b>Hours</b></a>.EIGHT);
+public boolean isDoubleShift(<a href="apidocs/org/joda/time/LocalTime.html"><b>LocalTime</b></a> startTime, <a href="apidocs/org/joda/time/LocalTime.html"><b>LocalTime</b></a> endTime) {
+  <a href="apidocs/org/joda/time/Hours.html"><b>Hours</b></a> hoursBetween = <a href="apidocs/org/joda/time/Hours.html"><b>Hours</b></a>.hoursBetween(time1, time2);
+  return hoursBetween.isGreaterThan(<a href="apidocs/org/joda/time/Hours.html"><b>Hours</b></a>.EIGHT);
 }
-public boolean isJoinedInLastThreeMonths(<a href="api-release/org/joda/time/DateTime.html"><b>DateTime</b></a> datetimeJoined) {
-  <a href="api-release/org/joda/time/Interval.html"><b>Interval</b></a> last3Months = new <a href="api-release/org/joda/time/Interval.html"><b>Interval</b></a>(<a href="api-release/org/joda/time/Months.html"><b>Months</b></a>.THREE, new <a href="api-release/org/joda/time/DateTime.html"><b>DateTime</b></a>());
+public boolean isJoinedInLastThreeMonths(<a href="apidocs/org/joda/time/DateTime.html"><b>DateTime</b></a> datetimeJoined) {
+  <a href="apidocs/org/joda/time/Interval.html"><b>Interval</b></a> last3Months = new <a href="apidocs/org/joda/time/Interval.html"><b>Interval</b></a>(<a href="apidocs/org/joda/time/Months.html"><b>Months</b></a>.THREE, new <a href="apidocs/org/joda/time/DateTime.html"><b>DateTime</b></a>());
   return last3Months.contains(datetimeJoined);
 }
 -->
@@ -107,7 +107,7 @@ Joda-Time has a comprehensive set of developer tests, providing assurance of the
 
 <li><b>Complete Documentation</b>.
 There is a full <a href="userguide.html">User Guide</a> which provides an overview and covers
-common usage scenarios. The <a href="api-release/index.html">javadoc</a>
+common usage scenarios. The <a href="apidocs/index.html">javadoc</a>
 is extremely detailed and covers the rest of the API.</li>
 
 <li><b>Maturity</b>.
@@ -128,7 +128,7 @@ Various documentation is available:
 <ul>
 <li>Two user guides - <a href="quickstart.html">quick</a> and <a href="userguide.html">full</a></li>
 <li>The key concepts and chronology documents in the left navigation area</li>
-<li>The javadoc for the <a href="api-release/index.html">current release</a></li>
+<li>The javadoc for the <a href="apidocs/index.html">current release</a></li>
 <li>The javadoc for the <a href="apidocs/index.html">latest source code</a></li>
 <li>A <a href="faq.html">FAQ</a> list</li>
 <li>Information on <a href="installation.html">downloading and installing</a> Joda-Time</li>
diff --git a/src/site/xdoc/key_chronology.xml b/src/site/xdoc/key_chronology.xml
index 4b77f4d11..6ba6256f4 100644
--- a/src/site/xdoc/key_chronology.xml
+++ b/src/site/xdoc/key_chronology.xml
@@ -27,10 +27,10 @@ think about their actual requirements, which we believe is a Good Thing.
 </p>
 <p>
 The actual calculations of the chronology are split between the
-<a href="api-release/org/joda/time/Chronology.html">Chronology</a> class itself
+<a href="apidocs/org/joda/time/Chronology.html">Chronology</a> class itself
 and the field classes -
-<a href="api-release/org/joda/time/DateTimeField.html">DateTimeField</a> and
-<a href="api-release/org/joda/time/DurationField.html">DurationField</a>.
+<a href="apidocs/org/joda/time/DateTimeField.html">DateTimeField</a> and
+<a href="apidocs/org/joda/time/DurationField.html">DurationField</a>.
 Together, the subclasses of these three classes form the bulk of the code in the library.
 However, most users will never need to use or refer directly to the subclasses.
 Instead, most applications will simply obtain the chronology and use it as a singleton.
@@ -38,7 +38,7 @@ Instead, most applications will simply obtain the chronology and use it as a sin
 <p>
 The chronology class also supports the time zone functionality.
 This is applied to the underlying chronology via the decorator design pattern.
-The <a href="api-release/org/joda/time/DateTimeZone.html">DateTimeZone</a> class provides
+The <a href="apidocs/org/joda/time/DateTimeZone.html">DateTimeZone</a> class provides
 access to the zones via factories, and also supports a default zone concept.
 A full list of time zones can be found <a href="timezones.html">here</a>.
 It is also possible to <a href="tz_update.html">update the zone data</a> yourself.
diff --git a/src/site/xdoc/key_duration.xml b/src/site/xdoc/key_duration.xml
index e622b2427..20c6a1a9d 100644
--- a/src/site/xdoc/key_duration.xml
+++ b/src/site/xdoc/key_duration.xml
@@ -37,10 +37,10 @@ Durations implement <code>Comparable</code> which compares the lengths of the tw
 <section name="Using Durations in Joda-Time">
 <p>
 Within Joda-Time a duration is represented by the
-<a href="api-release/org/joda/time/ReadableDuration.html">ReadableDuration</a> interface.
+<a href="apidocs/org/joda/time/ReadableDuration.html">ReadableDuration</a> interface.
 There is one implementation of the interface provided:
 <ul>
-<li><a href="api-release/org/joda/time/Duration.html">Duration</a> -
+<li><a href="apidocs/org/joda/time/Duration.html">Duration</a> -
 An immutable implementation</li>
 </ul>
 </p>
diff --git a/src/site/xdoc/key_instant.xml b/src/site/xdoc/key_instant.xml
index 26c398b1f..91775a112 100644
--- a/src/site/xdoc/key_instant.xml
+++ b/src/site/xdoc/key_instant.xml
@@ -41,19 +41,19 @@ you should use the <a href="key_partial.html">partial</a> classes.
 <section name="Using Instants in Joda-Time">
 <p>
 Within Joda-Time an instant is represented by the
-<a href="api-release/org/joda/time/ReadableInstant.html">ReadableInstant</a> interface.
+<a href="apidocs/org/joda/time/ReadableInstant.html">ReadableInstant</a> interface.
 There are four implementations of the interface provided:
 <ul>
-<li><a href="api-release/org/joda/time/Instant.html">Instant</a> -
+<li><a href="apidocs/org/joda/time/Instant.html">Instant</a> -
 A simple immutable implementation which is restricted to the UTC time zone
 and is intended for time zone and calendar neutral data transfer</li>
-<li><a href="api-release/org/joda/time/DateTime.html">DateTime</a> -
+<li><a href="apidocs/org/joda/time/DateTime.html">DateTime</a> -
 The most commonly used class in the library, and an immutable representation of a
 date and time with calendar and time zone</li>
-<li><a href="api-release/org/joda/time/DateMidnight.html">DateMidnight</a> -
+<li><a href="apidocs/org/joda/time/DateMidnight.html">DateMidnight</a> -
 Similar to <code>DateTime</code> and also immutable but with the time component
 forced to be midnight (at the start of a day)</li>
-<li><a href="api-release/org/joda/time/MutableDateTime.html">MutableDateTime</a> -
+<li><a href="apidocs/org/joda/time/MutableDateTime.html">MutableDateTime</a> -
 A mutable representation of date and time with calendar and time zone</li>
 </ul>
 We recommend the immutable implementations for general usage.
@@ -87,7 +87,7 @@ Note that the interface <code>ReadableInstant</code> should not be used like the
 The interface only contains the core subset of the operations of <code>DateTime</code>.
 You should use the interface only when you feel the need to be flexible about future changes
 to the object passed into a method.
-You might also want to consider the <a href="api-release/org/joda/time/ReadableDateTime.html">ReadableDateTime</a>
+You might also want to consider the <a href="apidocs/org/joda/time/ReadableDateTime.html">ReadableDateTime</a>
 interface which extends <code>ReadableInstant</code> to provide additional methods.
 </p>
 
diff --git a/src/site/xdoc/key_interval.xml b/src/site/xdoc/key_interval.xml
index f4625b6d8..70154316f 100644
--- a/src/site/xdoc/key_interval.xml
+++ b/src/site/xdoc/key_interval.xml
@@ -37,11 +37,11 @@ If you want to compare the length of intervals you must obtain the duration of e
 <section name="Using Intervals in Joda-Time">
 <p>
 Within Joda-Time an interval is represented by the
-<a href="api-release/org/joda/time/ReadableInterval.html">ReadableInterval</a> interface.
+<a href="apidocs/org/joda/time/ReadableInterval.html">ReadableInterval</a> interface.
 There are two implementations of the interface provided:
 <ul>
-<li><a href="api-release/org/joda/time/Interval.html">Interval</a> - An immutable implementation</li>
-<li><a href="api-release/org/joda/time/MutableInterval.html">MutableInterval</a> - A mutable implementation</li>
+<li><a href="apidocs/org/joda/time/Interval.html">Interval</a> - An immutable implementation</li>
+<li><a href="apidocs/org/joda/time/MutableInterval.html">MutableInterval</a> - A mutable implementation</li>
 </ul>
 We recommend the immutable implementation for general usage.
 </p>
diff --git a/src/site/xdoc/key_partial.xml b/src/site/xdoc/key_partial.xml
index 15dba4cf5..232c41e12 100644
--- a/src/site/xdoc/key_partial.xml
+++ b/src/site/xdoc/key_partial.xml
@@ -56,25 +56,25 @@ It can be thought of as a local date that covers the whole of the day from 00:00
 <section name="Using Partials in Joda-Time">
 <p>
 Within Joda-Time a partial is represented by the
-<a href="api-release/org/joda/time/ReadablePartial.html">ReadablePartial</a> interface.
+<a href="apidocs/org/joda/time/ReadablePartial.html">ReadablePartial</a> interface.
 There are six implementations of the interface provided:
 <ul>
-<li><a href="api-release/org/joda/time/LocalDate.html">LocalDate</a> -
+<li><a href="apidocs/org/joda/time/LocalDate.html">LocalDate</a> -
 An immutable implementation that represents a date without a time or time zone.</li>
-<li><a href="api-release/org/joda/time/LocalTime.html">LocalTime</a> -
+<li><a href="apidocs/org/joda/time/LocalTime.html">LocalTime</a> -
 An immutable implementation that represents a time without a date or time zone.</li>
-<li><a href="api-release/org/joda/time/LocalDateTime.html">LocalDateTime</a> -
+<li><a href="apidocs/org/joda/time/LocalDateTime.html">LocalDateTime</a> -
 An immutable implementation that represents a datetime without a time zone.</li>
-<li><a href="api-release/org/joda/time/YearMonth.html">YearMonth</a> -
+<li><a href="apidocs/org/joda/time/YearMonth.html">YearMonth</a> -
 An immutable implementation that represents a year and month, useful for credit card expiry dates.</li>
-<li><a href="api-release/org/joda/time/MonthDay.html">MonthDay</a> -
+<li><a href="apidocs/org/joda/time/MonthDay.html">MonthDay</a> -
 An immutable implementation that represents a month and day, useful for birthdays without years.</li>
-<li><a href="api-release/org/joda/time/Partial.html">Partial</a> -
+<li><a href="apidocs/org/joda/time/Partial.html">Partial</a> -
 An immutable implementation that can store any combination of datetime fields.
 For example, using this class you could create a YearMonth or DayOfWeekDayOfMonth partial.</li>
-<li><a href="api-release/org/joda/time/YearMonthDay.html">YearMonthDay</a> -
+<li><a href="apidocs/org/joda/time/YearMonthDay.html">YearMonthDay</a> -
 Effectively deprecated - only supports the year, monthOfYear and dayOfMonth fields.</li>
-<li><a href="api-release/org/joda/time/TimeOfDay.html">TimeOfDay</a> -
+<li><a href="apidocs/org/joda/time/TimeOfDay.html">TimeOfDay</a> -
 Effectively deprecated - only supports the hour, minute, second and millisecond fields.</li>
 </ul>
 </p>
diff --git a/src/site/xdoc/key_period.xml b/src/site/xdoc/key_period.xml
index 24a7595c2..9270840eb 100644
--- a/src/site/xdoc/key_period.xml
+++ b/src/site/xdoc/key_period.xml
@@ -90,7 +90,7 @@ The second type of period is the any-field period.
 These are implemented by the <code>Period</code> and <code>MutablePeriod</code> classes.
 Internally, they store a set of <code>int</code> fields, one for each field.
 The standard set of fields in a period are years, months, weeks, days, hours, minutes, seconds and millis.
-The <a href="api-release/org/joda/time/PeriodType.html">PeriodType</a> class allows this set
+The <a href="apidocs/org/joda/time/PeriodType.html">PeriodType</a> class allows this set
 of fields to be restricted, for example to elimate weeks.
 This is significant when converting a duration or interval to a period, as the calculation
 needs to know which period fields it should populate.
@@ -119,26 +119,26 @@ and then compare the duration.
 <section name="Using Periods in Joda-Time">
 <p>
 Within Joda-Time a period is represented by the
-<a href="api-release/org/joda/time/ReadablePeriod.html">ReadablePeriod</a> interface.
+<a href="apidocs/org/joda/time/ReadablePeriod.html">ReadablePeriod</a> interface.
 There are nine implementations of the interface provided:
 <ul>
-<li><a href="api-release/org/joda/time/Period.html">Period</a> -
+<li><a href="apidocs/org/joda/time/Period.html">Period</a> -
 An immutable implementation</li>
-<li><a href="api-release/org/joda/time/MutablePeriod.html">MutablePeriod</a> -
+<li><a href="apidocs/org/joda/time/MutablePeriod.html">MutablePeriod</a> -
 A mutable implementation</li>
-<li><a href="api-release/org/joda/time/Years.html">Years</a> -
+<li><a href="apidocs/org/joda/time/Years.html">Years</a> -
 An immutable years-only implementation</li>
-<li><a href="api-release/org/joda/time/Months.html">Months</a> -
+<li><a href="apidocs/org/joda/time/Months.html">Months</a> -
 An immutable months-only implementation</li>
-<li><a href="api-release/org/joda/time/Weeks.html">Weeks</a> -
+<li><a href="apidocs/org/joda/time/Weeks.html">Weeks</a> -
 An immutable weeks-only implementation</li>
-<li><a href="api-release/org/joda/time/Days.html">Days</a> -
+<li><a href="apidocs/org/joda/time/Days.html">Days</a> -
 An immutable days-only implementation</li>
-<li><a href="api-release/org/joda/time/Hours.html">Hours</a> -
+<li><a href="apidocs/org/joda/time/Hours.html">Hours</a> -
 An immutable hours-only implementation</li>
-<li><a href="api-release/org/joda/time/Minutes.html">Minutes</a> -
+<li><a href="apidocs/org/joda/time/Minutes.html">Minutes</a> -
 An immutable minutes-only implementation</li>
-<li><a href="api-release/org/joda/time/Seconds.html">Seconds</a> -
+<li><a href="apidocs/org/joda/time/Seconds.html">Seconds</a> -
 An immutable seconds-only implementation</li>
 </ul>
 We recommend the immutable implementation for general usage.
diff --git a/src/site/xdoc/quickstart.xml b/src/site/xdoc/quickstart.xml
index 0ccee3f0f..998929c67 100644
--- a/src/site/xdoc/quickstart.xml
+++ b/src/site/xdoc/quickstart.xml
@@ -20,11 +20,11 @@ Its designed for those of you who are too impatient to read the full
 <p>
 Joda-Time includes these key datetime classes:
 <ul>
-<li><a href="api-release/org/joda/time/DateTime.html"><code>DateTime</code></a> - Immutable replacement for JDK <code>Calendar</code></li>
-<li><a href="api-release/org/joda/time/DateMidnight.html"><code>DateMidnight</code></a> - Immutable class representing a date where the time is forced to midnight</li>
-<li><a href="api-release/org/joda/time/LocalDate.html"><code>LocalDate</code></a> - Immutable class representing a local date without a time (no time zone)</li>
-<li><a href="api-release/org/joda/time/LocalTime.html"><code>LocalTime</code></a> - Immutable class representing a time without a date (no time zone)</li>
-<li><a href="api-release/org/joda/time/LocalDateTime.html"><code>LocalDateTime</code></a> - Immutable class representing a local date and time (no time zone)</li>
+<li><a href="apidocs/org/joda/time/DateTime.html"><code>DateTime</code></a> - Immutable replacement for JDK <code>Calendar</code></li>
+<li><a href="apidocs/org/joda/time/DateMidnight.html"><code>DateMidnight</code></a> - Immutable class representing a date where the time is forced to midnight</li>
+<li><a href="apidocs/org/joda/time/LocalDate.html"><code>LocalDate</code></a> - Immutable class representing a local date without a time (no time zone)</li>
+<li><a href="apidocs/org/joda/time/LocalTime.html"><code>LocalTime</code></a> - Immutable class representing a time without a date (no time zone)</li>
+<li><a href="apidocs/org/joda/time/LocalDateTime.html"><code>LocalDateTime</code></a> - Immutable class representing a local date and time (no time zone)</li>
 </ul>
 </p>
 
@@ -85,8 +85,8 @@ functionality. For example, to access details about a month or year:
 <p>
 Joda-Time provides support for multiple calendar systems and the full range
 of time zones.
-The <a href="api-release/org/joda/time/Chronology.html"><code>Chronology</code></a>
-and <a href="api-release/org/joda/time/DateTimeZone.html"><code>DateTimeZone</code></a>
+The <a href="apidocs/org/joda/time/Chronology.html"><code>Chronology</code></a>
+and <a href="apidocs/org/joda/time/DateTimeZone.html"><code>DateTimeZone</code></a>
 classes provide this support.
 </p>
 <p>
@@ -119,19 +119,19 @@ Joda-Time provides support for intervals and time periods.
 </p>
 <p>
 An interval is represented by the
-<a href="api-release/org/joda/time/Interval.html"><code>Interval</code></a> class.
+<a href="apidocs/org/joda/time/Interval.html"><code>Interval</code></a> class.
 It holds a start and end datetime, and allows operations based around that
 range of time.
 </p>
 <p>
 A time period is represented by the
-<a href="api-release/org/joda/time/Period.html"><code>Period</code></a> class.
+<a href="apidocs/org/joda/time/Period.html"><code>Period</code></a> class.
 This holds a period such as 6 months, 3 days and 7 hours.
 You can create a <code>Period</code> directly, or derive it from an interval.
 </p>
 <p>
 A time duration is represented by the
-<a href="api-release/org/joda/time/Duration.html"><code>Duration</code></a> class.
+<a href="apidocs/org/joda/time/Duration.html"><code>Duration</code></a> class.
 This holds an exact duration in milliseconds.
 You can create a <code>Duration</code> directly, or derive it from an interval.
 </p>

From 3614019b23b6d9823e366fa46ac58fc259d56d77 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Mar 2013 14:06:41 +0000
Subject: [PATCH 49/52] Enhance pom

---
 pom.xml | 45 ++++++++++++++++++++++-----------------------
 1 file changed, 22 insertions(+), 23 deletions(-)

diff --git a/pom.xml b/pom.xml
index 8f27d7b87..734666c1b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -151,7 +151,7 @@
       </resource>
       <resource>
         <targetPath>META-INF</targetPath>
-        <directory>.</directory>
+        <directory>${basedir}</directory>
         <includes>
           <include>LICENSE.txt</include>
           <include>NOTICE.txt</include>
@@ -170,12 +170,12 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-clean-plugin</artifactId>
-        <version>2.4.1</version>
+        <version>2.5</version>
       </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-compiler-plugin</artifactId>
-        <version>2.3.2</version>
+        <version>3.0</version>
         <configuration>
           <verbose>true</verbose>
           <fork>true</fork>
@@ -232,7 +232,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-surefire-plugin</artifactId>
-        <version>2.12</version>
+        <version>2.13</version>
         <configuration>
           <includes>
             <include>**/TestAllPackages.java</include>
@@ -252,9 +252,9 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
-        <version>2.8.1</version>
+        <version>2.9</version>
         <configuration>
-          <linksource>false</linksource>
+          <linksource>true</linksource>
           <links>
             <link>http://download.oracle.com/javase/1.5.0/docs/api/</link>
           </links>
@@ -283,7 +283,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-source-plugin</artifactId>
-        <version>2.1.2</version>
+        <version>2.2.1</version>
         <executions>
           <execution>
             <id>attach-sources</id>
@@ -303,17 +303,27 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-site-plugin</artifactId>
-        <version>2.3</version>
+        <version>3.2</version>
       </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-repository-plugin</artifactId>
         <version>2.3.1</version>
       </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-resources-plugin</artifactId>
+        <version>2.6</version>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-deploy-plugin</artifactId>
+        <version>2.7</version>
+      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-assembly-plugin</artifactId>
-        <version>2.3</version>
+        <version>2.4</version>
         <configuration>
           <descriptors>
             <descriptor>src/main/assembly/dist.xml</descriptor>
@@ -335,7 +345,7 @@
         <artifactId>clirr-maven-plugin</artifactId>
         <version>2.3</version>
         <configuration>
-          <comparisonVersion>2.0</comparisonVersion>
+          <comparisonVersion>2.1</comparisonVersion>
         </configuration>
       </plugin>
     </plugins>
@@ -388,7 +398,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
-        <version>2.8.1</version>
+        <version>2.9</version>
         <configuration>
           <linksource>true</linksource>
           <links>
@@ -400,7 +410,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-surefire-report-plugin</artifactId>
-        <version>2.12</version>
+        <version>2.13</version>
         <configuration>
            <showSuccess>true</showSuccess>
         </configuration>
@@ -410,17 +420,6 @@
         <artifactId>maven-jxr-plugin</artifactId>
         <version>2.3</version>
       </plugin>
-      <!--plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-pmd-plugin</artifactId>
-        <version>2.5</version>
-        <configuration>
-          <linkXref>true</linkXref>
-          <sourceEncoding>utf-8</sourceEncoding>
-          <minimumTokens>100</minimumTokens>
-          <targetJdk>1.5</targetJdk>
-        </configuration>
-      </plugin-->
   	</plugins>
   </reporting>
   <distributionManagement>

From 639c9657af7ff013e64ccfcce6d17a8817330351 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Mar 2013 14:12:30 +0000
Subject: [PATCH 50/52] Remove tasks page

---
 src/site/site.xml       |  1 -
 src/site/xdoc/tasks.xml | 39 ---------------------------------------
 2 files changed, 40 deletions(-)
 delete mode 100644 src/site/xdoc/tasks.xml

diff --git a/src/site/site.xml b/src/site/site.xml
index 01ebf8672..81c04225c 100644
--- a/src/site/site.xml
+++ b/src/site/site.xml
@@ -55,7 +55,6 @@
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
       <item name="Test results" href="surefire-report.html"/>
       <item name="Mailing lists" href="mail-lists.html"/>
-      <item name="Tasks" href="tasks.html"/>
     </menu>
 
     <menu name="Joda">
diff --git a/src/site/xdoc/tasks.xml b/src/site/xdoc/tasks.xml
deleted file mode 100644
index 3de2d378c..000000000
--- a/src/site/xdoc/tasks.xml
+++ /dev/null
@@ -1,39 +0,0 @@
-<?xml version="1.0"?>
-
-<document>
-
- <properties>
-  <title>Java date and time API - Tasks outstanding</title>
-  <author>Stephen Colebourne</author>
- </properties>
-
- <body>
-
-<section name="Tasks outstanding">
-
-<p>
-The following tasks are on the possible TODO list - contact the mailing lists for more details:
-</p>
-
-<ul>
-<li>Add more chronologies - Hebrew, Persian, Hindu, Thai, Chinese, Japanese,...</li>
-<li>Consider formatting ordinal numbers, like 1st, 2nd, 3rd</li>
-<li>Consider allowing the text output to be altered</li>
-<li>Formatter switching by locale</li>
-<li>Date matching methods to find next date matching search criteria</li>
-</ul>
-
-<p>
-Would you like to volunteer?
-Please contact scolebourne.at.users.sourceforge.net or the <a href="mail-lists.html">mailing list</a>.
-</p>
-</section>
-
-</body>
-</document>
-
-
-
-
-
-

From 456e64b6f84127654ba17205d689f30ab1a2ce40 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Mar 2013 14:14:16 +0000
Subject: [PATCH 51/52] Direct users to GitHub issues

---
 RELEASE-NOTES.txt       |  5 ++++-
 pom.xml                 |  4 ++--
 src/site/xdoc/index.xml | 20 +++++++++++++++-----
 3 files changed, 21 insertions(+), 8 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 9164fc4d8..a7ea5c443 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -137,7 +137,10 @@ Scala users must manually add the Joda-Convert v1.2 dependency.
 
 Feedback
 --------
-All feedback is welcomed via the joda-interest mailing list.
+Feedback is best received using GitHub issues and Pull Requests.
+https://github.com/JodaOrg/joda-time/
+
+Feedback is also welcomed via the joda-interest mailing list.
 
 The Joda team
 http://joda-time.sourceforge.net
diff --git a/pom.xml b/pom.xml
index 734666c1b..b8359ce80 100644
--- a/pom.xml
+++ b/pom.xml
@@ -12,8 +12,8 @@
   <description>Date and time library to replace JDK date handling</description>
   <url>http://joda-time.sourceforge.net</url>
   <issueManagement>
-  	<system>Sourceforge</system>
-    <url>https://sourceforge.net/tracker/?group_id=97367&amp;atid=617889</url>
+    <system>GitHub</system>
+    <url>https://github.com/JodaOrg/joda-time/issues</url>
   </issueManagement>
   <inceptionYear>2002</inceptionYear>
   <mailingLists>
diff --git a/src/site/xdoc/index.xml b/src/site/xdoc/index.xml
index 621afa965..7b6f202d9 100644
--- a/src/site/xdoc/index.xml
+++ b/src/site/xdoc/index.xml
@@ -172,12 +172,22 @@ releases in the v1.x product line.
 
 <section name="Support">
 <p>
-Support on bugs, library usage or enhancement requests is available via:
+Support on bugs, library usage or enhancement requests is available on a best efforts basis.
+The best approach is to use <a href="https://github.com/JodaOrg/joda-time/issues/">GitHub issues</a> and Pull Requests.
+</p>
+<p>
+Alternative approaches include the joda-interest <a href="mail-lists.html">mailing list</a> (subscription required)
+and the joda-time <a href="http://sourceforge.net/projects/joda-time/forums/forum/337835">forum</a>.
+</p>
+<p>
+<br />
+</p>
+<p>
+<br />
+</p>
+<p>
+<br />
 </p>
-<ul>
-<li>the joda-interest <a href="mail-lists.html">mailing list</a>. Due to spam, you must be subscribed to post to the mailing list.</li>
-<li>the joda-time sourceforge <a href="http://sourceforge.net/projects/joda-time/forums/forum/337835">forum</a>.</li>
-</ul>
 </section>
 </body>
 </document>

From 7c95794520bf58e931c63bba2f1ca8baa383af1c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Mar 2013 14:20:20 +0000
Subject: [PATCH 52/52] Fix link

---
 src/site/xdoc/index.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/site/xdoc/index.xml b/src/site/xdoc/index.xml
index 7b6f202d9..cd310d50d 100644
--- a/src/site/xdoc/index.xml
+++ b/src/site/xdoc/index.xml
@@ -151,7 +151,7 @@ See the <a href="upgradeto220.html">upgrade notes</a> for full details.
 <p>
 Version 2.x is almost completely source and binary compatible with version 1.x.
 Key changes include the use of JDK 1.5 or later, generics, and the removal of some (but not all)
-deprecated methods. See the <a href="upgradeto220.html">upgrade notes</a> for full details
+deprecated methods. See the <a href="upgradeto200.html">upgrade notes</a> for full details
 including information on the corner cases that are not compatible.
 </p>
 <p>