From cd40f81a6f7557cdb526de52988cd158b744e2fd Mon Sep 17 00:00:00 2001
From: Michael Plump <plumpy@gmail.com>
Date: Tue, 19 Mar 2013 14:23:48 -0700
Subject: [PATCH 01/43] two tiny javadoc corrections

---
 src/main/java/org/joda/time/format/DateTimeFormatter.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java
index 9cbd3c2b9..c297522be 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java
@@ -771,7 +771,7 @@ public LocalDate parseLocalDate(String text) {
     }
 
     /**
-     * Parses only the local time from the given text, returning a new LocalDate.
+     * Parses only the local time from the given text, returning a new LocalTime.
      * <p>
      * This will parse the text fully according to the formatter, using the UTC zone.
      * Once parsed, only the local time will be used.
@@ -789,7 +789,7 @@ public LocalTime parseLocalTime(String text) {
     }
 
     /**
-     * Parses only the local date-time from the given text, returning a new LocalDate.
+     * Parses only the local date-time from the given text, returning a new LocalDateTime.
      * <p>
      * This will parse the text fully according to the formatter, using the UTC zone.
      * Once parsed, only the local date-time will be used.

From 3cfbe97aaf1e62123a4d7e45f55ec80efd8cdc8c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 20 Mar 2013 12:06:33 +0000
Subject: [PATCH 02/43] Update pom.xml

Add contributor
---
 pom.xml | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/pom.xml b/pom.xml
index b8359ce80..6777fb5c7 100644
--- a/pom.xml
+++ b/pom.xml
@@ -105,6 +105,9 @@
     <contributor>
       <name>Julen Parra</name>
     </contributor>
+    <contributor>
+      <name>Michael Plump</name>
+    </contributor>
     <contributor>
       <name>Ryan Propper</name>
     </contributor>

From 6d5104753470c130336e319a64009c0553b29c96 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 19 Apr 2013 15:31:46 +0100
Subject: [PATCH 03/43] Bump version

---
 RELEASE-NOTES.txt | 97 ++++-------------------------------------------
 pom.xml           |  2 +-
 2 files changed, 8 insertions(+), 91 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index a7ea5c443..dba6a25ee 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -1,10 +1,9 @@
-Joda-Time version 2.2
+Joda-Time version 2.3
 ---------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is the tenth release of Joda-Time.
 This release contains enhancements, bug fixes and a time zone update.
 JDK 1.5 or later is required.
 
@@ -17,32 +16,13 @@ of restrictions. If the license causes you problems please contact the mailing l
 ** http://joda-time.sourceforge.net/related.html **
 
 
-Enhancements since 2.1
+Enhancements since 2.2
 ----------------------
-- Change some StringBuffer uses to StringBuilder [3532330]
 
-- Add method to calculate the Julian Day
-  See DateTimeUtils
 
-- Add Danish translation of word-based periods (Kasper Laudrup)
-
-- Add Japanese translation of word-based periods (Hajime Senuma)
-  https://github.com/JodaOrg/joda-time/pull/9
-
-- Parsing of US short time-zone names
-  The time-zone names EST/EDT/CST/CDT/MST/MDT/PST/PDT/UT/UTC/GMT can now be parsed in a limited way.
-  This is enabled for formatter patterns of "z" (and "zz" or "zzz").
-  The builder continues to offer a better way of manually managing this.
-
-- Add new exception, IllegalInstantException
-  This allows applications to better capture problems with daylight savings gaps
-  The exception is a subclass of IllegalArgumentException, so existing logic will still work
-
-
-Compatibility with 2.1
+Compatibility with 2.2
 ----------------------
-Build system - No
- - Ant build removed. Build only on Maven now.
+Build system - Yes
 
 Binary compatible - Yes
 
@@ -53,79 +33,16 @@ Serialization compatible - Yes
 Data compatible - Yes, except
  - DateTimeZone data updated to version 2012j
 
-Semantic compatible - Yes, except
- - DateTimeFormatter.parseInto() retains the year if only month parsed (as it did in v1.x)
- - If a formatter cannot print or parse, it will now throw an exception instead of ignoring it
- - Format pattern "z" now has limited parsing abilities
+Semantic compatible - Yes
 
 
-Deprecations since 2.1
+Deprecations since 2.2
 ----------------------
 None
 
 
-Bug fixes since 2.1
+Bug fixes since 2.2
 -------------------
-- DateTime.millisOfDay().withMaximumValue()/withMinimumValue() [159]
-  Now handle daylight savings gaps
-  https://sourceforge.net/p/joda-time/bugs/159/
-
-- MonthDay add/subtract [3528941]
-  Addition and subtraction in MonthDay was fixed.
-  It previously didn't work when the start value was 29th February.
-
-- LocalDateTime.fromDateFields()
-  This used to fail before 1970 when the input had a milli-of-second field
-  Fixed to not throw an exception
-
-- LocalDateTime.fromCalendarFields()/LocalDateTime.fromDateFields()
-  This used to fail before year 1 as the era was ignored
-  Fixed to return the correct year
-  https://github.com/JodaOrg/joda-time/pull/8
-
-- MutableDateTime.setDate(ReadableInstant)  [163]
-  Fixed to handle cross-time-zone issues properly rather than always using UTC
-
-- BasicGJChronology.getDaysInMonthMaxForSet  [165]
-  Fixed calculate the correct maximum length if the input day-of-month value is less than 1
-
-- DateTimeFormatter.parseInto() [3522138]
-  The v2.0 changes to handle parsing of month/day on their own (for Feb 29th) cause
-  parseInto() to lose the year. This fix reverts behaviour to v1.x so that parseInto()
-  will use the supplied year, not the default year of the formatter.
-
-- DateTimeFormatter.isPrinter()/isParser() and related
-  The Javadoc for DateTimeFormatterBuilder specified behaviour when the formatter
-  could not print or could not parse, but the code didn't implement it
-  Now it does, which means that DateTimeFormatter.isPrinter()/isParser() are now correct.
-  The formatter will also now throw UnsupportedOperationException when unable to print/parse.
-
-- Period formatter [3564249]
-  Formatting did not correctly output values for negative milliseconds between zero and -1 second
-
-- FieldUtils.safeMultiply(long,int) [3520651]
-  Fix implementation to throw exception for (Long.MIN_VALUE, -1)
-
-- Fix TestReadableDurationConverter [3515086]
-  Test case didn't work if deafult time zone was UTC
-
-- Fix Duration string parsing for small negative numbers
-  Values between 0 and -1 exclusive previously parsed incorrectly
-  https://github.com/JodaOrg/joda-time/pull/10
-
-- Javadoc fix to BaseChronology [3513326]
-
-- Javadoc fix to Years [169]
-
-- Javadoc fix to LocalTime [171]
-
-- Javadoc clarify on formatter builder [mailing list email]
-
-- Fixed Spanish translation of day for periods - dia now has accented i
-  https://github.com/JodaOrg/joda-time/pull/5
-
-- Change maven build to use exec-maven-plugin [158]
-  https://sourceforge.net/p/joda-time/bugs/158/
 
 
 Scala
diff --git a/pom.xml b/pom.xml
index 6777fb5c7..31c07c669 100644
--- a/pom.xml
+++ b/pom.xml
@@ -8,7 +8,7 @@
   <artifactId>joda-time</artifactId>
   <packaging>jar</packaging>
   <name>Joda time</name>
-  <version>2.2</version>
+  <version>2.3-SNAPSHOT</version>
   <description>Date and time library to replace JDK date handling</description>
   <url>http://joda-time.sourceforge.net</url>
   <issueManagement>

From 57eb4cbb9044771cd46a9eee0c62016618930226 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 19 Apr 2013 15:34:57 +0100
Subject: [PATCH 04/43] Fix ZoneInfoCompiler and DateTimeZoneBuilder
 multi-threading

Fixes #18
---
 RELEASE-NOTES.txt                             |  3 +++
 pom.xml                                       |  4 ++++
 .../org/joda/time/tz/ZoneInfoCompiler.java    |  9 +++----
 .../java/org/joda/time/tz/TestCompiler.java   | 24 +++++++++++++++++++
 4 files changed, 36 insertions(+), 4 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index dba6a25ee..e5563f617 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -43,6 +43,9 @@ None
 
 Bug fixes since 2.2
 -------------------
+- ZoneInfoCompiler and DateTimeZoneBuilder multi-threading [#18]
+  A thread local variable was previously only initialised in one thread causing NPE
+  https://github.com/JodaOrg/joda-time/issues/18
 
 
 Scala
diff --git a/pom.xml b/pom.xml
index 31c07c669..214c94396 100644
--- a/pom.xml
+++ b/pom.xml
@@ -56,6 +56,10 @@
       <name>Dave Brosius</name>
       <url>https://github.com/mebigfatguy</url>
     </contributor>
+    <contributor>
+      <name>Luc Claes</name>
+      <url>https://github.com/lucclaes</url>
+    </contributor>
     <contributor>
       <name>Dan Cojocar</name>
       <url>https://github.com/dancojocar</url>
diff --git a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
index 6efe07166..64da5ea5c 100644
--- a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
+++ b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
@@ -65,10 +65,11 @@
 
     static Chronology cLenientISO;
 
-    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();
-    static {
-        cVerbose.set(Boolean.FALSE);
-    }
+    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>() {
+        protected Boolean initialValue() {
+            return Boolean.FALSE;
+        }
+    };
 
     /**
      * Gets a flag indicating that verbose logging is required.
diff --git a/src/test/java/org/joda/time/tz/TestCompiler.java b/src/test/java/org/joda/time/tz/TestCompiler.java
index eec41d570..fc6cc8656 100644
--- a/src/test/java/org/joda/time/tz/TestCompiler.java
+++ b/src/test/java/org/joda/time/tz/TestCompiler.java
@@ -84,6 +84,30 @@ protected void tearDown() throws Exception {
         DateTimeZone.setDefault(originalDateTimeZone);
     }
 
+    //-----------------------------------------------------------------------
+    public void testDateTimeZoneBuilder() throws Exception {
+        // test multithreading, issue #18
+        getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true);
+        final DateTimeZone[] zone = new DateTimeZone[1];
+        Thread t = new Thread(new Runnable() {
+            public void run() {
+                zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true);
+            }
+        });
+        t.start();
+        t.join();
+        assertNotNull(zone[0]);
+    }
+
+    private DateTimeZoneBuilder getTestDataTimeZoneBuilder() {
+         return new DateTimeZoneBuilder()
+             .addCutover(1601, 'w', 1, 1, 1, false, 7200000)
+             .setStandardOffset(3600000)
+             .addRecurringSavings("", 3600000, 1601, Integer.MAX_VALUE, 'w', 3, -1, 1, false, 7200000)
+             .addRecurringSavings("", 0, 1601, Integer.MAX_VALUE, 'w', 10, -1, 1, false, 10800000);
+    }    
+
+    //-----------------------------------------------------------------------
     public void testCompile() throws Exception {
         Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE);
         DateTimeZone tz = provider.getZone("America/Los_Angeles");

From 02d02622f5a73ef4babd8856272e4d4d84556909 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 19 Apr 2013 15:38:45 +0100
Subject: [PATCH 05/43] Update to time-zone data 2013b

Fixes #14
---
 RELEASE-NOTES.txt                             |   2 +-
 src/main/java/org/joda/time/tz/src/Readme.txt |   2 +-
 src/main/java/org/joda/time/tz/src/africa     |  55 +++++++-
 src/main/java/org/joda/time/tz/src/antarctica |   6 +-
 src/main/java/org/joda/time/tz/src/asia       |  48 ++++++-
 .../java/org/joda/time/tz/src/australasia     |  11 +-
 src/main/java/org/joda/time/tz/src/europe     | 127 +++++++++++++++++-
 .../java/org/joda/time/tz/src/northamerica    |  56 +++++---
 .../java/org/joda/time/tz/src/southamerica    |  66 +++++----
 9 files changed, 307 insertions(+), 66 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index e5563f617..d7780e59f 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -31,7 +31,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
- - DateTimeZone data updated to version 2012j
+ - DateTimeZone data updated to version 2013b
 
 Semantic compatible - Yes
 
diff --git a/src/main/java/org/joda/time/tz/src/Readme.txt b/src/main/java/org/joda/time/tz/src/Readme.txt
index 2dc66f42e..ee02bfab0 100644
--- a/src/main/java/org/joda/time/tz/src/Readme.txt
+++ b/src/main/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2012j.
+http://www.twinsun.com/tz/tz-link.htm, version 2013b.
diff --git a/src/main/java/org/joda/time/tz/src/africa b/src/main/java/org/joda/time/tz/src/africa
index f378cc452..5f4f8ebc5 100644
--- a/src/main/java/org/joda/time/tz/src/africa
+++ b/src/main/java/org/joda/time/tz/src/africa
@@ -846,6 +846,41 @@ Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
 # 3:00 am Friday, July 20, 2012 and will again be advanced by 60 minutes
 # August 20, 2012 from 2:00 am.
 
+# From Paul Eggert (2013-03-06):
+# Morocco's daylight-saving transitions due to Ramadan seem to be
+# announced a bit in advance.  On 2012-07-11 the Moroccan government
+# announced that year's Ramadan daylight-saving transitions would be
+# 2012-07-20 and 2012-08-20; see
+# <http://www.mmsp.gov.ma/fr/actualites.aspx?id=288>.
+#
+# To estimate what the Moroccan government will do in future years,
+# transition dates for 2013 through 2021 were determined by running
+# the following program under GNU Emacs 24.3:
+#
+# (let ((islamic-year 1434))
+#   (while (< islamic-year 1444)
+#     (let ((a
+#	     (calendar-gregorian-from-absolute
+#	      (calendar-islamic-to-absolute (list 9 1 islamic-year))))
+#	    (b
+#	     (calendar-gregorian-from-absolute
+#	      (calendar-islamic-to-absolute (list 10 1 islamic-year)))))
+#	(insert
+#	 (format
+#	  (concat "Rule\tMorocco\t%d\tonly\t-\t%s\t %2d\t 3:00\t0\t-\n"
+#		  "Rule\tMorocco\t%d\tonly\t-\t%s\t %2d\t 2:00\t1:00\tS\n")
+#	  (car (cdr (cdr a))) (calendar-month-name (car a) t) (car (cdr a))
+#	  (car (cdr (cdr b))) (calendar-month-name (car b) t) (car (cdr b)))))
+#     (setq islamic-year (+ 1 islamic-year))))
+#
+# with the results hand-edited for 2020-2022, when the normal spring-forward
+# date falls during the estimated Ramadan.
+#
+# From 2023 through 2038 Ramadan is not predicted to overlap with
+# daylight saving time.  Starting in 2039 there will be overlap again,
+# but 32-bit time_t values roll around in 2038 so for now do not worry
+# about dates after 2038.
+
 # RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 
 Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
@@ -871,10 +906,28 @@ Rule	Morocco	2010	only	-	May	 2	 0:00	1:00	S
 Rule	Morocco	2010	only	-	Aug	 8	 0:00	0	-
 Rule	Morocco	2011	only	-	Apr	 3	 0:00	1:00	S
 Rule	Morocco	2011	only	-	Jul	 31	 0	0	-
-Rule	Morocco	2012	max	-	Apr	 lastSun 2:00	1:00	S
+Rule	Morocco	2012	2019	-	Apr	 lastSun 2:00	1:00	S
 Rule	Morocco	2012	max	-	Sep	 lastSun 3:00	0	-
 Rule	Morocco	2012	only	-	Jul	 20	 3:00	0	-
 Rule	Morocco	2012	only	-	Aug	 20	 2:00	1:00	S
+Rule	Morocco	2013	only	-	Jul	  9	 3:00	0	-
+Rule	Morocco	2013	only	-	Aug	  8	 2:00	1:00	S
+Rule	Morocco	2014	only	-	Jun	 29	 3:00	0	-
+Rule	Morocco	2014	only	-	Jul	 29	 2:00	1:00	S
+Rule	Morocco	2015	only	-	Jun	 18	 3:00	0	-
+Rule	Morocco	2015	only	-	Jul	 18	 2:00	1:00	S
+Rule	Morocco	2016	only	-	Jun	  7	 3:00	0	-
+Rule	Morocco	2016	only	-	Jul	  7	 2:00	1:00	S
+Rule	Morocco	2017	only	-	May	 27	 3:00	0	-
+Rule	Morocco	2017	only	-	Jun	 26	 2:00	1:00	S
+Rule	Morocco	2018	only	-	May	 16	 3:00	0	-
+Rule	Morocco	2018	only	-	Jun	 15	 2:00	1:00	S
+Rule	Morocco	2019	only	-	May	  6	 3:00	0	-
+Rule	Morocco	2019	only	-	Jun	  5	 2:00	1:00	S
+Rule	Morocco	2020	only	-	May	 24	 2:00	1:00	S
+Rule	Morocco	2021	only	-	May	 13	 2:00	1:00	S
+Rule	Morocco	2022	only	-	May	  3	 2:00	1:00	S
+Rule	Morocco	2023	max	-	Apr	 lastSun 2:00	1:00	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
diff --git a/src/main/java/org/joda/time/tz/src/antarctica b/src/main/java/org/joda/time/tz/src/antarctica
index f55cbde05..d55924bdd 100644
--- a/src/main/java/org/joda/time/tz/src/antarctica
+++ b/src/main/java/org/joda/time/tz/src/antarctica
@@ -50,10 +50,8 @@ Rule	ChileAQ	2009	only	-	Mar	Sun>=9	3:00u	0	-
 Rule	ChileAQ	2010	only	-	Apr	Sun>=1	3:00u	0	-
 Rule	ChileAQ	2011	only	-	May	Sun>=2	3:00u	0	-
 Rule	ChileAQ	2011	only	-	Aug	Sun>=16	4:00u	1:00	S
-Rule	ChileAQ	2012	only	-	Apr	Sun>=23	3:00u	0	-
-Rule	ChileAQ	2012	only	-	Sep	Sun>=2	4:00u	1:00	S
-Rule	ChileAQ	2013	max	-	Mar	Sun>=9	3:00u	0	-
-Rule	ChileAQ	2013	max	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	ChileAQ	2012	max	-	Apr	Sun>=23	3:00u	0	-
+Rule	ChileAQ	2012	max	-	Sep	Sun>=2	4:00u	1:00	S
 
 # These rules are stolen from the `australasia' file.
 Rule	AusAQ	1917	only	-	Jan	 1	0:01	1:00	-
diff --git a/src/main/java/org/joda/time/tz/src/asia b/src/main/java/org/joda/time/tz/src/asia
index d5562c846..1f09fa35a 100644
--- a/src/main/java/org/joda/time/tz/src/asia
+++ b/src/main/java/org/joda/time/tz/src/asia
@@ -6,7 +6,7 @@
 # go ahead and edit the file (and please send any changes to
 # tz@iana.org for general use in the future).
 
-# From Paul Eggert (2006-03-22):
+# From Paul Eggert (2013-02-21):
 #
 # A good source for time zone historical data outside the U.S. is
 # Thomas G. Shanks and Rique Pottenger, The International Atlas (6th edition),
@@ -25,6 +25,10 @@
 # Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
 # I found in the UCLA library.
 #
+# For data circa 1899, a common source is:
+# Milne J. Civil time. Geogr J. 1899 Feb;13(2):173-94
+# <http://www.jstor.org/stable/1774359>.
+#
 # A reliable and entertaining source about time zones is
 # Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
 #
@@ -279,9 +283,12 @@ Zone	Asia/Brunei	7:39:40 -	LMT	1926 Mar   # Bandar Seri Begawan
 			8:00	-	BNT
 
 # Burma / Myanmar
+
+# Milne says 6:24:40 was the meridian of the time ball observatory at Rangoon.
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Rangoon	6:24:40 -	LMT	1880		# or Yangon
-			6:24:36	-	RMT	1920	   # Rangoon Mean Time?
+			6:24:40	-	RMT	1920	   # Rangoon Mean Time?
 			6:30	-	BURT	1942 May   # Burma Time
 			9:00	-	JST	1945 May 3
 			6:30	-	MMT		   # Myanmar Time
@@ -384,7 +391,8 @@ Zone	Asia/Harbin	8:26:44	-	LMT	1928 # or Haerbin
 			8:00	PRC	C%sT
 # Zhongyuan Time ("Central plain Time")
 # most of China
-Zone	Asia/Shanghai	8:05:52	-	LMT	1928
+# Milne gives 8:05:56.7; round to nearest.
+Zone	Asia/Shanghai	8:05:57	-	LMT	1928
 			8:00	Shang	C%sT	1949
 			8:00	PRC	C%sT
 # Long-shu Time (probably due to Long and Shu being two names of that area)
@@ -481,6 +489,10 @@ Zone	Asia/Kashgar	5:03:56	-	LMT	1928 # or Kashi or Kaxgar
 			8:00	PRC	C%sT
 
 
+# Hong Kong (Xianggang)
+
+# Milne gives 7:36:41.7; round this.
+
 # From Lee Yiu Chung (2009-10-24):
 # I found there are some mistakes for the...DST rule for Hong
 # Kong. [According] to the DST record from Hong Kong Observatory (actually,
@@ -547,7 +559,6 @@ Zone	Asia/Kashgar	5:03:56	-	LMT	1928 # or Kashi or Kaxgar
 # The Japanese surrender of Hong Kong was signed 1945-09-15.
 # For lack of anything better, use start of those days as the transition times.
 
-# Hong Kong (Xianggang)
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	HK	1941	only	-	Apr	1	3:30	1:00	S
 Rule	HK	1941	only	-	Sep	30	3:30	0	-
@@ -569,7 +580,7 @@ Rule	HK	1973	only	-	Dec	30	3:30	1:00	S
 Rule	HK	1979	only	-	May	Sun>=8	3:30	1:00	S
 Rule	HK	1979	only	-	Oct	Sun>=16	3:30	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Hong_Kong	7:36:36 -	LMT	1904 Oct 30
+Zone	Asia/Hong_Kong	7:36:42 -	LMT	1904 Oct 30
 			8:00	HK	HK%sT	1941 Dec 25
 			9:00	-	JST	1945 Sep 15
 			8:00	HK	HK%sT
@@ -646,6 +657,9 @@ Zone	Asia/Macau	7:34:20 -	LMT	1912
 ###############################################################################
 
 # Cyprus
+#
+# Milne says the Eastern Telegraph Company used 2:14:00.  Stick with LMT.
+#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Cyprus	1975	only	-	Apr	13	0:00	1:00	S
 Rule	Cyprus	1975	only	-	Oct	12	0:00	0	-
@@ -1804,8 +1818,11 @@ Zone	Asia/Kathmandu	5:41:16 -	LMT	1920
 			5:45	-	NPT	# Nepal Time
 
 # Oman
+
+# Milne says 3:54:24 was the meridian of the Muscat Tidal Observatory.
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Muscat	3:54:20 -	LMT	1920
+Zone	Asia/Muscat	3:54:24 -	LMT	1920
 			4:00	-	GST
 
 # Pakistan
@@ -2400,6 +2417,13 @@ Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
 # no information
 
 # Sri Lanka
+
+# From Paul Eggert (2013-02-21):
+# Milne says "Madras mean time use from May 1, 1898.  Prior to this Colombo
+# mean time, 5h. 4m. 21.9s. F., was used."  But 5:04:21.9 differs considerably
+# from Colombo's meridian 5:19:24, so for now ignore Milne and stick with
+# Shanks and Pottenger.
+
 # From Paul Eggert (1996-09-03):
 # "Sri Lanka advances clock by an hour to avoid blackout"
 # (www.virtual-pc.com/lankaweb/news/items/240596-2.html, 1996-05-24,
@@ -2699,6 +2723,12 @@ Zone	Asia/Tashkent	4:37:12 -	LMT	1924 May  2
 
 # Vietnam
 
+# From Paul Eggert (2013-02-21):
+# Milne gives 7:16:56 for the meridian of Saigon in 1899, as being
+# used in Lower Laos, Cambodia, and Annam.  But this is quite a ways
+# from Saigon's location.  For now, ignore this and stick with Shanks
+# and Pottenger.
+
 # From Arthur David Olson (2008-03-18):
 # The English-language name of Vietnam's most populous city is "Ho Chi Min City";
 # we use Ho_Chi_Minh below to avoid a name of more than 14 characters.
@@ -2712,6 +2742,10 @@ Zone	Asia/Ho_Chi_Minh	7:06:40 -	LMT	1906 Jun  9
 			7:00	-	ICT
 
 # Yemen
+
+# Milne says 2:59:54 was the meridian of the saluting battery at Aden,
+# and that Yemen was at 1:55:56, the meridian of the Hagia Sophia.
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Aden	3:00:48	-	LMT	1950
+Zone	Asia/Aden	2:59:54	-	LMT	1950
 			3:00	-	AST
diff --git a/src/main/java/org/joda/time/tz/src/australasia b/src/main/java/org/joda/time/tz/src/australasia
index bef6f2042..58df73d5d 100644
--- a/src/main/java/org/joda/time/tz/src/australasia
+++ b/src/main/java/org/joda/time/tz/src/australasia
@@ -246,6 +246,9 @@ Zone	Indian/Cocos	6:27:40	-	LMT	1900
 			6:30	-	CCT	# Cocos Islands Time
 
 # Fiji
+
+# Milne gives 11:55:44 for Suva.
+
 # From Alexander Krivenyshev (2009-11-10):
 # According to Fiji Broadcasting Corporation,  Fiji plans to re-introduce DST
 # from November 29th 2009  to April 25th 2010.
@@ -339,7 +342,7 @@ Rule	Fiji	2010	max	-	Oct	Sun>=18	2:00	1:00	S
 Rule	Fiji	2011	only	-	Mar	Sun>=1	3:00	0	-
 Rule	Fiji	2012	max	-	Jan	Sun>=18	3:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Fiji	11:53:40 -	LMT	1915 Oct 26	# Suva
+Zone	Pacific/Fiji	11:55:44 -	LMT	1915 Oct 26	# Suva
 			12:00	Fiji	FJ%sT	# Fiji Time
 
 # French Polynesia
@@ -782,7 +785,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # go ahead and edit the file (and please send any changes to
 # tz@iana.org for general use in the future).
 
-# From Paul Eggert (2006-03-22):
+# From Paul Eggert (2013-02-21):
 # A good source for time zone historical data outside the U.S. is
 # Thomas G. Shanks and Rique Pottenger, The International Atlas (6th edition),
 # San Diego: ACS Publications, Inc. (2003).
@@ -800,6 +803,10 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
 # I found in the UCLA library.
 #
+# For data circa 1899, a common source is:
+# Milne J. Civil time. Geogr J. 1899 Feb;13(2):173-94
+# <http://www.jstor.org/stable/1774359>.
+#
 # A reliable and entertaining source about time zones is
 # Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
 #
diff --git a/src/main/java/org/joda/time/tz/src/europe b/src/main/java/org/joda/time/tz/src/europe
index ad9816c10..5081a525c 100644
--- a/src/main/java/org/joda/time/tz/src/europe
+++ b/src/main/java/org/joda/time/tz/src/europe
@@ -30,6 +30,12 @@
 #	William Willett, The Waste of Daylight, 19th edition
 #	</a> (1914-03)
 #
+#	Milne J. Civil time. Geogr J. 1899 Feb;13(2):173-94
+#	<http://www.jstor.org/stable/1774359>.  He writes:
+#	"It is requested that corrections and additions to these tables
+#	may be sent to Mr. John Milne, Royal Geographical Society,
+#	Savile Row, London."  Nowadays please email them to tz@iana.org.
+#
 #	Brazil's Departamento Servico da Hora (DSH),
 #	<a href="http://pcdsh01.on.br/HISTHV.htm">
 #	History of Summer Time
@@ -666,6 +672,8 @@ Zone	Europe/Andorra	0:06:04 -	LMT	1901
 
 # Austria
 
+# Milne says Vienna time was 1:05:21.
+
 # From Paul Eggert (2006-03-22): Shanks & Pottenger give 1918-06-16 and
 # 1945-11-18, but the Austrian Federal Office of Metrology and
 # Surveying (BEV) gives 1918-09-16 and for Vienna gives the "alleged"
@@ -683,7 +691,7 @@ Rule	Austria	1948	only	-	Apr	18	2:00s	1:00	S
 Rule	Austria	1980	only	-	Apr	 6	0:00	1:00	S
 Rule	Austria	1980	only	-	Sep	28	0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vienna	1:05:20 -	LMT	1893 Apr
+Zone	Europe/Vienna	1:05:21 -	LMT	1893 Apr
 			1:00	C-Eur	CE%sT	1920
 			1:00	Austria	CE%sT	1940 Apr  1 2:00s
 			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
@@ -1239,6 +1247,21 @@ Zone	Europe/Berlin	0:53:28 -	LMT	1893 Apr
 			1:00	Germany	CE%sT	1980
 			1:00	EU	CE%sT
 
+# From Tobias Conradi (2011-09-12):
+# Busingen <http://www.buesingen.de>, surrounded by the Swiss canton
+# Schaffhausen, did not start observing DST in 1980 as the rest of DE
+# (West Germany at that time) and DD (East Germany at that time) did.
+# DD merged into DE, the area is currently covered by code DE in ISO 3166-1,
+# which in turn is covered by the zone Europe/Berlin.
+#
+# Source for the time in Busingen 1980:
+# http://www.srf.ch/player/video?id=c012c029-03b7-4c2b-9164-aa5902cd58d3
+
+# From Arthur David Olson (2012-03-03):
+# Busingen and Zurich have shared clocks since 1970.
+
+Link	Europe/Zurich	Europe/Busingen
+
 # Georgia
 # Please see the "asia" file for Asia/Tbilisi.
 # Herodotus (Histories, IV.45) says Georgia north of the Phasis (now Rioni)
@@ -2043,6 +2066,70 @@ Zone Europe/Bucharest	1:44:24 -	LMT	1891 Oct
 
 # Russia
 
+# From Alexander Krivenyshev (2011-09-15):
+# Based on last Russian Government Decree # 725 on August 31, 2011
+# (Government document
+# <a href="http://www.government.ru/gov/results/16355/print/">
+# http://www.government.ru/gov/results/16355/print/
+# </a>
+# in Russian)
+# there are few corrections have to be made for some Russian time zones...
+# All updated Russian Time Zones were placed in table and translated to English
+# by WorldTimeZone.com at the link below:
+# <a href="http://www.worldtimezone.com/dst_news/dst_news_russia36.htm">
+# http://www.worldtimezone.com/dst_news/dst_news_russia36.htm
+# </a>
+
+# From Sanjeev Gupta (2011-09-27):
+# Scans of [Decree #23 of January 8, 1992] are available at:
+# <a href="http://government.consultant.ru/page.aspx?1223966">
+# http://government.consultant.ru/page.aspx?1223966
+# They are in Cyrillic letters (presumably Russian).
+
+# From Arthur David Olson (2012-05-09):
+# Regarding the instant when clocks in time-zone-shifting parts of Russia
+# changed in September 2011:
+#
+# One source is
+# < a href="http://government.ru/gov/results/16355/>
+# http://government.ru/gov/results/16355/
+# </a>
+# which, according to translate.google.com, begins "Decree of August 31,
+# 2011 No 725" and contains no other dates or "effective date" information.
+#
+# Another source is
+# <a href="http://www.rg.ru/2011/09/06/chas-zona-dok.html">
+# http://www.rg.ru/2011/09/06/chas-zona-dok.html
+# </a>
+# which, according to translate.google.com, begins "Resolution of the
+# Government of the Russian Federation on August 31, 2011 N 725" and also
+# contains "Date first official publication: September 6, 2011 Posted on:
+# in the 'RG' - Federal Issue number 5573 September 6, 2011" but which
+# does not contain any "effective date" information.
+#
+# Another source is
+# <a href="http://en.wikipedia.org/wiki/Oymyakonsky_District#cite_note-RuTime-7">
+# http://en.wikipedia.org/wiki/Oymyakonsky_District#cite_note-RuTime-7
+# </a>
+# which, in note 8, contains "Resolution #725 of August 31, 2011...
+# Effective as of after 7 days following the day of the official publication"
+# but which does not contain any reference to September 6, 2011.
+#
+# The Wikipedia article refers to
+# <a href="http://base.consultant.ru/cons/cgi/online.cgi?req=doc;base=LAW;n=118896">
+# http://base.consultant.ru/cons/cgi/online.cgi?req=doc;base=LAW;n=118896
+# </a>
+# which seems to copy the text of the government.ru page.
+#
+# Tobias Conradi combines Wikipedia's
+# "as of after 7 days following the day of the official publication"
+# with www.rg.ru's "Date of first official publication: September 6, 2011" to get
+# September 13, 2011 as the cutover date (unusually, a Tuesday, as Tobias Conradi notes).
+#
+# None of the sources indicates a time of day for changing clocks.
+#
+# Go with 2011-09-13 0:00s.
+
 # From Paul Eggert (2006-03-22):
 # Except for Moscow after 1919-07-01, I invented the time zone abbreviations.
 # Moscow time zone abbreviations after 1919-07-01, and Moscow rules after 1991,
@@ -2270,14 +2357,32 @@ Zone Asia/Yakutsk	 8:38:40 -	LMT	1919 Dec 15
 # [parts of] Respublika Sakha (Yakutiya).
 
 # From Oscar van Vlijmen (2009-11-29):
-# The Sakha districts are: Bulunskij, Verkhoyanskij, Tomponskij, Ust'-Majskij,
-# Ust'-Yanskij.
+# The Sakha districts are: Bulunskij, Verkhoyanskij, ... Ust'-Yanskij.
 Zone Asia/Vladivostok	 8:47:44 -	LMT	1922 Nov 15
 			 9:00	-	VLAT	1930 Jun 21 # Vladivostok Time
 			10:00	Russia	VLA%sT	1991 Mar 31 2:00s
 			 9:00	Russia	VLA%sST	1992 Jan 19 2:00s
 			10:00	Russia	VLA%sT	2011 Mar 27 2:00s
 			11:00	-	VLAT
+
+# From Arthur David Olson (2012-05-09):
+# Tomponskij and Ust'-Majskij switched from Vladivostok time to Yakutsk time
+# in 2011.
+#
+# From Paul Eggert (2012-11-25):
+# Shanks and Pottenger (2003) has Khandyga on Yakutsk time.
+# Make a wild guess that it switched to Vladivostok time in 2004.
+# This transition is no doubt wrong, but we have no better info.
+#
+Zone Asia/Khandyga	 9:02:13 -	LMT	1919 Dec 15
+			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
+			 9:00	Russia	YAK%sT	1991 Mar 31 2:00s
+			 8:00	Russia	YAK%sT	1992 Jan 19 2:00s
+			 9:00	Russia	YAK%sT	2004
+			10:00	Russia	VLA%sT	2011 Mar 27 2:00s
+			11:00	-	VLAT	2011 Sep 13 0:00s # Decree 725?
+			10:00	-	YAKT
+
 #
 # Sakhalinskaya oblast'.
 # The Zone name should be Yuzhno-Sakhalinsk, but that's too long.
@@ -2296,14 +2401,26 @@ Zone Asia/Sakhalin	 9:30:48 -	LMT	1905 Aug 23
 
 # From Oscar van Vlijmen (2009-11-29):
 # The Sakha districts are: Abyjskij, Allaikhovskij, Verkhhhnekolymskij, Momskij,
-# Nizhnekolymskij, Ojmyakonskij, Srednekolymskij.
+# Nizhnekolymskij, ... Srednekolymskij.
 Zone Asia/Magadan	10:03:12 -	LMT	1924 May  2
 			10:00	-	MAGT	1930 Jun 21 # Magadan Time
 			11:00	Russia	MAG%sT	1991 Mar 31 2:00s
 			10:00	Russia	MAG%sT	1992 Jan 19 2:00s
 			11:00	Russia	MAG%sT	2011 Mar 27 2:00s
 			12:00	-	MAGT
-#
+
+# From Arthur David Olson (2012-05-09):
+# Ojmyakonskij and the Kuril Islands switched from
+# Magadan time to Vladivostok time in 2011.
+Zone Asia/Ust-Nera	 9:32:54 -	LMT	1919 Dec 15
+			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
+			 9:00	Russia	YAKT	1981 Apr  1
+			11:00	Russia	MAG%sT	1991 Mar 31 2:00s
+			10:00	Russia	MAG%sT	1992 Jan 19 2:00s
+			11:00	Russia	MAG%sT	2011 Mar 27 2:00s
+			12:00	-	MAGT	2011 Sep 13 0:00s # Decree 725?
+			11:00	-	VLAT
+
 # From Oscar van Vlijmen (2001-08-25): [This region consists of]
 # Kamchatskaya oblast', Koryakskij avtonomnyj okrug.
 #
diff --git a/src/main/java/org/joda/time/tz/src/northamerica b/src/main/java/org/joda/time/tz/src/northamerica
index 772d7a439..1964903eb 100644
--- a/src/main/java/org/joda/time/tz/src/northamerica
+++ b/src/main/java/org/joda/time/tz/src/northamerica
@@ -1019,6 +1019,9 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 #	William Willett, The Waste of Daylight, 19th edition
 #	</a> (1914-03)
 #
+#	Milne J. Civil time. Geogr J. 1899 Feb;13(2):173-94
+#	<http://www.jstor.org/stable/1774359>.
+#
 # See the `europe' file for Greenland.
 
 # Canada
@@ -2554,6 +2557,8 @@ Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
 
 # Bahamas
 #
+# For 1899 Milne gives -5:09:29.5; round that.
+#
 # From Sue Williams (2006-12-07):
 # The Bahamas announced about a month ago that they plan to change their DST
 # rules to sync with the U.S. starting in 2007....
@@ -2563,11 +2568,14 @@ Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
 Rule	Bahamas	1964	1975	-	Oct	lastSun	2:00	0	S
 Rule	Bahamas	1964	1975	-	Apr	lastSun	2:00	1:00	D
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Nassau	-5:09:24 -	LMT	1912 Mar 2
+Zone	America/Nassau	-5:09:30 -	LMT	1912 Mar 2
 			-5:00	Bahamas	E%sT	1976
 			-5:00	US	E%sT
 
 # Barbados
+
+# For 1899 Milne gives -3:58:29.2; round that.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Barb	1977	only	-	Jun	12	2:00	1:00	D
 Rule	Barb	1977	1978	-	Oct	Sun>=1	2:00	0	S
@@ -2575,8 +2583,8 @@ Rule	Barb	1978	1980	-	Apr	Sun>=15	2:00	1:00	D
 Rule	Barb	1979	only	-	Sep	30	2:00	0	S
 Rule	Barb	1980	only	-	Sep	25	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Barbados	-3:58:28 -	LMT	1924		# Bridgetown
-			-3:58:28 -	BMT	1932	  # Bridgetown Mean Time
+Zone America/Barbados	-3:58:29 -	LMT	1924		# Bridgetown
+			-3:58:29 -	BMT	1932	  # Bridgetown Mean Time
 			-4:00	Barb	A%sT
 
 # Belize
@@ -2594,6 +2602,9 @@ Zone	America/Belize	-5:52:48 -	LMT	1912 Apr
 
 # Bermuda
 
+# For 1899 Milne gives -4:19:18.3 as the meridian of the clock tower,
+# Bermuda dockyard, Ireland I; round that.
+
 # From Dan Jones, reporting in The Royal Gazette (2006-06-26):
 
 # Next year, however, clocks in the US will go forward on the second Sunday
@@ -2603,7 +2614,7 @@ Zone	America/Belize	-5:52:48 -	LMT	1912 Apr
 # http://www.theroyalgazette.com/apps/pbcs.dll/article?AID=/20060529/NEWS/105290135
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Bermuda	-4:19:04 -	LMT	1930 Jan  1 2:00    # Hamilton
+Zone Atlantic/Bermuda	-4:19:18 -	LMT	1930 Jan  1 2:00    # Hamilton
 			-4:00	-	AST	1974 Apr 28 2:00
 			-4:00	Bahamas	A%sT	1976
 			-4:00	US	A%sT
@@ -2615,6 +2626,9 @@ Zone	America/Cayman	-5:25:32 -	LMT	1890		# Georgetown
 			-5:00	-	EST
 
 # Costa Rica
+
+# Milne gives -5:36:13.3 as San Jose mean time; round to nearest.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	CR	1979	1980	-	Feb	lastSun	0:00	1:00	D
 Rule	CR	1979	1980	-	Jun	Sun>=1	0:00	0	S
@@ -2625,14 +2639,19 @@ Rule	CR	1991	only	-	Jul	 1	0:00	0	S
 Rule	CR	1992	only	-	Mar	15	0:00	0	S
 # There are too many San Joses elsewhere, so we'll use `Costa Rica'.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
-			-5:36:20 -	SJMT	1921 Jan 15 # San Jose Mean Time
+Zone America/Costa_Rica	-5:36:13 -	LMT	1890		# San Jose
+			-5:36:13 -	SJMT	1921 Jan 15 # San Jose Mean Time
 			-6:00	CR	C%sT
 # Coco
 # no information; probably like America/Costa_Rica
 
 # Cuba
 
+# From Paul Eggert (2013-02-21):
+# Milne gives -5:28:50.45 for the observatory at Havana, -5:29:23.57
+# for the port, and -5:30 for meteorological observations.
+# For now, stick with Shanks & Pottenger.
+
 # From Arthur David Olson (1999-03-29):
 # The 1999-03-28 exhibition baseball game held in Havana, Cuba, between
 # the Cuban National Team and the Baltimore Orioles was carried live on
@@ -2981,24 +3000,21 @@ Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
 # apparently using the same start and end date as USA/Canada.
 # So this means they have already changed their time.
 #
-# (Sources in French):
-# <a href="http://www.alterpresse.org/spip.php?article12510">
 # http://www.alterpresse.org/spip.php?article12510
-# </a>
-# <a href="http://radiovision2000haiti.net/home/?p=13253">
 # http://radiovision2000haiti.net/home/?p=13253
-# </a>
 #
-# Our coverage:
-# <a href="http://www.timeanddate.com/news/time/haiti-dst-2012.html">
-# http://www.timeanddate.com/news/time/haiti-dst-2012.html
-# </a>
-
 # From Arthur David Olson (2012-03-11):
 # The alterpresse.org source seems to show a US-style leap from 2:00 a.m. to
 # 3:00 a.m. rather than the traditional Haitian jump at midnight.
-# Assume a US-style fall back as well XXX.
-# Do not yet assume that the change carries forward past 2012 XXX.
+# Assume a US-style fall back as well.
+
+# From Steffen Thorsen (2013-03-10):
+# It appears that Haiti is observing DST this year as well, same rules
+# as US/Canada.  They did it last year as well, and it looks like they
+# are going to observe DST every year now...
+#
+# http://radiovision2000haiti.net/public/haiti-avis-changement-dheure-dimanche/
+# http://www.canalplushaiti.net/?p=6714
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
@@ -3010,8 +3026,8 @@ Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
 Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
 Rule	Haiti	2005	2006	-	Apr	Sun>=1	0:00	1:00	D
 Rule	Haiti	2005	2006	-	Oct	lastSun	0:00	0	S
-Rule	Haiti	2012	only	-	Mar	Sun>=8	2:00	1:00	D
-Rule	Haiti	2012	only	-	Nov	Sun>=1	2:00	0	S
+Rule	Haiti	2012	max	-	Mar	Sun>=8	2:00	1:00	D
+Rule	Haiti	2012	max	-	Nov	Sun>=1	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Port-au-Prince -4:49:20 -	LMT	1890
 			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT
diff --git a/src/main/java/org/joda/time/tz/src/southamerica b/src/main/java/org/joda/time/tz/src/southamerica
index 3301a43ac..9ef8b8260 100644
--- a/src/main/java/org/joda/time/tz/src/southamerica
+++ b/src/main/java/org/joda/time/tz/src/southamerica
@@ -11,6 +11,10 @@
 # Thomas G. Shanks and Rique Pottenger, The International Atlas (6th edition),
 # San Diego: ACS Publications, Inc. (2003).
 #
+# For data circa 1899, a common source is:
+# Milne J. Civil time. Geogr J. 1899 Feb;13(2):173-94
+# <http://www.jstor.org/stable/1774359>.
+#
 # Gwillim Law writes that a good source
 # for recent time zone data is the International Air Transport
 # Association's Standard Schedules Information Manual (IATA SSIM),
@@ -381,21 +385,11 @@ Rule	Arg	2008	only	-	Oct	Sun>=15	0:00	1:00	S
 # <a/>
 # is the official page for the Province Government).
 #
-# There's also a note in only one of the major national papers (La Naci�n) at
-# <a href="http://www.lanacion.com.ar/nota.asp?nota_id=1107912">
+# There's also a note in only one of the major national papers ...
 # http://www.lanacion.com.ar/nota.asp?nota_id=1107912
-# </a>
-#
-# The press release says:
-#  (...) anunci� que el pr�ximo domingo a las 00:00 los puntanos deber�n
-# atrasar una hora sus relojes.
 #
-# A partir de entonces, San Luis establecer� el huso horario propio de
-# la Provincia. De esta manera, durante el periodo del calendario anual
-# 2009, el cambio horario quedar� comprendido entre las 00:00 del tercer
-# domingo de marzo y las 24:00 del segundo s�bado de octubre.
-# Quick&dirty translation
-# (...) announced that next Sunday, at 00:00, Puntanos (the San Luis
+# The press release says [quick and dirty translation]:
+# ... announced that next Sunday, at 00:00, Puntanos (the San Luis
 # inhabitants) will have to turn back one hour their clocks
 #
 # Since then, San Luis will establish its own Province timezone. Thus,
@@ -457,6 +451,9 @@ Rule	Arg	2008	only	-	Oct	Sun>=15	0:00	1:00	S
 # rules...San Luis is still using "Western ARgentina Time" and it got
 # stuck on Summer daylight savings time even though the summer is over.
 
+# From Paul Eggert (2013-02-21):
+# Milne says Cordoba time was -4:16:48.2.  Round to the nearest second.
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 #
 # Buenos Aires (BA), Capital Federal (CF),
@@ -812,9 +809,9 @@ Zone	America/La_Paz	-4:32:36 -	LMT	1890
 
 # From Guilherme Bernardes Rodrigues (2011-10-07):
 # There is news in the media, however there is still no decree about it.
-# I just send a e-mail to Zulmira Brand�o at
+# I just send a e-mail to Zulmira Brandao at
 # <a href="http://pcdsh01.on.br/">http://pcdsh01.on.br/</a> the
-# oficial agency about time in Brazil, and she confirmed that the old rule is
+# official agency about time in Brazil, and she confirmed that the old rule is
 # still in force.
 
 # From Guilherme Bernardes Rodrigues (2011-10-14)
@@ -1243,9 +1240,13 @@ Zone America/Rio_Branco	-4:31:12 -	LMT	1914
 # b. Saturday, September 1, 2012, clocks should go forward 60 minutes; that is,
 # at 23:59:59, instead of passing to 0:00, the time should be adjusted to be
 # 01:00 on September 2.
-#
-# Note that...this is yet another "temporary" change that will be reevaluated
-# AGAIN in 2013.
+
+# From Steffen Thorsen (2013-02-15):
+# According to several news sources, Chile has extended DST this year,
+# they will end DST later and start DST earlier than planned.  They
+# hope to save energy.  The new end date is 2013-04-28 00:00 and new
+# start date is 2013-09-08 00:00....
+# http://www.gob.cl/informa/2013/02/15/gobierno-anuncia-fechas-de-cambio-de-hora-para-el-ano-2013.htm
 
 # NOTE: ChileAQ rules for Antarctic bases are stored separately in the
 # 'antarctica' file.
@@ -1288,10 +1289,8 @@ Rule	Chile	2009	only	-	Mar	Sun>=9	3:00u	0	-
 Rule	Chile	2010	only	-	Apr	Sun>=1	3:00u	0	-
 Rule	Chile	2011	only	-	May	Sun>=2	3:00u	0	-
 Rule	Chile	2011	only	-	Aug	Sun>=16	4:00u	1:00	S
-Rule	Chile	2012	only	-	Apr	Sun>=23	3:00u	0	-
-Rule	Chile	2012	only	-	Sep	Sun>=2	4:00u	1:00	S
-Rule	Chile	2013	max	-	Mar	Sun>=9	3:00u	0	-
-Rule	Chile	2013	max	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	2012	max	-	Apr	Sun>=23	3:00u	0	-
+Rule	Chile	2012	max	-	Sep	Sun>=2	4:00u	1:00	S
 # IATA SSIM anomalies: (1992-02) says 1992-03-14;
 # (1996-09) says 1998-03-08.  Ignore these.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -1313,17 +1312,23 @@ Zone Pacific/Easter	-7:17:44 -	LMT	1890
 # San Felix, and Antarctic bases, are like America/Santiago.
 
 # Colombia
+
+# Milne gives 4:56:16.4 for Bogota time in 1899; round to nearest.  He writes,
+# "A variation of fifteen minutes in the public clocks of Bogota is not rare."
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	CO	1992	only	-	May	 3	0:00	1:00	S
 Rule	CO	1993	only	-	Apr	 4	0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
-			-4:56:20 -	BMT	1914 Nov 23 # Bogota Mean Time
+Zone	America/Bogota	-4:56:16 -	LMT	1884 Mar 13
+			-4:56:16 -	BMT	1914 Nov 23 # Bogota Mean Time
 			-5:00	CO	CO%sT	# Colombia Time
 # Malpelo, Providencia, San Andres
 # no information; probably like America/Bogota
 
 # Curacao
+
+# Milne gives 4:35:46.9 for Curacao mean time; round to nearest.
 #
 # From Paul Eggert (2006-03-22):
 # Shanks & Pottenger say that The Bottom and Philipsburg have been at
@@ -1340,7 +1345,7 @@ Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
 # though, as far as we know.
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Curacao	-4:35:44 -	LMT	1912 Feb 12	# Willemstad
+Zone	America/Curacao	-4:35:47 -	LMT	1912 Feb 12	# Willemstad
 			-4:30	-	ANT	1965 # Netherlands Antilles Time
 			-4:00	-	AST
 
@@ -1354,6 +1359,8 @@ Link	America/Curacao	America/Kralendijk # Bonaire, Sint Estatius and Saba
 
 # Ecuador
 #
+# Milne says the Sentral and South American Telegraph Company used -5:24:15.
+#
 # From Paul Eggert (2007-03-04):
 # Apparently Ecuador had a failed experiment with DST in 1992.
 # <http://midena.gov.ec/content/view/1261/208/> (2007-02-27) and
@@ -1560,6 +1567,15 @@ Rule	Para	2005	2009	-	Mar	Sun>=8	0:00	0	-
 # ...
 Rule	Para	2010	max	-	Oct	Sun>=1	0:00	1:00	S
 Rule	Para	2010	max	-	Apr	Sun>=8	0:00	0	-
+#
+# From Steffen Thorsen (2013-03-07):
+# Paraguay will end DST on 2013-03-24 00:00....
+# They do not tell if this will be a permanent change or just this year....
+# http://www.ande.gov.py/interna.php?id=1075
+#
+# From Paul Eggert (2013-03-07):
+# For now, assume it's just this year.
+Rule	Para	2013	only	-	Mar	24	0:00	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Asuncion	-3:50:40 -	LMT	1890

From a77691dd1770f553235c2ebfb56daacb818fdb9a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 19 Apr 2013 16:28:47 +0100
Subject: [PATCH 06/43] Update to consistent JDK reference across Joda projects

---
 RELEASE-NOTES.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index d7780e59f..cafd94233 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -5,7 +5,7 @@ Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
 This release contains enhancements, bug fixes and a time zone update.
-JDK 1.5 or later is required.
+The release runs on JDK 5 or later.
 
 Joda-Time is licensed under the business-friendly Apache License Version 2.
 This is the same license as all of Apache, plus other open source projects such as Spring.

From 43375f430fd97111b3c9649baf651ed4ee838c71 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Apr 2013 14:02:22 +0100
Subject: [PATCH 07/43] Add method to compare intervals ignoring the chronology

Also enhance equals() Javadoc
---
 RELEASE-NOTES.txt                                |  3 +++
 .../org/joda/time/base/AbstractInterval.java     | 16 +++++++++++++++-
 .../java/org/joda/time/TestInterval_Basics.java  |  8 +++++++-
 3 files changed, 25 insertions(+), 2 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index cafd94233..7db7a95ad 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -18,6 +18,9 @@ of restrictions. If the license causes you problems please contact the mailing l
 
 Enhancements since 2.2
 ----------------------
+- Interval/MutableInterval .isEqual() [#20]
+  Add method to compare intervals ignoring the chronology
+  https://github.com/JodaOrg/joda-time/issues/20
 
 
 Compatibility with 2.2
diff --git a/src/main/java/org/joda/time/base/AbstractInterval.java b/src/main/java/org/joda/time/base/AbstractInterval.java
index 2d076d03a..ee9c0eec7 100644
--- a/src/main/java/org/joda/time/base/AbstractInterval.java
+++ b/src/main/java/org/joda/time/base/AbstractInterval.java
@@ -241,6 +241,19 @@ public boolean overlaps(ReadableInterval interval) {
     }
 
     //-----------------------------------------------------------------------
+    /**
+     * Is this interval equal to the specified interval ignoring the chronology.
+     * <p>
+     * This compares the underlying instants, ignoring the chronology.
+     *
+     * @param other  a readable interval to check against
+     * @return true if the intervals are equal comparing the start and end millis
+     */
+    public boolean isEqual(ReadableInterval other) {
+        return getStartMillis() == other.getStartMillis() &&
+                getEndMillis() == other.getEndMillis();
+    }
+
     /**
      * Is this time interval before the specified millisecond instant.
      * <p>
@@ -443,7 +456,8 @@ public Period toPeriod(PeriodType type) {
      * to get the durations and compare those.
      *
      * @param readableInterval  a readable interval to check against
-     * @return true if the start and end millis are equal
+     * @return true if the intervals are equal comparing the start millis,
+     *  end millis and chronology
      */
     public boolean equals(Object readableInterval) {
         if (this == readableInterval) {
diff --git a/src/test/java/org/joda/time/TestInterval_Basics.java b/src/test/java/org/joda/time/TestInterval_Basics.java
index 02050882a..18b3ed632 100644
--- a/src/test/java/org/joda/time/TestInterval_Basics.java
+++ b/src/test/java/org/joda/time/TestInterval_Basics.java
@@ -816,7 +816,13 @@ public void testAbuts_RInterval_null() {
         assertEquals(false,  interval37.abuts((ReadableInterval) null));  // gap after
     }
 
-    // -----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    public void testIsEqual_RI() {
+        assertEquals(false, interval37.isEqual(interval33));
+        assertEquals(true, interval37.isEqual(interval37));
+    }
+
+    //-----------------------------------------------------------------------
     public void testIsBefore_long() {
         assertEquals(false, interval37.isBefore(2));
         assertEquals(false, interval37.isBefore(3));

From c36c7cb9f1d5cc8fdfa8cd7e58f5bdb5cb115740 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Apr 2013 14:05:24 +0100
Subject: [PATCH 08/43] Enable travisci

---
 .travis.yml | 12 ++++++++++++
 1 file changed, 12 insertions(+)
 create mode 100644 .travis.yml

diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 000000000..9d8811f6f
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,12 @@
+# This file enables the Travis continuous integration system, which
+# automatically builds and tests joda-money for each GitHub commit or 
+# pull request on three separate JDKs.
+#
+# For more information, see https://travis-ci.org
+
+language: java
+
+jdk: 
+  - oraclejdk7
+  - openjdk7
+  - openjdk6

From 7a5dc1e9647f41d944a7bbcf99c8d9f87a5d22f1 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Apr 2013 14:08:40 +0100
Subject: [PATCH 09/43] Update to time-zone data 2013c

---
 RELEASE-NOTES.txt                             |  2 +-
 src/main/java/org/joda/time/tz/src/Readme.txt |  2 +-
 src/main/java/org/joda/time/tz/src/antarctica | 42 +------------
 src/main/java/org/joda/time/tz/src/asia       | 62 ++++++++++---------
 .../java/org/joda/time/tz/src/australasia     | 23 ++++++-
 .../java/org/joda/time/tz/src/southamerica    | 10 +--
 6 files changed, 61 insertions(+), 80 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 7db7a95ad..92fe5fd7f 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -34,7 +34,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
- - DateTimeZone data updated to version 2013b
+ - DateTimeZone data updated to version 2013c
 
 Semantic compatible - Yes
 
diff --git a/src/main/java/org/joda/time/tz/src/Readme.txt b/src/main/java/org/joda/time/tz/src/Readme.txt
index ee02bfab0..099c02fdd 100644
--- a/src/main/java/org/joda/time/tz/src/Readme.txt
+++ b/src/main/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2013b.
+http://www.twinsun.com/tz/tz-link.htm, version 2013c.
diff --git a/src/main/java/org/joda/time/tz/src/antarctica b/src/main/java/org/joda/time/tz/src/antarctica
index d55924bdd..9bf2494ad 100644
--- a/src/main/java/org/joda/time/tz/src/antarctica
+++ b/src/main/java/org/joda/time/tz/src/antarctica
@@ -53,34 +53,6 @@ Rule	ChileAQ	2011	only	-	Aug	Sun>=16	4:00u	1:00	S
 Rule	ChileAQ	2012	max	-	Apr	Sun>=23	3:00u	0	-
 Rule	ChileAQ	2012	max	-	Sep	Sun>=2	4:00u	1:00	S
 
-# These rules are stolen from the `australasia' file.
-Rule	AusAQ	1917	only	-	Jan	 1	0:01	1:00	-
-Rule	AusAQ	1917	only	-	Mar	25	2:00	0	-
-Rule	AusAQ	1942	only	-	Jan	 1	2:00	1:00	-
-Rule	AusAQ	1942	only	-	Mar	29	2:00	0	-
-Rule	AusAQ	1942	only	-	Sep	27	2:00	1:00	-
-Rule	AusAQ	1943	1944	-	Mar	lastSun	2:00	0	-
-Rule	AusAQ	1943	only	-	Oct	 3	2:00	1:00	-
-Rule	ATAQ	1967	only	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	ATAQ	1968	only	-	Mar	lastSun	2:00s	0	-
-Rule	ATAQ	1968	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	ATAQ	1969	1971	-	Mar	Sun>=8	2:00s	0	-
-Rule	ATAQ	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	ATAQ	1973	1981	-	Mar	Sun>=1	2:00s	0	-
-Rule	ATAQ	1982	1983	-	Mar	lastSun	2:00s	0	-
-Rule	ATAQ	1984	1986	-	Mar	Sun>=1	2:00s	0	-
-Rule	ATAQ	1986	only	-	Oct	Sun>=15	2:00s	1:00	-
-Rule	ATAQ	1987	1990	-	Mar	Sun>=15	2:00s	0	-
-Rule	ATAQ	1987	only	-	Oct	Sun>=22	2:00s	1:00	-
-Rule	ATAQ	1988	1990	-	Oct	lastSun	2:00s	1:00	-
-Rule	ATAQ	1991	1999	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	ATAQ	1991	2005	-	Mar	lastSun	2:00s	0	-
-Rule	ATAQ	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	ATAQ	2001	max	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	ATAQ	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	ATAQ	2007	only	-	Mar	lastSun	2:00s	0	-
-Rule	ATAQ	2008	max	-	Apr	Sun>=1	2:00s	0	-
-
 # Argentina - year-round bases
 # Belgrano II, Confin Coast, -770227-0343737, since 1972-02-05
 # Esperanza, San Martin Land, -6323-05659, since 1952-12-17
@@ -122,10 +94,7 @@ Rule	ATAQ	2008	max	-	Apr	Sun>=1	2:00s	0	-
 # </a>
 
 # From Steffen Thorsen (2010-03-10):
-# We got these changes from the Australian Antarctic Division:
-# - Macquarie Island will stay on UTC+11 for winter and therefore not
-# switch back from daylight savings time when other parts of Australia do
-# on 4 April.
+# We got these changes from the Australian Antarctic Division: ...
 #
 # - Casey station reverted to its normal time of UTC+8 on 5 March 2010.
 # The change to UTC+11 is being considered as a regular summer thing but
@@ -136,9 +105,6 @@ Rule	ATAQ	2008	max	-	Apr	Sun>=1	2:00s	0	-
 #
 # - Mawson station stays on UTC+5.
 #
-# In addition to the Rule changes for Casey/Davis, it means that Macquarie
-# will no longer be like Hobart and will have to have its own Zone created.
-#
 # Background:
 # <a href="http://www.timeanddate.com/news/time/antartica-time-changes-2010.html">
 # http://www.timeanddate.com/news/time/antartica-time-changes-2010.html
@@ -165,12 +131,6 @@ Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
 			6:00	-	MAWT	2009 Oct 18 2:00
 						# Mawson Time
 			5:00	-	MAWT
-Zone Antarctica/Macquarie 0	-	zzz	1911
-			10:00	-	EST	1916 Oct 1 2:00
-			10:00	1:00	EST	1917 Feb
-			10:00	AusAQ	EST	1967
-			10:00	ATAQ	EST	2010 Apr 4 3:00
-			11:00	-	MIST	# Macquarie Island Time
 # References:
 # <a href="http://www.antdiv.gov.au/aad/exop/sfo/casey/casey_aws.html">
 # Casey Weather (1998-02-26)
diff --git a/src/main/java/org/joda/time/tz/src/asia b/src/main/java/org/joda/time/tz/src/asia
index 1f09fa35a..e544fcce7 100644
--- a/src/main/java/org/joda/time/tz/src/asia
+++ b/src/main/java/org/joda/time/tz/src/asia
@@ -2291,11 +2291,20 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # http://www.timeanddate.com/news/time/gaza-west-bank-dst-2012.html
 # </a>
 
-# From Arthur David Olson (2012-03-27):
-# The timeanddate article for 2012 says that "the end date has not yet been
-# announced" and that "Last year, both...paused daylight saving time during...
-# Ramadan. It is not yet known [for] 2012."
-# For now, assume both switch back on the last Friday in September. XXX
+# From Steffen Thorsen (2013-03-26):
+# The following news sources tells that Palestine will "start daylight saving
+# time from midnight on Friday, March 29, 2013" (translated).
+# [These are in Arabic and are for Gaza and for Ramallah, respectively.]
+# http://www.samanews.com/index.php?act=Show&id=154120
+# http://safa.ps/details/news/99844/%D8%B1%D8%A7%D9%85-%D8%A7%D9%84%D9%84%D9%87-%D8%A8%D8%AF%D8%A1-%D8%A7%D9%84%D8%AA%D9%88%D9%82%D9%8A%D8%AA-%D8%A7%D9%84%D8%B5%D9%8A%D9%81%D9%8A-29-%D8%A7%D9%84%D8%AC%D8%A7%D8%B1%D9%8A.html
+
+# From Paul Eggert (2013-04-15):
+# For future dates, guess the last Thursday in March at 24:00 through
+# the first Friday on or after September 21 at 01:00.  This is consistent with
+# the predictions in today's editions of the following URLs,
+# which are for Gaza and Hebron respectively:
+# http://www.timeanddate.com/worldclock/timezone.html?n=702
+# http://www.timeanddate.com/worldclock/timezone.html?n=2364
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
@@ -2309,19 +2318,20 @@ Rule Palestine	1999	2005	-	Apr	Fri>=15	0:00	1:00	S
 Rule Palestine	1999	2003	-	Oct	Fri>=15	0:00	0	-
 Rule Palestine	2004	only	-	Oct	 1	1:00	0	-
 Rule Palestine	2005	only	-	Oct	 4	2:00	0	-
-Rule Palestine	2006	2008	-	Apr	 1	0:00	1:00	S
+Rule Palestine	2006	2007	-	Apr	 1	0:00	1:00	S
 Rule Palestine	2006	only	-	Sep	22	0:00	0	-
 Rule Palestine	2007	only	-	Sep	Thu>=8	2:00	0	-
-Rule Palestine	2008	only	-	Aug	lastFri	0:00	0	-
-Rule Palestine	2009	only	-	Mar	lastFri	0:00	1:00	S
-Rule Palestine	2009	only	-	Sep	Fri>=1	2:00	0	-
-Rule Palestine	2010	only	-	Mar	lastSat	0:01	1:00	S
+Rule Palestine	2008	2009	-	Mar	lastFri	0:00	1:00	S
+Rule Palestine	2008	only	-	Sep	 1	0:00	0	-
+Rule Palestine	2009	only	-	Sep	Fri>=1	1:00	0	-
+Rule Palestine	2010	only	-	Mar	26	0:00	1:00	S
 Rule Palestine	2010	only	-	Aug	11	0:00	0	-
-
-# From Arthur David Olson (2011-09-20):
-# 2011 transitions per http://www.timeanddate.com as of 2011-09-20.
-# From Paul Eggert (2012-10-12):
-# 2012 transitions per http://www.timeanddate.com as of 2012-10-12.
+Rule Palestine	2011	only	-	Apr	 1	0:01	1:00	S
+Rule Palestine	2011	only	-	Aug	 1	0:00	0	-
+Rule Palestine	2011	only	-	Aug	30	0:00	1:00	S
+Rule Palestine	2011	only	-	Sep	30	0:00	0	-
+Rule Palestine	2012	max	-	Mar	lastThu	24:00	1:00	S
+Rule Palestine	2012	max	-	Sep	Fri>=21	1:00	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
@@ -2329,26 +2339,20 @@ Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
 			2:00 EgyptAsia	EE%sT	1967 Jun  5
 			2:00	Zion	I%sT	1996
 			2:00	Jordan	EE%sT	1999
-			2:00 Palestine	EE%sT	2011 Apr  2 12:01
-			2:00	1:00	EEST	2011 Aug  1
-			2:00	-	EET	2012 Mar 30
-			2:00	1:00	EEST	2012 Sep 21 1:00
-			2:00	-	EET
+			2:00 Palestine	EE%sT	2008 Aug 29 0:00
+			2:00	-	EET	2008 Sep
+			2:00 Palestine	EE%sT	2010
+			2:00	-	EET	2010 Mar 27 0:01
+			2:00 Palestine	EE%sT	2011 Aug  1
+			2:00	-	EET	2012
+			2:00 Palestine	EE%sT
 
 Zone	Asia/Hebron	2:20:23	-	LMT	1900 Oct
 			2:00	Zion	EET	1948 May 15
 			2:00 EgyptAsia	EE%sT	1967 Jun  5
 			2:00	Zion	I%sT	1996
 			2:00	Jordan	EE%sT	1999
-			2:00 Palestine	EE%sT	2008 Aug
-			2:00 	1:00	EEST	2008 Sep
-			2:00 Palestine	EE%sT	2011 Apr  1 12:01
-			2:00	1:00	EEST	2011 Aug  1
-			2:00	-	EET	2011 Aug 30
-			2:00	1:00	EEST	2011 Sep 30 3:00
-			2:00	-	EET	2012 Mar 30
-			2:00	1:00	EEST	2012 Sep 21 1:00
-			2:00	-	EET
+			2:00 Palestine	EE%sT
 
 # Paracel Is
 # no information
diff --git a/src/main/java/org/joda/time/tz/src/australasia b/src/main/java/org/joda/time/tz/src/australasia
index 58df73d5d..5fe6d5316 100644
--- a/src/main/java/org/joda/time/tz/src/australasia
+++ b/src/main/java/org/joda/time/tz/src/australasia
@@ -218,9 +218,26 @@ Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
 # no times are set
 #
 # Macquarie
-# permanent occupation (scientific station) since 1948;
-# sealing and penguin oil station operated 1888/1917
-# like Australia/Hobart
+# Permanent occupation (scientific station) 1911-1915 and since 25 March 1948;
+# sealing and penguin oil station operated Nov 1899 to Apr 1919.  See the
+# Tasmania Parks & Wildlife Service history of sealing at Macquarie Island
+# <http://www.parks.tas.gov.au/index.aspx?base=1828>
+# <http://www.parks.tas.gov.au/index.aspx?base=1831>.
+# Guess that it was like Australia/Hobart while inhabited before 2010.
+#
+# From Steffen Thorsen (2010-03-10):
+# We got these changes from the Australian Antarctic Division:
+# - Macquarie Island will stay on UTC+11 for winter and therefore not
+# switch back from daylight savings time when other parts of Australia do
+# on 4 April.
+Zone Antarctica/Macquarie 0	-	zzz	1899 Nov
+			10:00	-	EST	1916 Oct 1 2:00
+			10:00	1:00	EST	1917 Feb
+			10:00	Aus	EST	1919 Apr
+			0	-	zzz	1948 Mar 25
+			10:00	Aus	EST	1967
+			10:00	AT	EST	2010 Apr 4 3:00
+			11:00	-	MIST	# Macquarie I Standard Time
 
 # Christmas
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
diff --git a/src/main/java/org/joda/time/tz/src/southamerica b/src/main/java/org/joda/time/tz/src/southamerica
index 9ef8b8260..3c2f82ae4 100644
--- a/src/main/java/org/joda/time/tz/src/southamerica
+++ b/src/main/java/org/joda/time/tz/src/southamerica
@@ -1566,16 +1566,16 @@ Rule	Para	2005	2009	-	Mar	Sun>=8	0:00	0	-
 # forward 60 minutes, in all the territory of the Paraguayan Republic.
 # ...
 Rule	Para	2010	max	-	Oct	Sun>=1	0:00	1:00	S
-Rule	Para	2010	max	-	Apr	Sun>=8	0:00	0	-
+Rule	Para	2010	2012	-	Apr	Sun>=8	0:00	0	-
 #
 # From Steffen Thorsen (2013-03-07):
 # Paraguay will end DST on 2013-03-24 00:00....
-# They do not tell if this will be a permanent change or just this year....
 # http://www.ande.gov.py/interna.php?id=1075
 #
-# From Paul Eggert (2013-03-07):
-# For now, assume it's just this year.
-Rule	Para	2013	only	-	Mar	24	0:00	0	-
+# From Carlos Raul Perasso (2013-03-15):
+# The change in Paraguay is now final.  Decree number 10780
+# http://www.presidencia.gov.py/uploads/pdf/presidencia-3b86ff4b691c79d4f5927ca964922ec74772ce857c02ca054a52a37b49afc7fb.pdf
+Rule	Para	2013	max	-	Mar	Sun>=22	0:00	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Asuncion	-3:50:40 -	LMT	1890

From 6be086e6320a7debdb1b62e4c1185119e1e6e3cd Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Apr 2013 15:37:05 +0100
Subject: [PATCH 10/43] Fix pom

---
 pom.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/pom.xml b/pom.xml
index 214c94396..7923622d4 100644
--- a/pom.xml
+++ b/pom.xml
@@ -219,9 +219,9 @@
           </systemProperties>
           <arguments>
             <argument>-src</argument>
-            <argument>${pom.build.sourceDirectory}/org/joda/time/tz/src</argument>
+            <argument>${project.build.sourceDirectory}/org/joda/time/tz/src</argument>
             <argument>-dst</argument>
-            <argument>${pom.build.outputDirectory}/org/joda/time/tz/data</argument>
+            <argument>${project.build.outputDirectory}/org/joda/time/tz/data</argument>
             <argument>africa</argument>
             <argument>antarctica</argument>
             <argument>asia</argument>

From 7fe4b477d279001403795e09c6a1191d7304e889 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 8 May 2013 22:17:16 +0100
Subject: [PATCH 11/43] Fix short time-zone name parsing to match the longest
 name

---
 RELEASE-NOTES.txt                                 |  3 +++
 src/main/java/org/joda/time/DateTimeUtils.java    | 15 +++++++++++++++
 .../time/format/DateTimeFormatterBuilder.java     | 10 ++++++++--
 .../time/format/TestDateTimeFormatterBuilder.java |  4 ++++
 4 files changed, 30 insertions(+), 2 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 92fe5fd7f..6095d3a82 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -50,6 +50,9 @@ Bug fixes since 2.2
   A thread local variable was previously only initialised in one thread causing NPE
   https://github.com/JodaOrg/joda-time/issues/18
 
+- Short time-zone name parsing failed to match the longest name
+  This affected two short names where one is a short form of the second such as "UT" and "UTC"
+
 
 Scala
 --------
diff --git a/src/main/java/org/joda/time/DateTimeUtils.java b/src/main/java/org/joda/time/DateTimeUtils.java
index f9ab4982a..20ff68153 100644
--- a/src/main/java/org/joda/time/DateTimeUtils.java
+++ b/src/main/java/org/joda/time/DateTimeUtils.java
@@ -404,6 +404,21 @@ public static final DateFormatSymbols getDateFormatSymbols(Locale locale) {
      * Gets the default map of time zone names.
      * <p>
      * This can be changed by {@link #setDefaultTimeZoneNames}.
+     * <p>
+     * The default set of short time zone names is as follows:
+     * <ul>
+     * <li>UT - UTC
+     * <li>UTC - UTC
+     * <li>GMT - UTC
+     * <li>EST - America/New_York
+     * <li>EDT - America/New_York
+     * <li>CST - America/Chicago
+     * <li>CDT - America/Chicago
+     * <li>MST - America/Denver
+     * <li>MDT - America/Denver
+     * <li>PST - America/Los_Angeles
+     * <li>PDT - America/Los_Angeles
+     * </ul>
      * 
      * @return the unmodifiable map of abbreviations to zones, not null
      * @since 2.2
diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 33bc9889d..8f76f06e2 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2524,12 +2524,18 @@ public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             Map<String, DateTimeZone> parseLookup = iParseLookup;
             parseLookup = (parseLookup != null ? parseLookup : DateTimeUtils.getDefaultTimeZoneNames());
             String str = text.substring(position);
+            String matched = null;
             for (String name : parseLookup.keySet()) {
                 if (str.startsWith(name)) {
-                    bucket.setZone(parseLookup.get(name));
-                    return position + name.length();
+                    if (matched == null || name.length() > matched.length()) {
+                        matched = name;
+                    }
                 }
             }
+            if (matched != null) {
+                bucket.setZone(parseLookup.get(matched));
+                return position + matched.length();
+            }
             return ~position;
         }
     }
diff --git a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
index ae5bf7fc0..0c5fffcea 100644
--- a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
@@ -532,11 +532,15 @@ public void test_printParseShortNameWithAutoLookup() {
         assertEquals("2011-01-04 12:30 PST", f.print(dt3));
         DateTime dt4 = new DateTime(2011, 7, 4, 12, 30, 0, LOS_ANGELES);
         assertEquals("2011-07-04 12:30 PDT", f.print(dt4));
+        DateTime dt5 = new DateTime(2011, 7, 4, 12, 30, 0, DateTimeZone.UTC);
+        assertEquals("2011-07-04 12:30 UTC", f.print(dt5));
         
         assertEquals(dt1.getZone() + " " + f.parseDateTime("2011-01-04 12:30 EST").getZone(), dt1, f.parseDateTime("2011-01-04 12:30 EST"));
         assertEquals(dt2, f.parseDateTime("2011-07-04 12:30 EDT"));
         assertEquals(dt3, f.parseDateTime("2011-01-04 12:30 PST"));
         assertEquals(dt4, f.parseDateTime("2011-07-04 12:30 PDT"));
+        assertEquals(dt5, f.parseDateTime("2011-07-04 12:30 UT"));
+        assertEquals(dt5, f.parseDateTime("2011-07-04 12:30 UTC"));
         try {
             f.parseDateTime("2007-03-04 12:30 PPP");
             fail();

From f89ae6a4494dbb326f8c899e65816d596d28bca1 Mon Sep 17 00:00:00 2001
From: Christopher Elkins <chrise@esha.com>
Date: Mon, 3 Jun 2013 10:41:12 -0700
Subject: [PATCH 12/43] Fix invalid ISO 8601 duration syntax in javadoc example

---
 src/main/java/org/joda/time/base/AbstractPeriod.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/main/java/org/joda/time/base/AbstractPeriod.java b/src/main/java/org/joda/time/base/AbstractPeriod.java
index 18f3fc622..6e5ece565 100644
--- a/src/main/java/org/joda/time/base/AbstractPeriod.java
+++ b/src/main/java/org/joda/time/base/AbstractPeriod.java
@@ -216,7 +216,7 @@ public int hashCode() {
     /**
      * Gets the value as a String in the ISO8601 duration format.
      * <p>
-     * For example, "P6H3M7S" represents 6 hours, 3 minutes, 7 seconds.
+     * For example, "PT6H3M7S" represents 6 hours, 3 minutes, 7 seconds.
      * <p>
      * For more control over the output, see
      * {@link org.joda.time.format.PeriodFormatterBuilder PeriodFormatterBuilder}.

From efce99164f0bbd2c70e7f9d71884a32473e02c6d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 3 Jun 2013 19:55:03 +0200
Subject: [PATCH 13/43] Update pom with pull request author

---
 pom.xml | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/pom.xml b/pom.xml
index 7923622d4..f0d7522e8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -64,6 +64,10 @@
       <name>Dan Cojocar</name>
       <url>https://github.com/dancojocar</url>
     </contributor>
+    <contributor>
+      <name>Christopher Elkins</name>
+      <url>https://github.com/celkins</url>
+    </contributor>
     <contributor>
       <name>Jeroen van Erp</name>
     </contributor>

From 3a413d7844c22dc6ddd50bf5d0d55ff3589e47ac Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 16 Jun 2013 11:27:54 +0100
Subject: [PATCH 14/43] Days.daysBetween fails for MonthDay

Problems around leap year
Fixes #22
---
 RELEASE-NOTES.txt                             |  3 ++
 .../joda/time/base/BaseSingleFieldPeriod.java |  6 ++-
 src/test/java/org/joda/time/TestDays.java     | 37 ++++++++++++++++++-
 src/test/java/org/joda/time/TestMonths.java   | 31 +++++++++++++++-
 4 files changed, 71 insertions(+), 6 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 6095d3a82..ec9d30c28 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -53,6 +53,9 @@ Bug fixes since 2.2
 - Short time-zone name parsing failed to match the longest name
   This affected two short names where one is a short form of the second such as "UT" and "UTC"
 
+- Days.daysBetween fails for MonthDay [#22]
+  Incorrect calculation around leap years
+
 
 Scala
 --------
diff --git a/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java b/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java
index 79283b5b2..839d3b8ed 100644
--- a/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java
+++ b/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2011 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -48,6 +48,8 @@
 
     /** Serialization version. */
     private static final long serialVersionUID = 9386874258972L;
+    /** The start of 1972. */
+    private static final long START_1972 = 2L * 365L * 86400L * 1000L;
 
     /** The period in the units of this period. */
     private volatile int iPeriod;
@@ -100,7 +102,7 @@ protected static int between(ReadablePartial start, ReadablePartial end, Readabl
             throw new IllegalArgumentException("ReadablePartial objects must be contiguous");
         }
         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
-        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));
+        int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972));
         return values[0];
     }
 
diff --git a/src/test/java/org/joda/time/TestDays.java b/src/test/java/org/joda/time/TestDays.java
index f99db348a..073f8e026 100644
--- a/src/test/java/org/joda/time/TestDays.java
+++ b/src/test/java/org/joda/time/TestDays.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -94,7 +94,8 @@ public void testFactory_daysBetween_RInstant() {
         assertEquals(6, Days.daysBetween(start, end2).getDays());
     }
 
-    public void testFactory_daysBetween_RPartial() {
+    //-----------------------------------------------------------------------
+    public void testFactory_daysBetween_RPartial_LocalDate() {
         LocalDate start = new LocalDate(2006, 6, 9);
         LocalDate end1 = new LocalDate(2006, 6, 12);
         YearMonthDay end2 = new YearMonthDay(2006, 6, 15);
@@ -106,6 +107,37 @@ public void testFactory_daysBetween_RPartial() {
         assertEquals(6, Days.daysBetween(start, end2).getDays());
     }
 
+    public void testFactory_daysBetween_RPartial_YearMonth() {
+        YearMonth start1 = new YearMonth(2011, 1);
+        YearMonth start2 = new YearMonth(2012, 1);
+        YearMonth end1 = new YearMonth(2011, 3);
+        YearMonth end2 = new YearMonth(2012, 3);
+        
+        assertEquals(59, Days.daysBetween(start1, end1).getDays());
+        assertEquals(60, Days.daysBetween(start2, end2).getDays());
+        
+        assertEquals(-59, Days.daysBetween(end1, start1).getDays());
+        assertEquals(-60, Days.daysBetween(end2, start2).getDays());
+    }
+
+    public void testFactory_daysBetween_RPartial_MonthDay() {
+        MonthDay start1 = new MonthDay(2, 1);
+        MonthDay start2 = new MonthDay(2, 28);
+        MonthDay end1 = new MonthDay(2, 28);
+        MonthDay end2 = new MonthDay(2, 29);
+        
+        assertEquals(27, Days.daysBetween(start1, end1).getDays());
+        assertEquals(28, Days.daysBetween(start1, end2).getDays());
+        assertEquals(0, Days.daysBetween(start2, end1).getDays());
+        assertEquals(1, Days.daysBetween(start2, end2).getDays());
+        
+        assertEquals(-27, Days.daysBetween(end1, start1).getDays());
+        assertEquals(-28, Days.daysBetween(end2, start1).getDays());
+        assertEquals(0, Days.daysBetween(end1, start2).getDays());
+        assertEquals(-1, Days.daysBetween(end2, start2).getDays());
+    }
+
+    //-----------------------------------------------------------------------
     public void testFactory_daysIn_RInterval() {
         DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
         DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS);
@@ -118,6 +150,7 @@ public void testFactory_daysIn_RInterval() {
         assertEquals(6, Days.daysIn(new Interval(start, end2)).getDays());
     }
 
+    //-----------------------------------------------------------------------
     public void testFactory_standardDaysIn_RPeriod() {
         assertEquals(0, Days.standardDaysIn((ReadablePeriod) null).getDays());
         assertEquals(0, Days.standardDaysIn(Period.ZERO).getDays());
diff --git a/src/test/java/org/joda/time/TestMonths.java b/src/test/java/org/joda/time/TestMonths.java
index e56239152..ec44f9e18 100644
--- a/src/test/java/org/joda/time/TestMonths.java
+++ b/src/test/java/org/joda/time/TestMonths.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -104,7 +104,8 @@ public void testFactory_monthsBetween_RInstant() {
         assertEquals(6, Months.monthsBetween(start, end2).getMonths());
     }
 
-    public void testFactory_monthsBetween_RPartial() {
+    //-------------------------------------------------------------------------
+    public void testFactory_monthsBetween_RPartial_LocalDate() {
         LocalDate start = new LocalDate(2006, 6, 9);
         LocalDate end1 = new LocalDate(2006, 9, 9);
         YearMonthDay end2 = new YearMonthDay(2006, 12, 9);
@@ -116,6 +117,32 @@ public void testFactory_monthsBetween_RPartial() {
         assertEquals(6, Months.monthsBetween(start, end2).getMonths());
     }
 
+    public void testFactory_monthsBetween_RPartial_YearMonth() {
+        YearMonth start1 = new YearMonth(2011, 1);
+        for (int i = 0; i < 6; i++) {
+            YearMonth start2 = new YearMonth(2011 + i, 1);
+            YearMonth end = new YearMonth(2011 + i, 3);
+            assertEquals(i * 12 + 2, Months.monthsBetween(start1, end).getMonths());
+            assertEquals(2, Months.monthsBetween(start2, end).getMonths());
+        }
+    }
+
+    public void testFactory_monthsBetween_RPartial_MonthDay() {
+        MonthDay start = new MonthDay(2, 1);
+        MonthDay end1 = new MonthDay(2, 28);
+        MonthDay end2 = new MonthDay(2, 29);
+        MonthDay end3 = new MonthDay(3, 1);
+        
+        assertEquals(0, Months.monthsBetween(start, end1).getMonths());
+        assertEquals(0, Months.monthsBetween(start, end2).getMonths());
+        assertEquals(1, Months.monthsBetween(start, end3).getMonths());
+        
+        assertEquals(0, Months.monthsBetween(end1, start).getMonths());
+        assertEquals(0, Months.monthsBetween(end2, start).getMonths());
+        assertEquals(-1, Months.monthsBetween(end3, start).getMonths());
+    }
+
+    //-------------------------------------------------------------------------
     public void testFactory_monthsIn_RInterval() {
         DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
         DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS);

From 0cd0ccad045c82711aadf3b37c4188655ad552cf Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 16 Jun 2013 11:56:18 +0100
Subject: [PATCH 15/43] Investigate Period calculation at end of month

See #31
---
 src/main/java/org/joda/time/Period.java       |  39 +++++-
 .../joda/time/TestPeriod_Constructors.java    | 130 ++++++++++++++++++
 2 files changed, 166 insertions(+), 3 deletions(-)

diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java
index b604dc1e5..5b36bc504 100644
--- a/src/main/java/org/joda/time/Period.java
+++ b/src/main/java/org/joda/time/Period.java
@@ -491,8 +491,16 @@ public Period(long startInstant, long endInstant, PeriodType type, Chronology ch
     }
 
     /**
-     * Creates a period from the given interval endpoints using the standard
-     * set of fields.
+     * Creates a period between the given instants using the standard set of fields.
+     * <p>
+     * Most calculations performed by this method have obvious results.
+     * The special case is where the calculation is from a "long" month to a "short" month.
+     * Here, the result favours increasing the months field rather than the days.
+     * For example, 2013-01-31 to 2013-02-28 is treated as one whole month.
+     * By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days
+     * (exposed as 4 weeks and 2 days).
+     * The results are explained by considering that the start date plus the
+     * calculated period result in the end date.
      *
      * @param startInstant  interval start, null means now
      * @param endInstant  interval end, null means now
@@ -502,7 +510,15 @@ public Period(ReadableInstant startInstant, ReadableInstant endInstant) {
     }
 
     /**
-     * Creates a period from the given interval endpoints.
+     * Creates a period between the given instants.
+     * <p>
+     * Most calculations performed by this method have obvious results.
+     * The special case is where the calculation is from a "long" month to a "short" month.
+     * Here, the result favours increasing the months field rather than the days.
+     * For example, 2013-01-31 to 2013-02-28 is treated as one whole month.
+     * By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days.
+     * The results are explained by considering that the start date plus the
+     * calculated period result in the end date.
      *
      * @param startInstant  interval start, null means now
      * @param endInstant  interval end, null means now
@@ -524,6 +540,15 @@ public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodTy
      * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a definition.
      * Both <code>LocalDate</code> and <code>LocalTime</code> are contiguous.
      * <p>
+     * Most calculations performed by this method have obvious results.
+     * The special case is where the calculation is from a "long" month to a "short" month.
+     * Here, the result favours increasing the months field rather than the days.
+     * For example, 2013-01-31 to 2013-02-28 is treated as one whole month.
+     * By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days
+     * (exposed as 4 weeks and 2 days).
+     * The results are explained by considering that the start date plus the
+     * calculated period result in the end date.
+     * <p>
      * An alternative way of constructing a Period from two Partials
      * is {@link #fieldDifference(ReadablePartial, ReadablePartial)}.
      * That method handles all kinds of partials.
@@ -549,6 +574,14 @@ public Period(ReadablePartial start, ReadablePartial end) {
      * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a definition.
      * Both <code>LocalDate</code> and <code>LocalTime</code> are contiguous.
      * <p>
+     * Most calculations performed by this method have obvious results.
+     * The special case is where the calculation is from a "long" month to a "short" month.
+     * Here, the result favours increasing the months field rather than the days.
+     * For example, 2013-01-31 to 2013-02-28 is treated as one whole month.
+     * By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days.
+     * The results are explained by considering that the start date plus the
+     * calculated period result in the end date.
+     * <p>
      * An alternative way of constructing a Period from two Partials
      * is {@link #fieldDifference(ReadablePartial, ReadablePartial)}.
      * That method handles all kinds of partials.
diff --git a/src/test/java/org/joda/time/TestPeriod_Constructors.java b/src/test/java/org/joda/time/TestPeriod_Constructors.java
index 29f7bdf8d..8261c0c44 100644
--- a/src/test/java/org/joda/time/TestPeriod_Constructors.java
+++ b/src/test/java/org/joda/time/TestPeriod_Constructors.java
@@ -1310,6 +1310,136 @@ public void testFactoryMillis() throws Throwable {
         assertEquals(6, test.getMillis());
     }
 
+    //-------------------------------------------------------------------------
+    public void testConstructor_trickyDifferences_RI_RI_toFeb_standardYear() throws Throwable {
+        DateTime dt1 = new DateTime(2011, 1, 1, 0, 0);
+        DateTime dt2 = new DateTime(2011, 2, 28, 0, 0);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 1, 3, 6, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_RI_RI_toFeb_leapYear() throws Throwable {
+        DateTime dt1 = new DateTime(2012, 1, 1, 0, 0);
+        DateTime dt2 = new DateTime(2012, 2, 29, 0, 0);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 1, 4, 0, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_RI_RI_toFeb_exactMonths() throws Throwable {
+        DateTime dt1 = new DateTime(2004, 12, 28, 0, 0);
+        DateTime dt2 = new DateTime(2005, 2, 28, 0, 0);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth1() throws Throwable {
+        DateTime dt1 = new DateTime(2004, 12, 29, 0, 0);
+        DateTime dt2 = new DateTime(2005, 2, 28, 0, 0);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth2() throws Throwable {
+        DateTime dt1 = new DateTime(2004, 12, 30, 0, 0);
+        DateTime dt2 = new DateTime(2005, 2, 28, 0, 0);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth3() throws Throwable {
+        DateTime dt1 = new DateTime(2004, 12, 31, 0, 0);
+        DateTime dt2 = new DateTime(2005, 2, 28, 0, 0);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_RI_RI_toMar_endOfMonth1() throws Throwable {
+        DateTime dt1 = new DateTime(2013, 1, 31, 0, 0);
+        DateTime dt2 = new DateTime(2013, 3, 30, 0, 0);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 1, 4, 2, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_RI_RI_toMar_endOfMonth2() throws Throwable {
+        DateTime dt1 = new DateTime(2013, 1, 31, 0, 0);
+        DateTime dt2 = new DateTime(2013, 3, 31, 0, 0);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);
+    }
+
+    //-------------------------------------------------------------------------
+    public void testConstructor_trickyDifferences_LD_LD_toFeb_standardYear() throws Throwable {
+        LocalDate dt1 = new LocalDate(2011, 1, 1);
+        LocalDate dt2 = new LocalDate(2011, 2, 28);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 1, 3, 6, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_LD_LD_toFeb_leapYear() throws Throwable {
+        LocalDate dt1 = new LocalDate(2012, 1, 1);
+        LocalDate dt2 = new LocalDate(2012, 2, 29);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 1, 4, 0, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_LD_LD_toFeb_exactMonths() throws Throwable {
+        LocalDate dt1 = new LocalDate(2004, 12, 28);
+        LocalDate dt2 = new LocalDate(2005, 2, 28);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth1() throws Throwable {
+        LocalDate dt1 = new LocalDate(2004, 12, 29);
+        LocalDate dt2 = new LocalDate(2005, 2, 28);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth2() throws Throwable {
+        LocalDate dt1 = new LocalDate(2004, 12, 30);
+        LocalDate dt2 = new LocalDate(2005, 2, 28);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth3() throws Throwable {
+        LocalDate dt1 = new LocalDate(2004, 12, 31);
+        LocalDate dt2 = new LocalDate(2005, 2, 28);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth1() throws Throwable {
+        LocalDate dt1 = new LocalDate(2013, 1, 31);
+        LocalDate dt2 = new LocalDate(2013, 3, 30);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 1, 4, 2, 0, 0, 0, 0), test);
+    }
+
+    public void testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth2() throws Throwable {
+        LocalDate dt1 = new LocalDate(2013, 1, 31);
+        LocalDate dt2 = new LocalDate(2013, 3, 31);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);
+    }
+
     //-----------------------------------------------------------------------
     public void testFactoryFieldDifference1() throws Throwable {
         YearMonthDay start = new YearMonthDay(2005, 4, 9);

From 6fc068c570ae8bfd608da27240ae9107ef175fd4 Mon Sep 17 00:00:00 2001
From: Dave Brosius <dbrosius@mebigfatguy.com>
Date: Wed, 10 Jul 2013 20:45:03 -0400
Subject: [PATCH 16/43] fix javadoc @links

---
 src/main/java/org/joda/time/format/DateTimeFormatter.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java
index c297522be..553b035c7 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java
@@ -54,8 +54,8 @@
  * <li>{@link #withZone(DateTimeZone)} - returns a new formatter that uses the specified time zone</li>
  * <li>{@link #withChronology(Chronology)} - returns a new formatter that uses the specified chronology</li>
  * <li>{@link #withOffsetParsed()} - returns a new formatter that returns the parsed time zone offset</li>
- * <li>{@link #withPivotYear()} - returns a new formatter with the specified pivot year</li>
- * <li>{@link #withDefaultYear()} - returns a new formatter with the specified default year</li>
+ * <li>{@link #withPivotYear(int)} - returns a new formatter with the specified pivot year</li>
+ * <li>{@link #withDefaultYear(int)} - returns a new formatter with the specified default year</li>
  * </ul>
  * Each of these returns a new formatter (instances of this class are immutable).
  * <p>

From 54edec0d6c2bbf51c0c061d934eeb17302f029ab Mon Sep 17 00:00:00 2001
From: Oren Benjamin <oren@opower.com>
Date: Thu, 18 Jul 2013 11:42:23 -0400
Subject: [PATCH 17/43] Deprecate DateMidnight

---
 src/main/java/org/joda/time/DateMidnight.java | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/main/java/org/joda/time/DateMidnight.java b/src/main/java/org/joda/time/DateMidnight.java
index 051f2235c..2a3fee352 100644
--- a/src/main/java/org/joda/time/DateMidnight.java
+++ b/src/main/java/org/joda/time/DateMidnight.java
@@ -67,7 +67,13 @@
  *
  * @author Stephen Colebourne
  * @since 1.0
+ * @deprecated The time of midnight does not exist in some time zones
+ * where the daylight saving time forward shift skips the midnight hour.
+ * Use {@link LocalDate} to represent a date without a time zone
+ * and {@link DateTime#withTimeAtStartOfDay()} to get an instant at the
+ * start of a day.
  */
+@Deprecated
 public final class DateMidnight
         extends BaseDateTime
         implements ReadableDateTime, Serializable {

From 96f586cb8dac7eee62e9be519a3eab125c47bb23 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Jul 2013 11:42:56 +0100
Subject: [PATCH 18/43] Ensure there is a max/min valid offset in DateTimeZone

Fixes #43
---
 RELEASE-NOTES.txt                             |  8 ++++++-
 src/main/java/org/joda/time/DateTimeZone.java | 21 ++++++++++++-------
 .../java/org/joda/time/TestDateTimeZone.java  | 13 +++++++++---
 3 files changed, 31 insertions(+), 11 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index ec9d30c28..469fa6f2c 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -36,7 +36,8 @@ Serialization compatible - Yes
 Data compatible - Yes, except
  - DateTimeZone data updated to version 2013c
 
-Semantic compatible - Yes
+Semantic compatible - Yes, except
+ - DateTimeZone is now limited to offsets from -23:59:59.999 to +23:59:59.999
 
 
 Deprecations since 2.2
@@ -56,6 +57,11 @@ Bug fixes since 2.2
 - Days.daysBetween fails for MonthDay [#22]
   Incorrect calculation around leap years
 
+- DateTimeZone failed to validate offsets [#43]
+  Previously, there was little validation, resulting in the ability to create large offsets
+  Those offsets could fail in other parts of the library
+  Now, it is limited to -23:59:59.999 to +23:59:59.999
+
 
 Scala
 --------
diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index f62ab9c07..afa75d793 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -32,7 +32,6 @@
 import org.joda.convert.ToString;
 import org.joda.time.chrono.BaseChronology;
 import org.joda.time.field.FieldUtils;
-import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.DateTimeFormatterBuilder;
 import org.joda.time.format.FormatUtils;
@@ -93,6 +92,8 @@
 
     /** The time zone for Universal Coordinated Time */
     public static final DateTimeZone UTC = new FixedDateTimeZone("UTC", "UTC", 0, 0);
+    /** Maximum offset. */
+    private static final int MAX_MILLIS = (86400 * 1000) - 1;
 
     /** The instance that is providing time zones. */
     private static Provider cProvider;
@@ -229,7 +230,7 @@ public static DateTimeZone forID(String id) {
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
      * 
-     * @param hoursOffset  the offset in hours from UTC
+     * @param hoursOffset  the offset in hours from UTC, from -23 to +23
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if the offset is too large or too small
      */
@@ -245,7 +246,7 @@ public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumen
      * The minutes value is always positive and in the range 0 to 59.
      * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
      * 
-     * @param hoursOffset  the offset in hours from UTC
+     * @param hoursOffset  the offset in hours from UTC, from -23 to +23
      * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if the offset or minute is too large or too small
@@ -254,16 +255,19 @@ public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
+        if (hoursOffset < -23 || hoursOffset > 23) {
+            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
+        }
         if (minutesOffset < 0 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
         int offset = 0;
         try {
-            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
+            int hoursInMinutes = hoursOffset * 60;
             if (hoursInMinutes < 0) {
-                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
+                minutesOffset = hoursInMinutes - minutesOffset;
             } else {
-                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
+                minutesOffset = hoursInMinutes + minutesOffset;
             }
             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
@@ -275,10 +279,13 @@ public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff
     /**
      * Gets a time zone instance for the specified offset to UTC in milliseconds.
      *
-     * @param millisOffset  the offset in millis from UTC
+     * @param millisOffset  the offset in millis from UTC, from -23:59:59.999 to +23:59:59.999
      * @return the DateTimeZone object for the offset
      */
     public static DateTimeZone forOffsetMillis(int millisOffset) {
+        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
+            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
+        }
         String id = printOffset(millisOffset);
         return fixedOffsetZone(id, millisOffset);
     }
diff --git a/src/test/java/org/joda/time/TestDateTimeZone.java b/src/test/java/org/joda/time/TestDateTimeZone.java
index 106363fbe..3b4221e0a 100644
--- a/src/test/java/org/joda/time/TestDateTimeZone.java
+++ b/src/test/java/org/joda/time/TestDateTimeZone.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2011 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -20,7 +20,6 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.PrintStream;
-import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.security.AllPermission;
 import java.security.CodeSource;
@@ -303,9 +302,11 @@ public void testForOffsetHours_int() {
     //-----------------------------------------------------------------------
     public void testForOffsetHoursMinutes_int_int() {
         assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));
+        assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));
         assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));
         assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));
         assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));
+        assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));
         try {
             DateTimeZone.forOffsetHoursMinutes(2, 60);
             fail();
@@ -323,7 +324,11 @@ public void testForOffsetHoursMinutes_int_int() {
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            DateTimeZone.forOffsetHoursMinutes(999999, 0);
+            DateTimeZone.forOffsetHoursMinutes(24, 0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            DateTimeZone.forOffsetHoursMinutes(-24, 0);
             fail();
         } catch (IllegalArgumentException ex) {}
     }        
@@ -331,8 +336,10 @@ public void testForOffsetHoursMinutes_int_int() {
     //-----------------------------------------------------------------------
     public void testForOffsetMillis_int() {
         assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0));
+        assertEquals(DateTimeZone.forID("+23:59:59.999"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1));
         assertEquals(DateTimeZone.forID("+03:00"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000));
         assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000));
+        assertEquals(DateTimeZone.forID("-23:59:59.999"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1));
         assertEquals(DateTimeZone.forID("+04:45:17.045"),
                 DateTimeZone.forOffsetMillis(
                         4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45));

From 362ed1787724cda3ded37de2b0aa0f13adf0a66e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Jul 2013 11:42:56 +0100
Subject: [PATCH 19/43] Fix to allow offsets from -00:01 to -00:59

Fixes #42
---
 RELEASE-NOTES.txt                             |  6 ++++
 src/main/java/org/joda/time/DateTimeZone.java | 33 +++++++++++++++----
 .../java/org/joda/time/TestDateTimeZone.java  | 25 ++++++++------
 3 files changed, 48 insertions(+), 16 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 469fa6f2c..4a010c581 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -62,6 +62,12 @@ Bug fixes since 2.2
   Those offsets could fail in other parts of the library
   Now, it is limited to -23:59:59.999 to +23:59:59.999
 
+- DateTimeZone.forOffsetHoursMinutes failed to allow offsets from -00:01 to -00:59 [#42]
+  The forOffsetHoursMinutes() method could not create an offset  from -00:01 to -00:59
+  This was due to an inappropriate design
+  A backwards compatible change to the input handling has been made
+  forOffsetHoursMinutes(0, -15) now creates -00:15
+
 
 Scala
 --------
diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index afa75d793..a127604bb 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -243,13 +243,31 @@ public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumen
      * This method assumes 60 minutes in an hour, and standard length minutes.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
-     * The minutes value is always positive and in the range 0 to 59.
-     * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
+     * The hours value must be in the range -23 to +23.
+     * The minutes value must be in the range -59 to +59.
+     * The following combinations of sign for the hour and minute are possible:
+     * <pre>
+     *  Hour    Minute    Example    Result
+     * 
+     *  +ve     +ve       (2, 15)    +02:15
+     *  +ve     zero      (2, 0)     +02:00
+     *  +ve     -ve       (2, -15)   IllegalArgumentException
+     * 
+     *  zero    +ve       (0, 15)    +00:15
+     *  zero    zero      (0, 0)     +00:00
+     *  zero    -ve       (0, -15)   -00:15
+     * 
+     *  -ve     +ve       (-2, 15)   -02:15
+     *  -ve     zero      (-2, 0)    -02:00
+     *  -ve     -ve       (-2, -15)  -02:15
+     * </pre>
+     * Note that in versions before 2.3, the minutes had to be zero or positive.
      * 
      * @param hoursOffset  the offset in hours from UTC, from -23 to +23
-     * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
+     * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
      * @return the DateTimeZone object for the offset
-     * @throws IllegalArgumentException if the offset or minute is too large or too small
+     * @throws IllegalArgumentException if any value is out of range, the minutes are negative
+     *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
      */
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
@@ -258,14 +276,17 @@ public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+        if (minutesOffset < -59 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
+        if (hoursOffset > 0 && minutesOffset < 0) {
+            throw new IllegalArgumentException("Positive hours must not have negative minutes: " + minutesOffset);
+        }
         int offset = 0;
         try {
             int hoursInMinutes = hoursOffset * 60;
             if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
+                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);
             } else {
                 minutesOffset = hoursInMinutes + minutesOffset;
             }
diff --git a/src/test/java/org/joda/time/TestDateTimeZone.java b/src/test/java/org/joda/time/TestDateTimeZone.java
index 3b4221e0a..cec86cd43 100644
--- a/src/test/java/org/joda/time/TestDateTimeZone.java
+++ b/src/test/java/org/joda/time/TestDateTimeZone.java
@@ -303,9 +303,22 @@ public void testForOffsetHours_int() {
     public void testForOffsetHoursMinutes_int_int() {
         assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));
         assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));
-        assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));
+        
+        assertEquals(DateTimeZone.forID("+02:15"), DateTimeZone.forOffsetHoursMinutes(2, 15));
+        assertEquals(DateTimeZone.forID("+02:00"), DateTimeZone.forOffsetHoursMinutes(2, 0));
+        try {
+            DateTimeZone.forOffsetHoursMinutes(2, -15);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        assertEquals(DateTimeZone.forID("+00:15"), DateTimeZone.forOffsetHoursMinutes(0, 15));
+        assertEquals(DateTimeZone.forID("+00:00"), DateTimeZone.forOffsetHoursMinutes(0, 0));
+        assertEquals(DateTimeZone.forID("-00:15"), DateTimeZone.forOffsetHoursMinutes(0, -15));
+        
         assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));
-        assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));
+        assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, -15));
+        assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, 15));
+        
         assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));
         try {
             DateTimeZone.forOffsetHoursMinutes(2, 60);
@@ -315,14 +328,6 @@ public void testForOffsetHoursMinutes_int_int() {
             DateTimeZone.forOffsetHoursMinutes(-2, 60);
             fail();
         } catch (IllegalArgumentException ex) {}
-        try {
-            DateTimeZone.forOffsetHoursMinutes(2, -1);
-            fail();
-        } catch (IllegalArgumentException ex) {}
-        try {
-            DateTimeZone.forOffsetHoursMinutes(-2, -1);
-            fail();
-        } catch (IllegalArgumentException ex) {}
         try {
             DateTimeZone.forOffsetHoursMinutes(24, 0);
             fail();

From 28bfc41b9f4032203ac3b782fd001601465fa79d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Jul 2013 11:42:56 +0100
Subject: [PATCH 20/43] Update to time-zone data 2013d

---
 RELEASE-NOTES.txt                             |  2 +-
 src/main/java/org/joda/time/tz/src/Readme.txt |  2 +-
 src/main/java/org/joda/time/tz/src/africa     | 16 ++++---
 src/main/java/org/joda/time/tz/src/asia       | 42 ++++++-------------
 .../java/org/joda/time/tz/src/australasia     | 20 +++++----
 src/main/java/org/joda/time/tz/src/europe     |  8 ++--
 .../java/org/joda/time/tz/src/southamerica    |  4 +-
 7 files changed, 44 insertions(+), 50 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 4a010c581..6ca252df5 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -34,7 +34,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
- - DateTimeZone data updated to version 2013c
+ - DateTimeZone data updated to version 2013d
 
 Semantic compatible - Yes, except
  - DateTimeZone is now limited to offsets from -23:59:59.999 to +23:59:59.999
diff --git a/src/main/java/org/joda/time/tz/src/Readme.txt b/src/main/java/org/joda/time/tz/src/Readme.txt
index 099c02fdd..8f19af450 100644
--- a/src/main/java/org/joda/time/tz/src/Readme.txt
+++ b/src/main/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2013c.
+http://www.twinsun.com/tz/tz-link.htm, version 2013d.
diff --git a/src/main/java/org/joda/time/tz/src/africa b/src/main/java/org/joda/time/tz/src/africa
index 5f4f8ebc5..a92d7f511 100644
--- a/src/main/java/org/joda/time/tz/src/africa
+++ b/src/main/java/org/joda/time/tz/src/africa
@@ -852,12 +852,18 @@ Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
 # announced that year's Ramadan daylight-saving transitions would be
 # 2012-07-20 and 2012-08-20; see
 # <http://www.mmsp.gov.ma/fr/actualites.aspx?id=288>.
-#
+
+# From Andrew Paprocki (2013-07-02):
+# Morocco announced that the year's Ramadan daylight-savings
+# transitions would be 2013-07-07 and 2013-08-10; see:
+# http://www.maroc.ma/en/news/morocco-suspends-daylight-saving-time-july-7-aug10
+
+# From Paul Eggert (2013-07-03):
 # To estimate what the Moroccan government will do in future years,
-# transition dates for 2013 through 2021 were determined by running
+# transition dates for 2014 through 2021 were determined by running
 # the following program under GNU Emacs 24.3:
 #
-# (let ((islamic-year 1434))
+# (let ((islamic-year 1435))
 #   (while (< islamic-year 1444)
 #     (let ((a
 #	     (calendar-gregorian-from-absolute
@@ -910,8 +916,8 @@ Rule	Morocco	2012	2019	-	Apr	 lastSun 2:00	1:00	S
 Rule	Morocco	2012	max	-	Sep	 lastSun 3:00	0	-
 Rule	Morocco	2012	only	-	Jul	 20	 3:00	0	-
 Rule	Morocco	2012	only	-	Aug	 20	 2:00	1:00	S
-Rule	Morocco	2013	only	-	Jul	  9	 3:00	0	-
-Rule	Morocco	2013	only	-	Aug	  8	 2:00	1:00	S
+Rule	Morocco	2013	only	-	Jul	  7	 3:00	0	-
+Rule	Morocco	2013	only	-	Aug	 10	 2:00	1:00	S
 Rule	Morocco	2014	only	-	Jun	 29	 3:00	0	-
 Rule	Morocco	2014	only	-	Jul	 29	 2:00	1:00	S
 Rule	Morocco	2015	only	-	Jun	 18	 3:00	0	-
diff --git a/src/main/java/org/joda/time/tz/src/asia b/src/main/java/org/joda/time/tz/src/asia
index e544fcce7..79cfc4883 100644
--- a/src/main/java/org/joda/time/tz/src/asia
+++ b/src/main/java/org/joda/time/tz/src/asia
@@ -1212,39 +1212,21 @@ Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
 Rule	Zion	2012	only	-	Mar	Fri>=26	2:00	1:00	D
 Rule	Zion	2012	only	-	Sep	23	2:00	0	S
 
-# From Ephraim Silverberg (2012-10-18):
-# Yesterday, the Interior Ministry Committee, after more than a year
-# past, approved sending the proposed June 2011 changes to the Time
-# Decree Law back to the Knesset for second and third (final) votes
-# before the upcoming elections on Jan. 22, 2013.  Hence, although the
-# changes are not yet law, they are expected to be so before February 2013.
-#
-# As of 2013, DST starts at 02:00 on the Friday before the last Sunday in March.
-# DST ends at 02:00 on the first Sunday after October 1, unless it occurs on the
-# second day of the Jewish Rosh Hashana holiday, in which case DST ends a day
-# later (i.e. at 02:00 the first Monday after October 2).
-# [Rosh Hashana holidays are factored in until 2100.]
-
-# From Ephraim Silverberg (2012-11-05):
-# The Knesset passed today (in second and final readings) the amendment to the
-# Time Decree Law making the changes ... law.
+# From Ephraim Silverberg (2013-06-27):
+# On June 23, 2013, the Israeli government approved changes to the
+# Time Decree Law.  The next day, the changes passed the First Reading
+# in the Knesset.  The law is expected to pass the Second and Third
+# (final) Readings by the beginning of September 2013.
+#
+# As of 2013, DST starts at 02:00 on the Friday before the last Sunday
+# in March.  DST ends at 02:00 on the last Sunday of October.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Zion	2013	max	-	Mar	Fri>=23	2:00	1:00	D
-Rule	Zion	2013	2026	-	Oct	Sun>=2	2:00	0	S
-Rule	Zion	2027	only	-	Oct	Mon>=3	2:00	0	S
-Rule	Zion	2028	max	-	Oct	Sun>=2	2:00	0	S
-# The following rules are commented out for now, as they break older
-# versions of zic that support only signed 32-bit timestamps, i.e.,
-# through 2038-01-19 03:14:07 UTC.
-#Rule	Zion	2028	2053	-	Oct	Sun>=2	2:00	0	S
-#Rule	Zion	2054	only	-	Oct	Mon>=3	2:00	0	S
-#Rule	Zion	2055	2080	-	Oct	Sun>=2	2:00	0	S
-#Rule	Zion	2081	only	-	Oct	Mon>=3	2:00	0	S
-#Rule	Zion	2082	max	-	Oct	Sun>=2	2:00	0	S
+Rule	Zion	2013	max	-	Oct	lastSun	2:00	0	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
+Zone	Asia/Jerusalem	2:20:54 -	LMT	1880
 			2:20:40	-	JMT	1918	# Jerusalem Mean Time?
 			2:00	Zion	I%sT
 
@@ -2547,8 +2529,8 @@ Rule	Syria	2006	only	-	Sep	22	0:00	0	-
 Rule	Syria	2007	only	-	Mar	lastFri	0:00	1:00	S
 # From Jesper Norgard (2007-10-27):
 # The sister center ICARDA of my work CIMMYT is confirming that Syria DST will
-# not take place 1.st November at 0:00 o'clock but 1.st November at 24:00 or
-# rather Midnight between Thursday and Friday. This does make more sence than
+# not take place 1st November at 0:00 o'clock but 1st November at 24:00 or
+# rather Midnight between Thursday and Friday. This does make more sense than
 # having it between Wednesday and Thursday (two workdays in Syria) since the
 # weekend in Syria is not Saturday and Sunday, but Friday and Saturday. So now
 # it is implemented at midnight of the last workday before weekend...
diff --git a/src/main/java/org/joda/time/tz/src/australasia b/src/main/java/org/joda/time/tz/src/australasia
index 5fe6d5316..797f81ce2 100644
--- a/src/main/java/org/joda/time/tz/src/australasia
+++ b/src/main/java/org/joda/time/tz/src/australasia
@@ -230,10 +230,16 @@ Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
 # - Macquarie Island will stay on UTC+11 for winter and therefore not
 # switch back from daylight savings time when other parts of Australia do
 # on 4 April.
+#
+# From Arthur David Olson (2013-05-23):
+# The 1919 transition is overspecified below so pre-2013 zics
+# will produce a binary file with an EST-type as the first 32-bit type;
+# this is required for correct handling of times before 1916 by
+# pre-2013 versions of localtime.
 Zone Antarctica/Macquarie 0	-	zzz	1899 Nov
 			10:00	-	EST	1916 Oct 1 2:00
 			10:00	1:00	EST	1917 Feb
-			10:00	Aus	EST	1919 Apr
+			10:00	Aus	EST	1919 Apr 1 0:00s
 			0	-	zzz	1948 Mar 25
 			10:00	Aus	EST	1967
 			10:00	AT	EST	2010 Apr 4 3:00
@@ -1475,12 +1481,12 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # From Paul Eggert (2000-01-08):
 # IATA SSIM (1999-09) says DST ends 0100 local time.  Go with McDow.
 
-# From the BBC World Service (1998-10-31 11:32 UTC):
+# From the BBC World Service in
+# http://news.bbc.co.uk/2/hi/asia-pacific/205226.stm (1998-10-31 16:03 UTC):
 # The Fijiian government says the main reasons for the time change is to
-# improve productivity and reduce road accidents.  But correspondents say it
-# also hopes the move will boost Fiji's ability to compete with other pacific
-# islands in the effort to attract tourists to witness the dawning of the new
-# millenium.
+# improve productivity and reduce road accidents.... [T]he move is also
+# intended to boost Fiji's ability to attract tourists to witness the dawning
+# of the new millennium.
 
 # http://www.fiji.gov.fj/press/2000_09/2000_09_13-05.shtml (2000-09-13)
 # reports that Fiji has discontinued DST.
@@ -1625,7 +1631,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # Shanks & Pottenger say the transition was on 1968-10-01; go with Mundell.
 
 # From Eric Ulevik (1999-05-03):
-# Tonga's director of tourism, who is also secretary of the National Millenium
+# Tonga's director of tourism, who is also secretary of the National Millennium
 # Committee, has a plan to get Tonga back in front.
 # He has proposed a one-off move to tropical daylight saving for Tonga from
 # October to March, which has won approval in principle from the Tongan
diff --git a/src/main/java/org/joda/time/tz/src/europe b/src/main/java/org/joda/time/tz/src/europe
index 5081a525c..0f429da8b 100644
--- a/src/main/java/org/joda/time/tz/src/europe
+++ b/src/main/java/org/joda/time/tz/src/europe
@@ -523,7 +523,7 @@ Rule	C-Eur	1944	only	-	Oct	 2	 2:00s	0	-
 # It seems that Paris, Monaco, Rule France, Rule Belgium all agree on
 # 2:00 standard time, e.g. 3:00 local time.  However there are no
 # countries that use C-Eur rules in September 1945, so the only items
-# affected are apparently these ficticious zones that translates acronyms
+# affected are apparently these fictitious zones that translate acronyms
 # CET and MET:
 #
 # Zone CET  1:00 C-Eur CE%sT
@@ -2779,9 +2779,9 @@ Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
 
 # Ukraine
 #
-# From Igor Karpov, who works for the Ukranian Ministry of Justice,
+# From Igor Karpov, who works for the Ukrainian Ministry of Justice,
 # via Garrett Wollman (2003-01-27):
-# BTW, I've found the official document on this matter. It's goverment
+# BTW, I've found the official document on this matter. It's government
 # regulations number 509, May 13, 1996. In my poor translation it says:
 # "Time in Ukraine is set to second timezone (Kiev time). Each last Sunday
 # of March at 3am the time is changing to 4am and each last Sunday of
@@ -2815,7 +2815,7 @@ Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
 # time this year after all.
 #
 # From Udo Schwedt (2011-10-18):
-# As far as I understand, the recent change to the Ukranian time zone
+# As far as I understand, the recent change to the Ukrainian time zone
 # (Europe/Kiev) to introduce permanent daylight saving time (similar
 # to Russia) was reverted today:
 #
diff --git a/src/main/java/org/joda/time/tz/src/southamerica b/src/main/java/org/joda/time/tz/src/southamerica
index 3c2f82ae4..0d8ed7a33 100644
--- a/src/main/java/org/joda/time/tz/src/southamerica
+++ b/src/main/java/org/joda/time/tz/src/southamerica
@@ -971,7 +971,7 @@ Rule	Brazil	2007	only	-	Feb	25	 0:00	0	-
 # adopted by the same states as before.
 Rule	Brazil	2007	only	-	Oct	Sun>=8	 0:00	1:00	S
 # From Frederico A. C. Neves (2008-09-10):
-# Acording to this decree
+# According to this decree
 # <a href="http://www.planalto.gov.br/ccivil_03/_Ato2007-2010/2008/Decreto/D6558.htm">
 # http://www.planalto.gov.br/ccivil_03/_Ato2007-2010/2008/Decreto/D6558.htm
 # </a>
@@ -1203,7 +1203,7 @@ Zone America/Rio_Branco	-4:31:12 -	LMT	1914
 # http://www.emol.com/noticias/nacional/detalle/detallenoticias.asp?idnoticia=467651
 # </a>
 #
-# This is not yet reflected in the offical "cambio de hora" site, but
+# This is not yet reflected in the official "cambio de hora" site, but
 # probably will be soon:
 # <a href="http://www.horaoficial.cl/cambio.htm">
 # http://www.horaoficial.cl/cambio.htm

From 67e22f8cf38b600de736c53b06e790e913675c33 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Jul 2013 11:42:56 +0100
Subject: [PATCH 21/43] Suppress deprecation warnings

---
 .../joda/time/TestBaseSingleFieldPeriod.java  |  3 ++-
 .../java/org/joda/time/TestDateTimeUtils.java | 11 ++++++----
 .../org/joda/time/TestDateTime_Basics.java    |  8 ++++++-
 .../joda/time/TestDateTime_Properties.java    |  1 +
 src/test/java/org/joda/time/TestDays.java     |  1 +
 src/test/java/org/joda/time/TestHours.java    |  3 ++-
 .../time/TestIllegalFieldValueException.java  |  3 ++-
 .../joda/time/TestLocalDateTime_Basics.java   | 15 +++++++------
 .../org/joda/time/TestLocalDate_Basics.java   |  4 +++-
 .../org/joda/time/TestLocalTime_Basics.java   |  6 +++++-
 .../joda/time/TestLocalTime_Constructors.java |  3 ++-
 src/test/java/org/joda/time/TestMinutes.java  |  3 ++-
 src/test/java/org/joda/time/TestMonths.java   |  1 +
 .../org/joda/time/TestPartial_Basics.java     | 17 +++------------
 .../joda/time/TestPartial_Constructors.java   | 17 ++-------------
 .../joda/time/TestPeriod_Constructors.java    | 18 +++++++++++++++-
 src/test/java/org/joda/time/TestSeconds.java  |  3 ++-
 .../java/org/joda/time/TestSerialization.java |  4 +++-
 .../org/joda/time/TestTimeOfDay_Basics.java   | 14 ++-----------
 .../joda/time/TestTimeOfDay_Constructors.java |  3 ++-
 .../joda/time/TestTimeOfDay_Properties.java   |  4 ++--
 src/test/java/org/joda/time/TestWeeks.java    |  3 ++-
 .../joda/time/TestYearMonthDay_Basics.java    | 21 +++----------------
 .../time/TestYearMonthDay_Constructors.java   |  7 ++-----
 .../time/TestYearMonthDay_Properties.java     |  3 ++-
 src/test/java/org/joda/time/TestYears.java    |  3 ++-
 26 files changed, 86 insertions(+), 93 deletions(-)

diff --git a/src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java b/src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java
index c04c06832..5f45305d6 100644
--- a/src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java
+++ b/src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -80,6 +80,7 @@ public void testFactory_between_RInstant() {
         }
     }
 
+    @SuppressWarnings("deprecation")
     public void testFactory_between_RPartial() {
         LocalDate start = new LocalDate(2006, 6, 9);
         LocalDate end1 = new LocalDate(2006, 6, 12);
diff --git a/src/test/java/org/joda/time/TestDateTimeUtils.java b/src/test/java/org/joda/time/TestDateTimeUtils.java
index dceb04619..810a2da0f 100644
--- a/src/test/java/org/joda/time/TestDateTimeUtils.java
+++ b/src/test/java/org/joda/time/TestDateTimeUtils.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2012 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -60,7 +60,6 @@
     // (before the late 90's they were all over the place)
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
-    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
@@ -145,14 +144,14 @@ public void testTest() {
 
     //-----------------------------------------------------------------------
     public void testClass() {
-        Class cls = DateTimeUtils.class;
+        Class<?> cls = DateTimeUtils.class;
         assertEquals(true, Modifier.isPublic(cls.getModifiers()));
         assertEquals(false, Modifier.isFinal(cls.getModifiers()));
         
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isProtected(cls.getDeclaredConstructors()[0].getModifiers()));
         
-        DateTimeUtils utils = new DateTimeUtils() {};
+        new DateTimeUtils() {};
     }
     
     //-----------------------------------------------------------------------
@@ -368,6 +367,8 @@ public void testGetIntervalChronology_RInterval() {
         assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null));
         
         MutableInterval ai = new MutableInterval() {
+            private static final long serialVersionUID = 1L;
+
             public Chronology getChronology() {
                 return null; // testing for this
             }
@@ -424,6 +425,7 @@ public void testGetDurationMillis_RI() {
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testIsContiguous_RP() {
         YearMonthDay ymd = new YearMonthDay(2005, 6, 9);
         assertEquals(true, DateTimeUtils.isContiguous(ymd));
@@ -447,6 +449,7 @@ public void testIsContiguous_RP() {
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testIsContiguous_RP_GJChronology() {
         YearMonthDay ymd = new YearMonthDay(2005, 6, 9, GJ);
         assertEquals(true, DateTimeUtils.isContiguous(ymd));
diff --git a/src/test/java/org/joda/time/TestDateTime_Basics.java b/src/test/java/org/joda/time/TestDateTime_Basics.java
index f191d7537..ad2f9a1ab 100644
--- a/src/test/java/org/joda/time/TestDateTime_Basics.java
+++ b/src/test/java/org/joda/time/TestDateTime_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -318,6 +318,7 @@ public Chronology getChronology() {
     }
 
     class MockEqualsChronology extends BaseChronology {
+        private static final long serialVersionUID = 1L;
         public boolean equals(Object obj) {
             return obj instanceof MockEqualsChronology;
         }
@@ -706,18 +707,21 @@ public void testToGregorianCalendar() {
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testToDateMidnight() {
         DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);
         DateMidnight test = base.toDateMidnight();
         assertEquals(new DateMidnight(base, COPTIC_DEFAULT), test);
     }
 
+    @SuppressWarnings("deprecation")
     public void testToYearMonthDay() {
         DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);
         YearMonthDay test = base.toYearMonthDay();
         assertEquals(new YearMonthDay(TEST_TIME1, COPTIC_DEFAULT), test);
     }
 
+    @SuppressWarnings("deprecation")
     public void testToTimeOfDay() {
         DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);
         TimeOfDay test = base.toTimeOfDay();
@@ -847,6 +851,7 @@ public void testWithTime_int_int_int() {
         } catch (IllegalArgumentException ex) {}
     }
     
+    @SuppressWarnings("deprecation")
     public void testWithFields_RPartial() {
         DateTime test = new DateTime(2004, 5, 6, 7, 8, 9, 0);
         DateTime result = test.withFields(new YearMonthDay(2003, 4, 5));
@@ -1193,6 +1198,7 @@ public void testProperty() {
         assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));
         assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));
         DateTimeFieldType bad = new DateTimeFieldType("bad") {
+            private static final long serialVersionUID = 1L;
             public DurationFieldType getDurationType() {
                 return DurationFieldType.weeks();
             }
diff --git a/src/test/java/org/joda/time/TestDateTime_Properties.java b/src/test/java/org/joda/time/TestDateTime_Properties.java
index d49062add..891e8a416 100644
--- a/src/test/java/org/joda/time/TestDateTime_Properties.java
+++ b/src/test/java/org/joda/time/TestDateTime_Properties.java
@@ -308,6 +308,7 @@ public void testPropertyCompareToYear() {
         } catch (IllegalArgumentException ex) {}
     }
 
+    @SuppressWarnings("deprecation")
     public void testPropertyCompareToYear2() {
         DateTime test1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);
         YearMonthDay ymd1 = new YearMonthDay(2003, 6, 9);
diff --git a/src/test/java/org/joda/time/TestDays.java b/src/test/java/org/joda/time/TestDays.java
index 073f8e026..18a4211f6 100644
--- a/src/test/java/org/joda/time/TestDays.java
+++ b/src/test/java/org/joda/time/TestDays.java
@@ -95,6 +95,7 @@ public void testFactory_daysBetween_RInstant() {
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testFactory_daysBetween_RPartial_LocalDate() {
         LocalDate start = new LocalDate(2006, 6, 9);
         LocalDate end1 = new LocalDate(2006, 6, 12);
diff --git a/src/test/java/org/joda/time/TestHours.java b/src/test/java/org/joda/time/TestHours.java
index d00811356..8f357b29e 100644
--- a/src/test/java/org/joda/time/TestHours.java
+++ b/src/test/java/org/joda/time/TestHours.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -99,6 +99,7 @@ public void testFactory_hoursBetween_RInstant() {
     public void testFactory_hoursBetween_RPartial() {
         LocalTime start = new LocalTime(12, 0);
         LocalTime end1 = new LocalTime(15, 0);
+        @SuppressWarnings("deprecation")
         TimeOfDay end2 = new TimeOfDay(18, 0);
         
         assertEquals(3, Hours.hoursBetween(start, end1).getHours());
diff --git a/src/test/java/org/joda/time/TestIllegalFieldValueException.java b/src/test/java/org/joda/time/TestIllegalFieldValueException.java
index cefa18d44..890c8563e 100644
--- a/src/test/java/org/joda/time/TestIllegalFieldValueException.java
+++ b/src/test/java/org/joda/time/TestIllegalFieldValueException.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -257,6 +257,7 @@ public void testGJCutover() {
         }
     }
 
+    @SuppressWarnings("deprecation")
     public void testReadablePartialValidate() {
         try {
             new YearMonthDay(1970, -5, 1);
diff --git a/src/test/java/org/joda/time/TestLocalDateTime_Basics.java b/src/test/java/org/joda/time/TestLocalDateTime_Basics.java
index 75e54a079..4c684957b 100644
--- a/src/test/java/org/joda/time/TestLocalDateTime_Basics.java
+++ b/src/test/java/org/joda/time/TestLocalDateTime_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2010 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -48,21 +48,16 @@
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
-    private static final int OFFSET = 1;
     private static final GJChronology GJ_UTC = GJChronology.getInstanceUTC();
     private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
     private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
     private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
     private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
     private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
     private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
     private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
     private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
 
 //    private long TEST_TIME1 =
 //        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
@@ -366,11 +361,15 @@ public void testCompareTo() {
 //            fail();
 //        } catch (ClassCastException ex) {}
         try {
-            test1.compareTo(new YearMonthDay());
+            @SuppressWarnings("deprecation")
+            YearMonthDay ymd = new YearMonthDay();
+            test1.compareTo(ymd);
             fail();
         } catch (ClassCastException ex) {}
         try {
-            test1.compareTo(new TimeOfDay());
+            @SuppressWarnings("deprecation")
+            TimeOfDay tod = new TimeOfDay();
+            test1.compareTo(tod);
             fail();
         } catch (ClassCastException ex) {}
         Partial partial = new Partial()
diff --git a/src/test/java/org/joda/time/TestLocalDate_Basics.java b/src/test/java/org/joda/time/TestLocalDate_Basics.java
index 9a85bd5c7..10e787a9c 100644
--- a/src/test/java/org/joda/time/TestLocalDate_Basics.java
+++ b/src/test/java/org/joda/time/TestLocalDate_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2010 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -238,6 +238,7 @@ public void testIsSupported_DurationFieldType() {
         assertEquals(false, test.isSupported((DurationFieldType) null));
     }
 
+    @SuppressWarnings("deprecation")
     public void testEqualsHashCode() {
         LocalDate test1 = new LocalDate(1970, 6, 9, COPTIC_PARIS);
         LocalDate test2 = new LocalDate(1970, 6, 9, COPTIC_PARIS);
@@ -318,6 +319,7 @@ public void testEqualsHashCodeAPI() {
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testCompareTo() {
         LocalDate test1 = new LocalDate(2005, 6, 2);
         LocalDate test1a = new LocalDate(2005, 6, 2);
diff --git a/src/test/java/org/joda/time/TestLocalTime_Basics.java b/src/test/java/org/joda/time/TestLocalTime_Basics.java
index 3feb4402f..42d3f25b7 100644
--- a/src/test/java/org/joda/time/TestLocalTime_Basics.java
+++ b/src/test/java/org/joda/time/TestLocalTime_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -225,6 +225,7 @@ public void testIsSupported_DateTimeFieldType() {
         assertEquals(false, test.isSupported((DateTimeFieldType) null));
         
         DateTimeFieldType d = new DateTimeFieldType("hours") {
+            private static final long serialVersionUID = 1L;
             public DurationFieldType getDurationType() {
                 return DurationFieldType.hours();
             }
@@ -238,6 +239,7 @@ public DateTimeField getField(Chronology chronology) {
         assertEquals(false, test.isSupported(d));
         
         d = new DateTimeFieldType("hourOfYear") {
+            private static final long serialVersionUID = 1L;
             public DurationFieldType getDurationType() {
                 return DurationFieldType.hours();
             }
@@ -263,6 +265,7 @@ public void testIsSupported_DurationFieldType() {
         assertEquals(false, test.isSupported((DurationFieldType) null));
     }
 
+    @SuppressWarnings("deprecation")
     public void testEqualsHashCode() {
         LocalTime test1 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);
         LocalTime test2 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);
@@ -307,6 +310,7 @@ public Chronology getChronology() {
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testCompareTo() {
         LocalTime test1 = new LocalTime(10, 20, 30, 40);
         LocalTime test1a = new LocalTime(10, 20, 30, 40);
diff --git a/src/test/java/org/joda/time/TestLocalTime_Constructors.java b/src/test/java/org/joda/time/TestLocalTime_Constructors.java
index 3bb5b3994..68c5bfc02 100644
--- a/src/test/java/org/joda/time/TestLocalTime_Constructors.java
+++ b/src/test/java/org/joda/time/TestLocalTime_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -485,6 +485,7 @@ public void testConstructor_ObjectLocalDateTime() throws Throwable {
         assertEquals(40, test.getMillisOfSecond());
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_ObjectTimeOfDay() throws Throwable {
         TimeOfDay time = new TimeOfDay(10, 20, 30, 40, BUDDHIST_UTC);
         LocalTime test = new LocalTime(time);
diff --git a/src/test/java/org/joda/time/TestMinutes.java b/src/test/java/org/joda/time/TestMinutes.java
index 8d488a705..3a289ef05 100644
--- a/src/test/java/org/joda/time/TestMinutes.java
+++ b/src/test/java/org/joda/time/TestMinutes.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -89,6 +89,7 @@ public void testFactory_minutesBetween_RInstant() {
     public void testFactory_minutesBetween_RPartial() {
         LocalTime start = new LocalTime(12, 3);
         LocalTime end1 = new LocalTime(12, 6);
+        @SuppressWarnings("deprecation")
         TimeOfDay end2 = new TimeOfDay(12, 9);
         
         assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes());
diff --git a/src/test/java/org/joda/time/TestMonths.java b/src/test/java/org/joda/time/TestMonths.java
index ec44f9e18..cf50e4027 100644
--- a/src/test/java/org/joda/time/TestMonths.java
+++ b/src/test/java/org/joda/time/TestMonths.java
@@ -105,6 +105,7 @@ public void testFactory_monthsBetween_RInstant() {
     }
 
     //-------------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testFactory_monthsBetween_RPartial_LocalDate() {
         LocalDate start = new LocalDate(2006, 6, 9);
         LocalDate end1 = new LocalDate(2006, 9, 9);
diff --git a/src/test/java/org/joda/time/TestPartial_Basics.java b/src/test/java/org/joda/time/TestPartial_Basics.java
index b184d9ce0..715d2c19d 100644
--- a/src/test/java/org/joda/time/TestPartial_Basics.java
+++ b/src/test/java/org/joda/time/TestPartial_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -41,16 +41,10 @@
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
-    private static final int OFFSET = 1;
     private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
-    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
     private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
     private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
     private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
     private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
     private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
@@ -60,13 +54,6 @@
             + 20L * DateTimeConstants.MILLIS_PER_MINUTE
             + 30L * DateTimeConstants.MILLIS_PER_SECOND
             + 40L;
-            
-    private long TEST_TIME1 =
-        1L * DateTimeConstants.MILLIS_PER_HOUR
-        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
-        + 3L * DateTimeConstants.MILLIS_PER_SECOND
-        + 4L;
-        
     private long TEST_TIME2 =
         1L * DateTimeConstants.MILLIS_PER_DAY
         + 5L * DateTimeConstants.MILLIS_PER_HOUR
@@ -192,6 +179,7 @@ public void testIsSupported() {
         assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));
     }
 
+    @SuppressWarnings("deprecation")
     public void testEqualsHashCode() {
         Partial test1 = createHourMinPartial(COPTIC_PARIS);
         Partial test2 = createHourMinPartial(COPTIC_PARIS);
@@ -217,6 +205,7 @@ public void testEqualsHashCode() {
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testCompareTo() {
         Partial test1 = createHourMinPartial();
         Partial test1a = createHourMinPartial();
diff --git a/src/test/java/org/joda/time/TestPartial_Constructors.java b/src/test/java/org/joda/time/TestPartial_Constructors.java
index 7502f63d4..f302fa580 100644
--- a/src/test/java/org/joda/time/TestPartial_Constructors.java
+++ b/src/test/java/org/joda/time/TestPartial_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -35,26 +35,12 @@
     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
     private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
     private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
-    private static final int OFFSET = 1;
     
     private long TEST_TIME_NOW =
             10L * DateTimeConstants.MILLIS_PER_HOUR
             + 20L * DateTimeConstants.MILLIS_PER_MINUTE
             + 30L * DateTimeConstants.MILLIS_PER_SECOND
             + 40L;
-            
-    private long TEST_TIME1 =
-        1L * DateTimeConstants.MILLIS_PER_HOUR
-        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
-        + 3L * DateTimeConstants.MILLIS_PER_SECOND
-        + 4L;
-        
-    private long TEST_TIME2 =
-        1L * DateTimeConstants.MILLIS_PER_DAY
-        + 5L * DateTimeConstants.MILLIS_PER_HOUR
-        + 6L * DateTimeConstants.MILLIS_PER_MINUTE
-        + 7L * DateTimeConstants.MILLIS_PER_SECOND
-        + 8L;
         
     private DateTimeZone zone = null;
 
@@ -403,6 +389,7 @@ public void testConstructor_TypeArray_intArray_Chrono() throws Throwable {
     /**
      * Test constructor
      */
+    @SuppressWarnings("deprecation")
     public void testConstructor_Partial() throws Throwable {
         YearMonthDay ymd = new YearMonthDay(2005, 6, 25, GREGORIAN_PARIS);
         Partial test = new Partial(ymd);
diff --git a/src/test/java/org/joda/time/TestPeriod_Constructors.java b/src/test/java/org/joda/time/TestPeriod_Constructors.java
index 8261c0c44..11a019a84 100644
--- a/src/test/java/org/joda/time/TestPeriod_Constructors.java
+++ b/src/test/java/org/joda/time/TestPeriod_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -765,6 +765,7 @@ public void testConstructor_RI_RI_PeriodType5() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testConstructor_RP_RP1() throws Throwable {
         YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);
         YearMonthDay dt2 = new YearMonthDay(2005, 7, 10);
@@ -780,6 +781,7 @@ public void testConstructor_RP_RP1() throws Throwable {
         assertEquals(0, test.getMillis());
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_RP_RP2() throws Throwable {
         YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);
         YearMonthDay dt2 = new YearMonthDay(2005, 5, 17);
@@ -810,6 +812,7 @@ public void testConstructor_RP_RP2Local() throws Throwable {
         assertEquals(0, test.getMillis());
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_RP_RP3() throws Throwable {
         YearMonthDay dt1 = null;
         YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);
@@ -819,6 +822,7 @@ public void testConstructor_RP_RP3() throws Throwable {
         } catch (IllegalArgumentException ex) {}
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_RP_RP4() throws Throwable {
         YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);
         YearMonthDay dt2 = null;
@@ -828,6 +832,7 @@ public void testConstructor_RP_RP4() throws Throwable {
         } catch (IllegalArgumentException ex) {}
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_RP_RP5() throws Throwable {
         YearMonthDay dt1 = null;
         YearMonthDay dt2 = null;
@@ -837,6 +842,7 @@ public void testConstructor_RP_RP5() throws Throwable {
         } catch (IllegalArgumentException ex) {}
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_RP_RP6() throws Throwable {
         YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);
         TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);
@@ -865,6 +871,7 @@ public void testConstructor_RP_RP8() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testConstructor_RP_RP_PeriodType1() throws Throwable {
         YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);
         YearMonthDay dt2 = new YearMonthDay(2005, 7, 10);
@@ -880,6 +887,7 @@ public void testConstructor_RP_RP_PeriodType1() throws Throwable {
         assertEquals(0, test.getMillis());
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_RP_RP_PeriodType2() throws Throwable {
         YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);
         YearMonthDay dt2 = new YearMonthDay(2005, 5, 17);
@@ -910,6 +918,7 @@ public void testConstructor_RP_RP_PeriodType2Local() throws Throwable {
         assertEquals(0, test.getMillis());
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_RP_RP_PeriodType3() throws Throwable {
         YearMonthDay dt1 = null;
         YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);
@@ -919,6 +928,7 @@ public void testConstructor_RP_RP_PeriodType3() throws Throwable {
         } catch (IllegalArgumentException ex) {}
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_RP_RP_PeriodType4() throws Throwable {
         YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);
         YearMonthDay dt2 = null;
@@ -928,6 +938,7 @@ public void testConstructor_RP_RP_PeriodType4() throws Throwable {
         } catch (IllegalArgumentException ex) {}
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_RP_RP_PeriodType5() throws Throwable {
         YearMonthDay dt1 = null;
         YearMonthDay dt2 = null;
@@ -937,6 +948,7 @@ public void testConstructor_RP_RP_PeriodType5() throws Throwable {
         } catch (IllegalArgumentException ex) {}
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_RP_RP_PeriodType6() throws Throwable {
         YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);
         TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);
@@ -1441,6 +1453,7 @@ public void testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth2() throws T
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testFactoryFieldDifference1() throws Throwable {
         YearMonthDay start = new YearMonthDay(2005, 4, 9);
         DateTimeFieldType[] types = new DateTimeFieldType[] {
@@ -1461,6 +1474,7 @@ public void testFactoryFieldDifference1() throws Throwable {
         assertEquals(0, test.getMillis());
     }
 
+    @SuppressWarnings("deprecation")
     public void testFactoryFieldDifference2() throws Throwable {
         YearMonthDay ymd = new YearMonthDay(2005, 4, 9);
         try {
@@ -1473,6 +1487,7 @@ public void testFactoryFieldDifference2() throws Throwable {
         } catch (IllegalArgumentException ex) {}
     }
 
+    @SuppressWarnings("deprecation")
     public void testFactoryFieldDifference3() throws Throwable {
         YearMonthDay start = new YearMonthDay(2005, 4, 9);
         TimeOfDay endTime = new TimeOfDay(12, 30, 40, 0);
@@ -1482,6 +1497,7 @@ public void testFactoryFieldDifference3() throws Throwable {
         } catch (IllegalArgumentException ex) {}
     }
 
+    @SuppressWarnings("deprecation")
     public void testFactoryFieldDifference4() throws Throwable {
         DateTimeFieldType[] types = new DateTimeFieldType[] {
             DateTimeFieldType.year(),
diff --git a/src/test/java/org/joda/time/TestSeconds.java b/src/test/java/org/joda/time/TestSeconds.java
index 0062f89c1..6842d236f 100644
--- a/src/test/java/org/joda/time/TestSeconds.java
+++ b/src/test/java/org/joda/time/TestSeconds.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -89,6 +89,7 @@ public void testFactory_secondsBetween_RInstant() {
     public void testFactory_secondsBetween_RPartial() {
         LocalTime start = new LocalTime(12, 0, 3);
         LocalTime end1 = new LocalTime(12, 0, 6);
+        @SuppressWarnings("deprecation")
         TimeOfDay end2 = new TimeOfDay(12, 0, 9);
         
         assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds());
diff --git a/src/test/java/org/joda/time/TestSerialization.java b/src/test/java/org/joda/time/TestSerialization.java
index c15b14ef9..114b01d82 100644
--- a/src/test/java/org/joda/time/TestSerialization.java
+++ b/src/test/java/org/joda/time/TestSerialization.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -194,12 +194,14 @@ public void testSerializedLocalDateTime() throws Exception {
         inlineCompare(test, false);
     }
 
+    @SuppressWarnings("deprecation")
     public void testSerializedYearMonthDay() throws Exception {
         YearMonthDay test = new YearMonthDay();
         loadAndCompare(test, "YearMonthDay", false);
         inlineCompare(test, false);
     }
 
+    @SuppressWarnings("deprecation")
     public void testSerializedTimeOfDay() throws Exception {
         TimeOfDay test = new TimeOfDay();
         loadAndCompare(test, "TimeOfDay", false);
diff --git a/src/test/java/org/joda/time/TestTimeOfDay_Basics.java b/src/test/java/org/joda/time/TestTimeOfDay_Basics.java
index d13d78782..7ab489138 100644
--- a/src/test/java/org/joda/time/TestTimeOfDay_Basics.java
+++ b/src/test/java/org/joda/time/TestTimeOfDay_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -37,6 +37,7 @@
  *
  * @author Stephen Colebourne
  */
+@SuppressWarnings("deprecation")
 public class TestTimeOfDay_Basics extends TestCase {
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
@@ -47,12 +48,7 @@
     private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
     private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
     private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
-    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
     private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
     private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
     
@@ -62,12 +58,6 @@
             + 30L * DateTimeConstants.MILLIS_PER_SECOND
             + 40L;
             
-    private long TEST_TIME1 =
-        1L * DateTimeConstants.MILLIS_PER_HOUR
-        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
-        + 3L * DateTimeConstants.MILLIS_PER_SECOND
-        + 4L;
-        
     private long TEST_TIME2 =
         1L * DateTimeConstants.MILLIS_PER_DAY
         + 5L * DateTimeConstants.MILLIS_PER_HOUR
diff --git a/src/test/java/org/joda/time/TestTimeOfDay_Constructors.java b/src/test/java/org/joda/time/TestTimeOfDay_Constructors.java
index 6fdb45d0f..4ea820be5 100644
--- a/src/test/java/org/joda/time/TestTimeOfDay_Constructors.java
+++ b/src/test/java/org/joda/time/TestTimeOfDay_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -32,6 +32,7 @@
  *
  * @author Stephen Colebourne
  */
+@SuppressWarnings("deprecation")
 public class TestTimeOfDay_Constructors extends TestCase {
 
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
diff --git a/src/test/java/org/joda/time/TestTimeOfDay_Properties.java b/src/test/java/org/joda/time/TestTimeOfDay_Properties.java
index 68d63a331..ef893e1c9 100644
--- a/src/test/java/org/joda/time/TestTimeOfDay_Properties.java
+++ b/src/test/java/org/joda/time/TestTimeOfDay_Properties.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -25,10 +25,10 @@
  *
  * @author Stephen Colebourne
  */
+@SuppressWarnings("deprecation")
 public class TestTimeOfDay_Properties extends TestCase {
 
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
-    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     
     private long TEST_TIME_NOW =
             10L * DateTimeConstants.MILLIS_PER_HOUR
diff --git a/src/test/java/org/joda/time/TestWeeks.java b/src/test/java/org/joda/time/TestWeeks.java
index 3a2671228..ecc668b12 100644
--- a/src/test/java/org/joda/time/TestWeeks.java
+++ b/src/test/java/org/joda/time/TestWeeks.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -86,6 +86,7 @@ public void testFactory_weeksBetween_RInstant() {
         assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks());
     }
 
+    @SuppressWarnings("deprecation")
     public void testFactory_weeksBetween_RPartial() {
         LocalDate start = new LocalDate(2006, 6, 9);
         LocalDate end1 = new LocalDate(2006, 6, 30);
diff --git a/src/test/java/org/joda/time/TestYearMonthDay_Basics.java b/src/test/java/org/joda/time/TestYearMonthDay_Basics.java
index e4d0f1924..17b18a96a 100644
--- a/src/test/java/org/joda/time/TestYearMonthDay_Basics.java
+++ b/src/test/java/org/joda/time/TestYearMonthDay_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -37,38 +37,23 @@
  *
  * @author Stephen Colebourne
  */
+@SuppressWarnings("deprecation")
 public class TestYearMonthDay_Basics extends TestCase {
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
-    private static final int OFFSET = 1;
     private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
     private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
     private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
     private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
-    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
     private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
     private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
     
     private long TEST_TIME_NOW =
             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
-            
-    private long TEST_TIME1 =
-        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
-        + 12L * DateTimeConstants.MILLIS_PER_HOUR
-        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
-        
-    private long TEST_TIME2 =
-        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
-        + 14L * DateTimeConstants.MILLIS_PER_HOUR
-        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
-        
+
     private DateTimeZone zone = null;
 
     public static void main(String[] args) {
diff --git a/src/test/java/org/joda/time/TestYearMonthDay_Constructors.java b/src/test/java/org/joda/time/TestYearMonthDay_Constructors.java
index bd538b24a..e1dd80171 100644
--- a/src/test/java/org/joda/time/TestYearMonthDay_Constructors.java
+++ b/src/test/java/org/joda/time/TestYearMonthDay_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -22,8 +22,6 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-import org.joda.time.chrono.BuddhistChronology;
-import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
 
@@ -32,13 +30,12 @@
  *
  * @author Stephen Colebourne
  */
+@SuppressWarnings("deprecation")
 public class TestYearMonthDay_Constructors extends TestCase {
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
     private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
     private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
     
diff --git a/src/test/java/org/joda/time/TestYearMonthDay_Properties.java b/src/test/java/org/joda/time/TestYearMonthDay_Properties.java
index 0e37a79ac..e16a6036e 100644
--- a/src/test/java/org/joda/time/TestYearMonthDay_Properties.java
+++ b/src/test/java/org/joda/time/TestYearMonthDay_Properties.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2010 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -29,6 +29,7 @@
  *
  * @author Stephen Colebourne
  */
+@SuppressWarnings("deprecation")
 public class TestYearMonthDay_Properties extends TestCase {
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
diff --git a/src/test/java/org/joda/time/TestYears.java b/src/test/java/org/joda/time/TestYears.java
index 2c1097d9d..c14282bfe 100644
--- a/src/test/java/org/joda/time/TestYears.java
+++ b/src/test/java/org/joda/time/TestYears.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -86,6 +86,7 @@ public void testFactory_yearsBetween_RInstant() {
         assertEquals(6, Years.yearsBetween(start, end2).getYears());
     }
 
+    @SuppressWarnings("deprecation")
     public void testFactory_yearsBetween_RPartial() {
         LocalDate start = new LocalDate(2006, 6, 9);
         LocalDate end1 = new LocalDate(2009, 6, 9);

From 35bff3d17af8190fed77b92512f1777ad2b68fe9 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Jul 2013 11:47:59 +0100
Subject: [PATCH 22/43] Fix test case

---
 .../java/org/joda/time/TestMutableDateTime_Basics.java | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/test/java/org/joda/time/TestMutableDateTime_Basics.java b/src/test/java/org/joda/time/TestMutableDateTime_Basics.java
index dbddafcfd..9259d44a4 100644
--- a/src/test/java/org/joda/time/TestMutableDateTime_Basics.java
+++ b/src/test/java/org/joda/time/TestMutableDateTime_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -261,6 +261,7 @@ public Chronology getChronology() {
     }
 
     class MockEqualsChronology extends BaseChronology {
+        private static final long serialVersionUID = 1L;
         public boolean equals(Object obj) {
             return obj instanceof MockEqualsChronology;
         }
@@ -426,9 +427,9 @@ public void testToString_String_String() {
     }
 
     public void testToString_DTFormatter() {
-        DateMidnight test = new DateMidnight(TEST_TIME_NOW);
-        assertEquals("2002 00", test.toString(DateTimeFormat.forPattern("yyyy HH")));
-        assertEquals("2002-06-09T00:00:00.000+01:00", test.toString((DateTimeFormatter) null));
+        MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);
+        assertEquals("2002 01", test.toString(DateTimeFormat.forPattern("yyyy HH")));
+        assertEquals("2002-06-09T01:00:00.000+01:00", test.toString((DateTimeFormatter) null));
     }
 
     //-----------------------------------------------------------------------
@@ -730,6 +731,7 @@ public void testProperty() {
         assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));
         assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));
         DateTimeFieldType bad = new DateTimeFieldType("bad") {
+            private static final long serialVersionUID = 1L;
             public DurationFieldType getDurationType() {
                 return DurationFieldType.weeks();
             }

From fe915d2cb3cfac7d8f2d2f95970d41a65012e055 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Jul 2013 12:03:23 +0100
Subject: [PATCH 23/43] Complete deprecation of DateMidnight

Fixes #41
---
 RELEASE-NOTES.txt                             |  9 ++++-
 pom.xml                                       |  4 ++
 src/main/java/org/joda/time/DateMidnight.java |  7 ++--
 src/main/java/org/joda/time/DateTime.java     |  2 +
 src/main/java/org/joda/time/LocalDate.java    |  4 ++
 .../joda/time/TestDateMidnight_Basics.java    |  4 +-
 .../time/TestDateMidnight_Constructors.java   |  3 +-
 .../time/TestDateMidnight_Properties.java     |  3 +-
 .../org/joda/time/TestDateTime_Basics.java    |  1 +
 .../org/joda/time/TestLocalDate_Basics.java   |  3 ++
 .../java/org/joda/time/TestSerialization.java | 37 +++++++++----------
 .../java/org/joda/time/TestStringConvert.java |  3 +-
 12 files changed, 53 insertions(+), 27 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 6ca252df5..25c4cd33a 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -42,7 +42,14 @@ Semantic compatible - Yes, except
 
 Deprecations since 2.2
 ----------------------
-None
+- DateMidnight [#41]
+  This class is flawed in concept
+  The time of midnight occasionally does not occur in some time-zones
+  This is a result of a daylight savings time from 00:00 to 01:00
+  DateMidnight is essentially a DateTime with a time locked to midnight
+  Such a concept is more generally a poor one to use, given LocalDate
+  Replace DateMidnight with LocalDate
+  Or replace it with DateTime, perhaps using the withTimeAtStartOfDay() method
 
 
 Bug fixes since 2.2
diff --git a/pom.xml b/pom.xml
index f0d7522e8..e6cc643c3 100644
--- a/pom.xml
+++ b/pom.xml
@@ -49,6 +49,10 @@
     <contributor>
       <name>Guy Allard</name>
     </contributor>
+    <contributor>
+      <name>Oren Benjamin</name>
+      <url>https://github.com/oby1</url>
+    </contributor>
     <contributor>
       <name>Fredrik Borgh</name>
     </contributor>
diff --git a/src/main/java/org/joda/time/DateMidnight.java b/src/main/java/org/joda/time/DateMidnight.java
index 2a3fee352..05e348de9 100644
--- a/src/main/java/org/joda/time/DateMidnight.java
+++ b/src/main/java/org/joda/time/DateMidnight.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2011 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -69,8 +69,9 @@
  * @since 1.0
  * @deprecated The time of midnight does not exist in some time zones
  * where the daylight saving time forward shift skips the midnight hour.
- * Use {@link LocalDate} to represent a date without a time zone
- * and {@link DateTime#withTimeAtStartOfDay()} to get an instant at the
+ * Use {@link LocalDate} to represent a date without a time zone.
+ * Or use {@link DateTime} to represent a full date and time, perhaps
+ * using {@link DateTime#withTimeAtStartOfDay()} to get an instant at the
  * start of a day.
  */
 @Deprecated
diff --git a/src/main/java/org/joda/time/DateTime.java b/src/main/java/org/joda/time/DateTime.java
index 376853b9f..bb879a981 100644
--- a/src/main/java/org/joda/time/DateTime.java
+++ b/src/main/java/org/joda/time/DateTime.java
@@ -1498,7 +1498,9 @@ public Property property(DateTimeFieldType type) {
      * same millis and chronology.
      * 
      * @return a DateMidnight using the same millis and chronology
+     * @deprecated DateMidnight is deprecated
      */
+    @Deprecated
     public DateMidnight toDateMidnight() {
         return new DateMidnight(getMillis(), getChronology());
     }
diff --git a/src/main/java/org/joda/time/LocalDate.java b/src/main/java/org/joda/time/LocalDate.java
index af7e500c1..7d9b480e9 100644
--- a/src/main/java/org/joda/time/LocalDate.java
+++ b/src/main/java/org/joda/time/LocalDate.java
@@ -835,7 +835,9 @@ public DateTime toDateTimeAtCurrentTime(DateTimeZone zone) {
      * This instance is immutable and unaffected by this method call.
      *
      * @return the DateMidnight instance in the default zone
+     * @deprecated DateMidnight is deprecated
      */
+    @Deprecated
     public DateMidnight toDateMidnight() {
         return toDateMidnight(null);
     }
@@ -856,7 +858,9 @@ public DateMidnight toDateMidnight() {
      *
      * @param zone  the zone to get the DateMidnight in, null means default zone
      * @return the DateMidnight instance
+     * @deprecated DateMidnight is deprecated
      */
+    @Deprecated
     public DateMidnight toDateMidnight(DateTimeZone zone) {
         zone = DateTimeUtils.getZone(zone);
         Chronology chrono = getChronology().withZone(zone);
diff --git a/src/test/java/org/joda/time/TestDateMidnight_Basics.java b/src/test/java/org/joda/time/TestDateMidnight_Basics.java
index 3f083384e..57dc33b05 100644
--- a/src/test/java/org/joda/time/TestDateMidnight_Basics.java
+++ b/src/test/java/org/joda/time/TestDateMidnight_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -44,6 +44,7 @@
  *
  * @author Stephen Colebourne
  */
+@SuppressWarnings("deprecation")
 public class TestDateMidnight_Basics extends TestCase {
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
@@ -990,6 +991,7 @@ public void testProperty() {
         assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear()));
         assertEquals(test.property(DateTimeFieldType.millisOfSecond()), test.property(DateTimeFieldType.millisOfSecond()));
         DateTimeFieldType bad = new DateTimeFieldType("bad") {
+            private static final long serialVersionUID = 1L;
             public DurationFieldType getDurationType() {
                 return DurationFieldType.weeks();
             }
diff --git a/src/test/java/org/joda/time/TestDateMidnight_Constructors.java b/src/test/java/org/joda/time/TestDateMidnight_Constructors.java
index f7c19a29a..2277c6601 100644
--- a/src/test/java/org/joda/time/TestDateMidnight_Constructors.java
+++ b/src/test/java/org/joda/time/TestDateMidnight_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -32,6 +32,7 @@
  *
  * @author Stephen Colebourne
  */
+@SuppressWarnings("deprecation")
 public class TestDateMidnight_Constructors extends TestCase {
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
diff --git a/src/test/java/org/joda/time/TestDateMidnight_Properties.java b/src/test/java/org/joda/time/TestDateMidnight_Properties.java
index ab2898fa6..50a77406a 100644
--- a/src/test/java/org/joda/time/TestDateMidnight_Properties.java
+++ b/src/test/java/org/joda/time/TestDateMidnight_Properties.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@
  * @author Stephen Colebourne
  * @author Mike Schrag
  */
+@SuppressWarnings("deprecation")
 public class TestDateMidnight_Properties extends TestCase {
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
diff --git a/src/test/java/org/joda/time/TestDateTime_Basics.java b/src/test/java/org/joda/time/TestDateTime_Basics.java
index ad2f9a1ab..5e103ba81 100644
--- a/src/test/java/org/joda/time/TestDateTime_Basics.java
+++ b/src/test/java/org/joda/time/TestDateTime_Basics.java
@@ -522,6 +522,7 @@ public void testToString_String_Locale() {
         assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null));
     }
 
+    @SuppressWarnings("deprecation")
     public void testToString_DTFormatter() {
         DateMidnight test = new DateMidnight(TEST_TIME_NOW);
         assertEquals("2002 00", test.toString(DateTimeFormat.forPattern("yyyy HH")));
diff --git a/src/test/java/org/joda/time/TestLocalDate_Basics.java b/src/test/java/org/joda/time/TestLocalDate_Basics.java
index 10e787a9c..732e4ea4b 100644
--- a/src/test/java/org/joda/time/TestLocalDate_Basics.java
+++ b/src/test/java/org/joda/time/TestLocalDate_Basics.java
@@ -872,6 +872,7 @@ public void testToDateTime_wrongChronoLocalTime_Zone() {
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testToDateMidnight() {
         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
         
@@ -881,6 +882,7 @@ public void testToDateMidnight() {
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testToDateMidnight_Zone() {
         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
         
@@ -889,6 +891,7 @@ public void testToDateMidnight_Zone() {
         assertEquals(new DateMidnight(2005, 6, 9, COPTIC_TOKYO), test);
     }
 
+    @SuppressWarnings("deprecation")
     public void testToDateMidnight_nullZone() {
         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
         
diff --git a/src/test/java/org/joda/time/TestSerialization.java b/src/test/java/org/joda/time/TestSerialization.java
index 114b01d82..434d4e87a 100644
--- a/src/test/java/org/joda/time/TestSerialization.java
+++ b/src/test/java/org/joda/time/TestSerialization.java
@@ -18,7 +18,6 @@
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.FileInputStream;
-import java.io.FileOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
@@ -34,8 +33,6 @@
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.chrono.JulianChronology;
-import org.joda.time.field.DelegatedDurationField;
-import org.joda.time.field.MillisDurationField;
 import org.joda.time.field.UnsupportedDateTimeField;
 import org.joda.time.field.UnsupportedDurationField;
 
@@ -77,12 +74,12 @@
             + 14L * DateTimeConstants.MILLIS_PER_HOUR
             + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
 
-    private static class MockDelegatedDurationField extends DelegatedDurationField implements Serializable {
-        private static final long serialVersionUID = 1878496002811998493L;        
-        public MockDelegatedDurationField() {
-            super(MillisDurationField.INSTANCE);
-        }
-    }
+//    private static class MockDelegatedDurationField extends DelegatedDurationField implements Serializable {
+//        private static final long serialVersionUID = 1878496002811998493L;        
+//        public MockDelegatedDurationField() {
+//            super(MillisDurationField.INSTANCE);
+//        }
+//    }
 
     private DateTimeZone originalDateTimeZone = null;
     private TimeZone originalTimeZone = null;
@@ -158,12 +155,14 @@ public void testSerializedMutableDateTimeProperty() throws Exception {
         inlineCompare(test, false);
     }
 
+    @SuppressWarnings("deprecation")
     public void testSerializedDateMidnight() throws Exception {
         DateMidnight test = new DateMidnight();
         loadAndCompare(test, "DateMidnight", false);
         inlineCompare(test, false);
     }
 
+    @SuppressWarnings("deprecation")
     public void testSerializedDateMidnightProperty() throws Exception {
         DateMidnight.Property test = new DateMidnight().monthOfYear();
         loadAndCompare(test, "DateMidnightProperty", false);
@@ -498,15 +497,15 @@ public void inlineCompare(Serializable test, boolean same) throws Exception {
 //        store(test, "Duration.dat");
 //    }
 
-    private void store(Serializable test, String filename) throws Exception {
-        FileOutputStream fos = new FileOutputStream("src/test/resources/" + filename);
-        ObjectOutputStream oos = new ObjectOutputStream(fos);
-        try {
-            oos.writeObject(test);
-        } finally {
-            oos.close();
-        }
-        oos.close();
-    }
+//    private void store(Serializable test, String filename) throws Exception {
+//        FileOutputStream fos = new FileOutputStream("src/test/resources/" + filename);
+//        ObjectOutputStream oos = new ObjectOutputStream(fos);
+//        try {
+//            oos.writeObject(test);
+//        } finally {
+//            oos.close();
+//        }
+//        oos.close();
+//    }
 
 }
diff --git a/src/test/java/org/joda/time/TestStringConvert.java b/src/test/java/org/joda/time/TestStringConvert.java
index 65e921173..e4fce0818 100644
--- a/src/test/java/org/joda/time/TestStringConvert.java
+++ b/src/test/java/org/joda/time/TestStringConvert.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2010 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -49,6 +49,7 @@ protected void tearDown() throws Exception {
     }
 
     //-----------------------------------------------------------------------
+    @SuppressWarnings("deprecation")
     public void testDateMidnight() {
         DateMidnight test = new DateMidnight(2010, 6, 30, ISOChronology.getInstance(ZONE));
         String str = StringConvert.INSTANCE.convertToString(test);

From 0f274a6e0450cfd23bae02f80d283dd0e66432a2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Jul 2013 12:59:10 +0100
Subject: [PATCH 24/43] Fix chronology cache synchronization

Fixes #44
---
 .../joda/time/chrono/BuddhistChronology.java  | 19 ++++---
 .../org/joda/time/chrono/GJChronology.java    | 56 +++++++++----------
 2 files changed, 38 insertions(+), 37 deletions(-)

diff --git a/src/main/java/org/joda/time/chrono/BuddhistChronology.java b/src/main/java/org/joda/time/chrono/BuddhistChronology.java
index cfa57f9e5..764774bd8 100644
--- a/src/main/java/org/joda/time/chrono/BuddhistChronology.java
+++ b/src/main/java/org/joda/time/chrono/BuddhistChronology.java
@@ -104,14 +104,17 @@ public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {
         if (zone == null) {
             zone = DateTimeZone.getDefault();
         }
-        BuddhistChronology chrono = cCache.get(zone);
-        if (chrono == null) {
-            // First create without a lower limit.
-            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);
-            // Impose lower limit and make another BuddhistChronology.
-            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);
-            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), "");
-            cCache.put(zone, chrono);
+        BuddhistChronology chrono;
+        synchronized (cCache) {
+            chrono = cCache.get(zone);
+            if (chrono == null) {
+                // First create without a lower limit.
+                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);
+                // Impose lower limit and make another BuddhistChronology.
+                DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);
+                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), "");
+                cCache.put(zone, chrono);
+            }
         }
         return chrono;
     }
diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index 0a19aa646..9e6b6246f 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -195,38 +195,36 @@ public static synchronized GJChronology getInstance(
         }
 
         GJChronology chrono;
-
-        ArrayList<GJChronology> chronos = cCache.get(zone);
-        if (chronos == null) {
-            chronos = new ArrayList<GJChronology>(2);
-            cCache.put(zone, chronos);
-        } else {
-            for (int i=chronos.size(); --i>=0; ) {
-                chrono = chronos.get(i);
-                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&
-                    cutoverInstant.equals(chrono.getGregorianCutover())) {
-                    
-                    return chrono;
+        synchronized (cCache) {
+            ArrayList<GJChronology> chronos = cCache.get(zone);
+            if (chronos == null) {
+                chronos = new ArrayList<GJChronology>(2);
+                cCache.put(zone, chronos);
+            } else {
+                for (int i = chronos.size(); --i >= 0;) {
+                    chrono = chronos.get(i);
+                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&
+                        cutoverInstant.equals(chrono.getGregorianCutover())) {
+                        
+                        return chrono;
+                    }
                 }
             }
+            if (zone == DateTimeZone.UTC) {
+                chrono = new GJChronology
+                    (JulianChronology.getInstance(zone, minDaysInFirstWeek),
+                     GregorianChronology.getInstance(zone, minDaysInFirstWeek),
+                     cutoverInstant);
+            } else {
+                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
+                chrono = new GJChronology
+                    (ZonedChronology.getInstance(chrono, zone),
+                     chrono.iJulianChronology,
+                     chrono.iGregorianChronology,
+                     chrono.iCutoverInstant);
+            }
+            chronos.add(chrono);
         }
-
-        if (zone == DateTimeZone.UTC) {
-            chrono = new GJChronology
-                (JulianChronology.getInstance(zone, minDaysInFirstWeek),
-                 GregorianChronology.getInstance(zone, minDaysInFirstWeek),
-                 cutoverInstant);
-        } else {
-            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
-            chrono = new GJChronology
-                (ZonedChronology.getInstance(chrono, zone),
-                 chrono.iJulianChronology,
-                 chrono.iGregorianChronology,
-                 chrono.iCutoverInstant);
-        }
-
-        chronos.add(chrono);
-
         return chrono;
     }
 

From 95b82019c46f45a7b948d8937f2f28067dfcd69f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Jul 2013 13:16:12 +0100
Subject: [PATCH 25/43] Add @since tag

See #20
---
 src/main/java/org/joda/time/base/AbstractInterval.java | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/main/java/org/joda/time/base/AbstractInterval.java b/src/main/java/org/joda/time/base/AbstractInterval.java
index ee9c0eec7..86b7f83ff 100644
--- a/src/main/java/org/joda/time/base/AbstractInterval.java
+++ b/src/main/java/org/joda/time/base/AbstractInterval.java
@@ -248,6 +248,7 @@ public boolean overlaps(ReadableInterval interval) {
      *
      * @param other  a readable interval to check against
      * @return true if the intervals are equal comparing the start and end millis
+     * @since 2.3
      */
     public boolean isEqual(ReadableInterval other) {
         return getStartMillis() == other.getStartMillis() &&

From afb454fb39e8560b4e5d2460715a3b28a17a0c50 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Jul 2013 13:42:23 +0100
Subject: [PATCH 26/43] Define equals/hashcode in Chronology

Previous definition relied on identity from caches
Weird cases can circimvent that
Fixes #36
---
 .../org/joda/time/chrono/BasicChronology.java | 13 +++++--
 .../joda/time/chrono/BuddhistChronology.java  | 12 +++++--
 .../org/joda/time/chrono/GJChronology.java    | 18 +++++++---
 .../org/joda/time/chrono/ISOChronology.java   | 13 +++++--
 .../joda/time/chrono/IslamicChronology.java   | 35 ++++++++++++++++++-
 5 files changed, 80 insertions(+), 11 deletions(-)

diff --git a/src/main/java/org/joda/time/chrono/BasicChronology.java b/src/main/java/org/joda/time/chrono/BasicChronology.java
index e0831f70b..4ed757b57 100644
--- a/src/main/java/org/joda/time/chrono/BasicChronology.java
+++ b/src/main/java/org/joda/time/chrono/BasicChronology.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -185,6 +185,7 @@ public int getMinimumDaysInFirstWeek() {
         return iMinDaysInFirstWeek;
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Checks if this chronology instance equals another.
      * 
@@ -193,7 +194,15 @@ public int getMinimumDaysInFirstWeek() {
      * @since 1.6
      */
     public boolean equals(Object obj) {
-        return super.equals(obj);
+        if (this == obj) {
+            return true;
+        }
+        if (obj != null && getClass() == obj.getClass()) {
+            BasicChronology chrono = (BasicChronology) obj;
+            return getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&
+                    getZone().equals(chrono.getZone());
+        }
+        return false;
     }
 
     /**
diff --git a/src/main/java/org/joda/time/chrono/BuddhistChronology.java b/src/main/java/org/joda/time/chrono/BuddhistChronology.java
index 764774bd8..b05fb8372 100644
--- a/src/main/java/org/joda/time/chrono/BuddhistChronology.java
+++ b/src/main/java/org/joda/time/chrono/BuddhistChronology.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -166,6 +166,7 @@ public Chronology withZone(DateTimeZone zone) {
         return getInstance(zone);
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Checks if this chronology instance equals another.
      * 
@@ -174,7 +175,14 @@ public Chronology withZone(DateTimeZone zone) {
      * @since 1.6
      */
     public boolean equals(Object obj) {
-        return super.equals(obj);
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof BuddhistChronology) {
+            BuddhistChronology chrono = (BuddhistChronology) obj;
+            return getZone().equals(chrono.getZone());
+        }
+        return false;
     }
 
     /**
diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index 9e6b6246f..960fe479e 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -404,6 +404,7 @@ public int getMinimumDaysInFirstWeek() {
         return iGregorianChronology.getMinimumDaysInFirstWeek();
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Checks if this chronology instance equals another.
      * 
@@ -412,7 +413,16 @@ public int getMinimumDaysInFirstWeek() {
      * @since 1.6
      */
     public boolean equals(Object obj) {
-        return super.equals(obj);
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof GJChronology) {
+            GJChronology chrono = (GJChronology) obj;
+            return iCutoverMillis == chrono.iCutoverMillis &&
+                    getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&
+                    getZone().equals(chrono.getZone());
+        }
+        return false;
     }
 
     /**
@@ -422,8 +432,8 @@ public boolean equals(Object obj) {
      * @since 1.6
      */
     public int hashCode() {
-        return "GJ".hashCode() * 11 + iJulianChronology.hashCode() +
-            iGregorianChronology.hashCode() + iCutoverInstant.hashCode();
+        return "GJ".hashCode() * 11 + getZone().hashCode() +
+                getMinimumDaysInFirstWeek() + iCutoverInstant.hashCode();
     }
 
     // Output
diff --git a/src/main/java/org/joda/time/chrono/ISOChronology.java b/src/main/java/org/joda/time/chrono/ISOChronology.java
index 976d1f66f..94847beff 100644
--- a/src/main/java/org/joda/time/chrono/ISOChronology.java
+++ b/src/main/java/org/joda/time/chrono/ISOChronology.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -179,6 +179,7 @@ protected void assemble(Fields fields) {
         }
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Checks if this chronology instance equals another.
      * 
@@ -187,7 +188,14 @@ protected void assemble(Fields fields) {
      * @since 1.6
      */
     public boolean equals(Object obj) {
-        return super.equals(obj);
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof ISOChronology) {
+            ISOChronology chrono = (ISOChronology) obj;
+            return getZone().equals(chrono.getZone());
+        }
+        return false;
     }
 
     /**
@@ -200,6 +208,7 @@ public int hashCode() {
         return "ISO".hashCode() * 11 + getZone().hashCode();
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Serialize ISOChronology instances using a small stub. This reduces the
      * serialized size, and deserialized instances come from the cache.
diff --git a/src/main/java/org/joda/time/chrono/IslamicChronology.java b/src/main/java/org/joda/time/chrono/IslamicChronology.java
index 377612d06..9a5dcc853 100644
--- a/src/main/java/org/joda/time/chrono/IslamicChronology.java
+++ b/src/main/java/org/joda/time/chrono/IslamicChronology.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -275,6 +275,26 @@ public Chronology withZone(DateTimeZone zone) {
         return getInstance(zone);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Checks if this chronology instance equals another.
+     * 
+     * @param obj  the object to compare to
+     * @return true if equal
+     * @since 2.3
+     */
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof IslamicChronology) {
+            IslamicChronology chrono = (IslamicChronology) obj;
+            return getLeapYearPatternType().index == chrono.getLeapYearPatternType().index &&
+                    super.equals(obj);
+        }
+        return false;
+    }
+
     /**
      * A suitable hash code for the chronology.
      * 
@@ -539,5 +559,18 @@ private Object readResolve() {
                     return this;
             }
         }
+
+        @Override
+        public boolean equals(Object obj) {
+            if (obj instanceof LeapYearPatternType) {
+                return index == ((LeapYearPatternType) obj).index;
+            }
+            return false;
+        }
+
+        @Override
+        public int hashCode() {
+            return index;
+        }
     }
 }

From 6bf5bba0f77f3023dec23a1de6e0a8cef8585f61 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Jul 2013 13:48:36 +0100
Subject: [PATCH 27/43] Define equals/hashcode in Chronology

Previous definition relied on identity from caches
Weird cases can circimvent that
Fixes #36
---
 RELEASE-NOTES.txt | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 25c4cd33a..cacef1ff0 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -22,6 +22,13 @@ Enhancements since 2.2
   Add method to compare intervals ignoring the chronology
   https://github.com/JodaOrg/joda-time/issues/20
 
+- Chronology classes now define equals methods [#36]
+  Previously, the Chronology classes relied on caching in factory methods
+  to guarantee instances were singletons
+  Now, there are dedicated, normal, equals methods
+  This will aid weird cases where deserialization or similar avoids the caches
+  It will make no difference to most users
+
 
 Compatibility with 2.2
 ----------------------
@@ -39,6 +46,9 @@ Data compatible - Yes, except
 Semantic compatible - Yes, except
  - DateTimeZone is now limited to offsets from -23:59:59.999 to +23:59:59.999
 
+ - BasicChronology now defines an equals method
+   This which would affect you if you subclassed it (unlikely)
+
 
 Deprecations since 2.2
 ----------------------

From 1adb1e69863dcd1ff282692bf1452c422528eeb9 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 21 Jul 2013 01:12:57 +0100
Subject: [PATCH 28/43] Fix DateTimeFormatter.parseInto() where it obtains the
 default year

Previously, wrong year could be obtained at year start/end in non UTC zones
Now obtains year using the chronology of the ReadWritableInstant
Fixes #21
---
 RELEASE-NOTES.txt                             |  5 ++
 .../joda/time/format/DateTimeFormatter.java   |  7 +-
 .../time/format/TestDateTimeFormatter.java    | 70 +++++++++++++++++++
 3 files changed, 80 insertions(+), 2 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index cacef1ff0..a8e815c1d 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -85,6 +85,11 @@ Bug fixes since 2.2
   A backwards compatible change to the input handling has been made
   forOffsetHoursMinutes(0, -15) now creates -00:15
 
+- DateTimeFormatter.parseInto [#21]
+  Fix parseInto() where it obtains the default year for parsing from the ReadWritableInstant
+  Previously, the wrong year could be obtained at the start or end of the year in non UTC zones
+  Now obtains the year from the ReadWritableInstant using the chronology of the ReadWritableInstant
+
 
 Scala
 --------
diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java
index 553b035c7..913d036e3 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java
@@ -23,6 +23,7 @@
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
+import org.joda.time.Instant;
 import org.joda.time.LocalDate;
 import org.joda.time.LocalDateTime;
 import org.joda.time.LocalTime;
@@ -682,7 +683,8 @@ private DateTimePrinter requirePrinter() {
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
-     * parses using the year from the supplied instant as the default.
+     * parses using the year from the supplied instant based on the chronology
+     * and time-zone of the supplied instant.
      * <p>
      * The parse will use the chronology of the instant.
      *
@@ -703,11 +705,12 @@ public int parseInto(ReadWritableInstant instant, String text, int position) {
         
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
+        int defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);
         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
         chrono = selectChronology(chrono);
         
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));
+            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
         int newPos = parser.parseInto(bucket, text, position);
         instant.setMillis(bucket.computeMillis(false, text));
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
diff --git a/src/test/java/org/joda/time/format/TestDateTimeFormatter.java b/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
index 0152ce706..5d104df27 100644
--- a/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
@@ -905,6 +905,62 @@ public void testParseInto_monthDay_feb29() {
         assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);
     }
 
+    public void testParseInto_monthDay_feb29_startOfYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, LONDON);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, LONDON), result);
+    }
+
+    public void testParseInto_monthDay_feb29_OfYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, LONDON);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, LONDON), result);
+    }
+
+    public void testParseInto_monthDay_feb29_newYork() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, NEWYORK);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, NEWYORK), result);
+    }
+
+    public void testParseInto_monthDay_feb29_newYork_startOfYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, NEWYORK);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, NEWYORK), result);
+    }
+
+    public void testParseInto_monthDay_feb29_newYork_endOfYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, NEWYORK);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, NEWYORK), result);
+    }
+
+    public void testParseInto_monthDay_feb29_tokyo() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, TOKYO);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, TOKYO), result);
+    }
+
+    public void testParseInto_monthDay_feb29_tokyo_startOfYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, TOKYO);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, TOKYO), result);
+    }
+
+    public void testParseInto_monthDay_feb29_tokyo_endOfYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, TOKYO);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, TOKYO), result);
+    }
+
     public void testParseInto_monthDay_withDefaultYear_feb29() {
         DateTimeFormatter f = DateTimeFormat.forPattern("M d").withDefaultYear(2012);
         MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);
@@ -912,6 +968,20 @@ public void testParseInto_monthDay_withDefaultYear_feb29() {
         assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);
     }
 
+    public void testParseInto_monthDay_withDefaultYear_feb29_newYork() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withDefaultYear(2012);
+        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, NEWYORK);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, NEWYORK), result);
+    }
+
+    public void testParseInto_monthDay_withDefaultYear_feb29_newYork_endOfYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withDefaultYear(2012);
+        MutableDateTime result = new MutableDateTime(2004, 12, 9, 12, 20, 30, 0, NEWYORK);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, NEWYORK), result);
+    }
+
     public void testParseMillis_fractionOfSecondLong() {
         DateTimeFormatter f = new DateTimeFormatterBuilder()
             .appendSecondOfDay(2).appendLiteral('.').appendFractionOfSecond(1, 9)

From 092311620409bf8b7f6923a47762c8ee0545b2ac Mon Sep 17 00:00:00 2001
From: Bram <bram.vandam@intix.eu>
Date: Fri, 26 Jul 2013 14:56:09 +0200
Subject: [PATCH 29/43] Reduce synchronization in LocalDateTime.toDate()

java.util.Date uses TimeZone.getDefaultRef() internally, mostly when
using deprecated constructors or deprecated field accessors.
TimeZone.getDefaultRef() is synchronized, concurrent calls to
LocalDateTime.toDate() can thus come with a costly
synchronization/blocking overhead.

This patch reduces the need to get the default time zone by adding a new
LocalDateTime.toDate(TimeZone zone) method, as well as by using a
java.util.Calendar in toDate()'s DST correction code.

These changes make it possible to convert LocalDateTime to
java.util.Date without any synchronization overhead.
---
 .../java/org/joda/time/LocalDateTime.java     | 102 ++++++++++++++----
 .../joda/time/TestLocalDateTime_Basics.java   |  86 +++++++++++++++
 2 files changed, 165 insertions(+), 23 deletions(-)

diff --git a/src/main/java/org/joda/time/LocalDateTime.java b/src/main/java/org/joda/time/LocalDateTime.java
index 7a988d7ce..fbfac0b27 100644
--- a/src/main/java/org/joda/time/LocalDateTime.java
+++ b/src/main/java/org/joda/time/LocalDateTime.java
@@ -788,29 +788,85 @@ public Date toDate() {
         Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom,
                         getHourOfDay(), getMinuteOfHour(), getSecondOfMinute());
         date.setTime(date.getTime() + getMillisOfSecond());
-        LocalDateTime check = LocalDateTime.fromDateFields(date);
-        if (check.isBefore(this)) {
-            // DST gap
-            // move forward in units of one minute until equal/after
-            while (check.isBefore(this)) {
-                date.setTime(date.getTime() + 60000);
-                check = LocalDateTime.fromDateFields(date);
-            }
-            // move back in units of one second until date wrong
-            while (check.isBefore(this) == false) {
-                date.setTime(date.getTime() - 1000);
-                check = LocalDateTime.fromDateFields(date);
-            }
-            date.setTime(date.getTime() + 1000);
-        } else if (check.equals(this)) {
-            // check for DST overlap
-            Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());
-            check = LocalDateTime.fromDateFields(earlier);
-            if (check.equals(this)) {
-                date = earlier;
-            }
-        }
-        return date;
+
+        return correctDstTransition(date, TimeZone.getDefault());
+    }
+
+    /**
+     * Get the date time as a <code>java.util.Date</code> using the specified time zone.
+     * <p>
+     * The <code>Date</code> object created has exactly the same fields as this
+     * date-time, except when the time would be invalid due to a daylight savings
+     * gap. In that case, the time will be set to the earliest valid time after the gap.
+     * <p>
+     * In the case of a daylight savings overlap, the earlier instant is selected.
+     * <p>
+     * Converting to a JDK Date is full of complications as the JDK Date constructor
+     * doesn't behave as you might expect around DST transitions. This method works
+     * by taking a first guess and then adjusting. This also handles the situation
+     * where the JDK time zone data differs from the Joda-Time time zone data.
+     * <p>
+     * Unlike {@link #toDate()}, this implementation does not rely on Java's synchronized
+     * time zone initialization logic, and should demonstrate better concurrent performance
+     * characteristics.
+     *
+     * @return a Date initialised with this date-time, never null
+     * @since 2.0
+     */
+    public Date toDate(final TimeZone timeZone) {
+	final Calendar calendar = Calendar.getInstance(timeZone);
+	calendar.clear();
+	calendar.set(getYear(), getMonthOfYear() - 1, getDayOfMonth(),
+		getHourOfDay(), getMinuteOfHour(), getSecondOfMinute());
+	Date date = calendar.getTime();
+	date.setTime(date.getTime() + getMillisOfSecond());
+
+	return correctDstTransition(date, timeZone);
+    }
+
+
+    /**
+     * Correct <code>date</code> in case of DST overlap.
+     * <p>
+     * The <code>Date</code> object created has exactly the same fields as this
+     * date-time, except when the time would be invalid due to a daylight savings
+     * gap. In that case, the time will be set to the earliest valid time after the gap.
+     * <p>
+     * In the case of a daylight savings overlap, the earlier instant is selected.
+     * <p>
+     * Converting to a JDK Date is full of complications as the JDK Date constructor
+     * doesn't behave as you might expect around DST transitions. This method works
+     * by taking a first guess and then adjusting. This also handles the situation
+     * where the JDK time zone data differs from the Joda-Time time zone data.
+     * @see #toDate()
+     */
+    private Date correctDstTransition(Date date, final TimeZone timeZone) {
+	Calendar calendar = Calendar.getInstance(timeZone);
+	calendar.setTime(date);
+	LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);
+	if (check.isBefore(this)) {
+	    // DST gap
+	    // move forward in units of one minute until equal/after
+	    while (check.isBefore(this)) {
+		calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);
+		check = LocalDateTime.fromCalendarFields(calendar);
+	    }
+	    // move back in units of one second until date wrong
+	    while (check.isBefore(this) == false) {
+		calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);
+		check = LocalDateTime.fromCalendarFields(calendar);
+	    }
+	    calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);
+	} else if (check.equals(this)) {
+	    // check for DST overlap
+	    final Calendar earlier = Calendar.getInstance(timeZone);
+	    earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());
+	    check = LocalDateTime.fromCalendarFields(earlier);
+	    if (check.equals(this)) {
+		calendar = earlier;
+	    }
+	}
+	return calendar.getTime();
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/test/java/org/joda/time/TestLocalDateTime_Basics.java b/src/test/java/org/joda/time/TestLocalDateTime_Basics.java
index 4c684957b..315a41244 100644
--- a/src/test/java/org/joda/time/TestLocalDateTime_Basics.java
+++ b/src/test/java/org/joda/time/TestLocalDateTime_Basics.java
@@ -907,6 +907,92 @@ public void testToDate_autumnDST() {
         }
     }
 
+    //-----------------------------------------------------------------------
+    public void testToDate_summer_Zone() {
+        LocalDateTime base = new LocalDateTime(2005, 7, 9, 10, 20, 30, 40, COPTIC_PARIS);
+        
+        Date test = base.toDate(TimeZone.getDefault());
+        check(base, 2005, 7, 9, 10, 20, 30, 40);
+        
+        GregorianCalendar gcal = new GregorianCalendar();
+        gcal.clear();
+        gcal.set(Calendar.YEAR, 2005);
+        gcal.set(Calendar.MONTH, Calendar.JULY);
+        gcal.set(Calendar.DAY_OF_MONTH, 9);
+        gcal.set(Calendar.HOUR_OF_DAY, 10);
+        gcal.set(Calendar.MINUTE, 20);
+        gcal.set(Calendar.SECOND, 30);
+        gcal.set(Calendar.MILLISECOND, 40);
+        assertEquals(gcal.getTime(), test);
+    }
+
+    public void testToDate_winter_Zone() {
+        LocalDateTime base = new LocalDateTime(2005, 1, 9, 10, 20, 30, 40, COPTIC_PARIS);
+        
+        Date test = base.toDate(TimeZone.getDefault());
+        check(base, 2005, 1, 9, 10, 20, 30, 40);
+        
+        GregorianCalendar gcal = new GregorianCalendar();
+        gcal.clear();
+        gcal.set(Calendar.YEAR, 2005);
+        gcal.set(Calendar.MONTH, Calendar.JANUARY);
+        gcal.set(Calendar.DAY_OF_MONTH, 9);
+        gcal.set(Calendar.HOUR_OF_DAY, 10);
+        gcal.set(Calendar.MINUTE, 20);
+        gcal.set(Calendar.SECOND, 30);
+        gcal.set(Calendar.MILLISECOND, 40);
+        assertEquals(gcal.getTime(), test);
+    }
+
+    public void testToDate_springDST_Zone() {
+        LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0);
+        
+        SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight",
+                Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);
+        TimeZone currentZone = TimeZone.getDefault();
+        try {
+            TimeZone.setDefault(testZone);
+            Date test = base.toDate(TimeZone.getDefault());
+            check(base, 2007, 4, 2, 0, 20, 0, 0);
+            assertEquals("Mon Apr 02 01:00:00 GMT+02:00 2007", test.toString());
+        } finally {
+            TimeZone.setDefault(currentZone);
+        }
+    }
+
+    public void testToDate_springDST_2Hour40Savings_Zone() {
+        LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0);
+        
+        SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight",
+                Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16);
+        TimeZone currentZone = TimeZone.getDefault();
+        try {
+            TimeZone.setDefault(testZone);
+            Date test = base.toDate(TimeZone.getDefault());
+            check(base, 2007, 4, 2, 0, 20, 0, 0);
+            assertEquals("Mon Apr 02 02:40:00 GMT+03:40 2007", test.toString());
+        } finally {
+            TimeZone.setDefault(currentZone);
+        }
+    }
+
+    public void testToDate_autumnDST_Zone() {
+        LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0);
+        
+        SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight",
+                Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);
+        TimeZone currentZone = TimeZone.getDefault();
+        try {
+            TimeZone.setDefault(testZone);
+            Date test = base.toDate(TimeZone.getDefault());
+            check(base, 2007, 10, 2, 0, 20, 30, 0);
+            assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString());
+        } finally {
+            TimeZone.setDefault(currentZone);
+        }
+    }
+    
+    
     //-----------------------------------------------------------------------
     public void testProperty() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC);

From 41528730761eb223a3a95b4d755223c763065a04 Mon Sep 17 00:00:00 2001
From: mjunginger <michi.junginger@googlemail.com>
Date: Thu, 1 Aug 2013 17:18:20 +0200
Subject: [PATCH 30/43] Update DateTimeFormat.java

Avoid memory leak through unbound HashMap
---
 .../org/joda/time/format/DateTimeFormat.java  | 77 +++++++++++++------
 1 file changed, 52 insertions(+), 25 deletions(-)

diff --git a/src/main/java/org/joda/time/format/DateTimeFormat.java b/src/main/java/org/joda/time/format/DateTimeFormat.java
index b2f93e40a..c6773f9db 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormat.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormat.java
@@ -20,6 +20,7 @@
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Locale;
 import java.util.Map;
 
@@ -142,11 +143,23 @@
     static final int TIME = 1;
     /** Type constant for DATETIME. */
     static final int DATETIME = 2;
+    
+    private static final int PATTERN_CACHE_SIZE = 500;
 
     /** Maps patterns to formatters, patterns don't vary by locale. */
-    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);
+    // Use a simple LRU Cache
+    private static final Map<String, DateTimeFormatter> PATTERN_CACHE = new LinkedHashMap<String, DateTimeFormatter>(7){
+        /** Introduced in 2.3 */
+		private static final long serialVersionUID = 23L;
+
+		@Override
+    	protected boolean removeEldestEntry(final Map.Entry<String,DateTimeFormatter> eldest) {
+    		return size() > PATTERN_CACHE_SIZE;
+    	};
+    };
+    
     /** Maps patterns to formatters, patterns don't vary by locale. */
-    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];
+    private static final DateTimeFormatter[] STYLE_CACHE = new DateTimeFormatter[25];
 
     //-----------------------------------------------------------------------
     /**
@@ -670,19 +683,19 @@ private static boolean isNumericToken(String token) {
      * @throws IllegalArgumentException if the pattern is invalid
      * @see #appendPatternTo
      */
-    private static DateTimeFormatter createFormatterForPattern(String pattern) {
+    private static DateTimeFormatter createFormatterForPattern(final String pattern) {
         if (pattern == null || pattern.length() == 0) {
             throw new IllegalArgumentException("Invalid pattern specification");
         }
         DateTimeFormatter formatter = null;
-        synchronized (cPatternedCache) {
-            formatter = cPatternedCache.get(pattern);
+        synchronized (PATTERN_CACHE) {
+            formatter = PATTERN_CACHE.get(pattern);
             if (formatter == null) {
-                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
+                final DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
                 parsePatternTo(builder, pattern);
                 formatter = builder.toFormatter();
 
-                cPatternedCache.put(pattern, formatter);
+                PATTERN_CACHE.put(pattern, formatter);
             }
         }
         return formatter;
@@ -716,25 +729,39 @@ private static DateTimeFormatter createFormatterForStyle(String style) {
      * @param timeStyle  the time style
      * @return the formatter
      */
-    private static DateTimeFormatter createFormatterForStyleIndex(int dateStyle, int timeStyle) {
-        int index = ((dateStyle << 2) + dateStyle) + timeStyle;
-        DateTimeFormatter f = null;
-        synchronized (cStyleCache) {
-            f = cStyleCache[index];
-            if (f == null) {
-                int type = DATETIME;
-                if (dateStyle == NONE) {
-                    type = TIME;
-                } else if (timeStyle == NONE) {
-                    type = DATE;
-                }
-                StyleFormatter llf = new StyleFormatter(
-                        dateStyle, timeStyle, type);
-                f = new DateTimeFormatter(llf, llf);
-                cStyleCache[index] = f;
-            }
+	private static DateTimeFormatter createFormatterForStyleIndex(final int dateStyle, final int timeStyle) {
+		final int index = ((dateStyle << 2) + dateStyle) + timeStyle;
+		// Should never happen but do a double check...
+		if (index >= STYLE_CACHE.length) {
+			return createDateTimeFormatter(dateStyle, timeStyle);
+		}
+		DateTimeFormatter f = null;
+		synchronized (STYLE_CACHE) {
+			f = STYLE_CACHE[index];
+			if (f == null) {
+				f = createDateTimeFormatter(dateStyle, timeStyle);
+				STYLE_CACHE[index] = f;
+			}
+		}
+		return f;
+	}
+    
+    /**
+     * Creates a formatter for the specified style.
+     * @param dateStyle  the date style
+     * @param timeStyle  the time style
+     * @return the formatter
+     */
+    private static DateTimeFormatter createDateTimeFormatter(final int dateStyle, final int timeStyle){
+    	int type = DATETIME;
+        if (dateStyle == NONE) {
+            type = TIME;
+        } else if (timeStyle == NONE) {
+            type = DATE;
         }
-        return f;
+        final StyleFormatter llf = new StyleFormatter(
+                dateStyle, timeStyle, type);
+        return new DateTimeFormatter(llf, llf);
     }
 
     /**

From 1516bade0148a8add828dc151e57f17e5fc9e247 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 7 Aug 2013 18:35:26 +0100
Subject: [PATCH 31/43] Maximum size for pattern cache

Fixes #49
---
 RELEASE-NOTES.txt                             |  3 +
 pom.xml                                       |  4 ++
 .../org/joda/time/format/DateTimeFormat.java  | 67 +++++++++----------
 3 files changed, 39 insertions(+), 35 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index a8e815c1d..458bca060 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -29,6 +29,9 @@ Enhancements since 2.2
   This will aid weird cases where deserialization or similar avoids the caches
   It will make no difference to most users
 
+- Maximum size for pattern cache [#49]
+  Sets a maximum size for the cache to avoid memory issues
+
 
 Compatibility with 2.2
 ----------------------
diff --git a/pom.xml b/pom.xml
index e6cc643c3..c7a855b35 100644
--- a/pom.xml
+++ b/pom.xml
@@ -84,6 +84,10 @@
     <contributor>
       <name>Sean Geoghegan</name>
     </contributor>
+    <contributor>
+      <name>mjunginger</name>
+      <url>https://github.com/mjunginger</url>
+    </contributor>
     <contributor>
       <name>Ashish Katyal</name>
     </contributor>
diff --git a/src/main/java/org/joda/time/format/DateTimeFormat.java b/src/main/java/org/joda/time/format/DateTimeFormat.java
index c6773f9db..79f979a40 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormat.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormat.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -143,21 +143,19 @@
     static final int TIME = 1;
     /** Type constant for DATETIME. */
     static final int DATETIME = 2;
-    
+
+    /** Maximum size of the pattern cache. */
     private static final int PATTERN_CACHE_SIZE = 500;
 
-    /** Maps patterns to formatters, patterns don't vary by locale. */
-    // Use a simple LRU Cache
-    private static final Map<String, DateTimeFormatter> PATTERN_CACHE = new LinkedHashMap<String, DateTimeFormatter>(7){
-        /** Introduced in 2.3 */
-		private static final long serialVersionUID = 23L;
-
-		@Override
-    	protected boolean removeEldestEntry(final Map.Entry<String,DateTimeFormatter> eldest) {
-    		return size() > PATTERN_CACHE_SIZE;
-    	};
+    /** Maps patterns to formatters via LRU, patterns don't vary by locale. */
+    private static final Map<String, DateTimeFormatter> PATTERN_CACHE = new LinkedHashMap<String, DateTimeFormatter>(7) {
+        private static final long serialVersionUID = 23L;
+        @Override
+        protected boolean removeEldestEntry(final Map.Entry<String, DateTimeFormatter> eldest) {
+            return size() > PATTERN_CACHE_SIZE;
+        };
     };
-    
+
     /** Maps patterns to formatters, patterns don't vary by locale. */
     private static final DateTimeFormatter[] STYLE_CACHE = new DateTimeFormatter[25];
 
@@ -683,7 +681,7 @@ private static boolean isNumericToken(String token) {
      * @throws IllegalArgumentException if the pattern is invalid
      * @see #appendPatternTo
      */
-    private static DateTimeFormatter createFormatterForPattern(final String pattern) {
+    private static DateTimeFormatter createFormatterForPattern(String pattern) {
         if (pattern == null || pattern.length() == 0) {
             throw new IllegalArgumentException("Invalid pattern specification");
         }
@@ -691,7 +689,7 @@ private static DateTimeFormatter createFormatterForPattern(final String pattern)
         synchronized (PATTERN_CACHE) {
             formatter = PATTERN_CACHE.get(pattern);
             if (formatter == null) {
-                final DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
+                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
                 parsePatternTo(builder, pattern);
                 formatter = builder.toFormatter();
 
@@ -729,22 +727,22 @@ private static DateTimeFormatter createFormatterForStyle(String style) {
      * @param timeStyle  the time style
      * @return the formatter
      */
-	private static DateTimeFormatter createFormatterForStyleIndex(final int dateStyle, final int timeStyle) {
-		final int index = ((dateStyle << 2) + dateStyle) + timeStyle;
-		// Should never happen but do a double check...
-		if (index >= STYLE_CACHE.length) {
-			return createDateTimeFormatter(dateStyle, timeStyle);
-		}
-		DateTimeFormatter f = null;
-		synchronized (STYLE_CACHE) {
-			f = STYLE_CACHE[index];
-			if (f == null) {
-				f = createDateTimeFormatter(dateStyle, timeStyle);
-				STYLE_CACHE[index] = f;
-			}
-		}
-		return f;
-	}
+    private static DateTimeFormatter createFormatterForStyleIndex(int dateStyle, int timeStyle) {
+        int index = ((dateStyle << 2) + dateStyle) + timeStyle;
+        // Should never happen but do a double check...
+        if (index >= STYLE_CACHE.length) {
+            return createDateTimeFormatter(dateStyle, timeStyle);
+        }
+        DateTimeFormatter f = null;
+        synchronized (STYLE_CACHE) {
+            f = STYLE_CACHE[index];
+            if (f == null) {
+                f = createDateTimeFormatter(dateStyle, timeStyle);
+                STYLE_CACHE[index] = f;
+            }
+        }
+        return f;
+    }
     
     /**
      * Creates a formatter for the specified style.
@@ -752,15 +750,14 @@ private static DateTimeFormatter createFormatterForStyleIndex(final int dateStyl
      * @param timeStyle  the time style
      * @return the formatter
      */
-    private static DateTimeFormatter createDateTimeFormatter(final int dateStyle, final int timeStyle){
-    	int type = DATETIME;
+    private static DateTimeFormatter createDateTimeFormatter(int dateStyle, int timeStyle){
+        int type = DATETIME;
         if (dateStyle == NONE) {
             type = TIME;
         } else if (timeStyle == NONE) {
             type = DATE;
         }
-        final StyleFormatter llf = new StyleFormatter(
-                dateStyle, timeStyle, type);
+        StyleFormatter llf = new StyleFormatter(dateStyle, timeStyle, type);
         return new DateTimeFormatter(llf, llf);
     }
 

From c384c385083468f2fcb7bd30f56a7952e31eaf9d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 7 Aug 2013 18:58:53 +0100
Subject: [PATCH 32/43] Add LocalDateTime.toDate(TimeZone)

Provides an alternate way to create a java.util.Date that avoids some synchronization
Fixes #48
---
 RELEASE-NOTES.txt                             |  3 +
 pom.xml                                       |  4 ++
 .../java/org/joda/time/LocalDateTime.java     | 71 +++++++++----------
 3 files changed, 41 insertions(+), 37 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 458bca060..7a3c11b71 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -32,6 +32,9 @@ Enhancements since 2.2
 - Maximum size for pattern cache [#49]
   Sets a maximum size for the cache to avoid memory issues
 
+- Add LocalDateTime.toDate(TimeZone) [#48]
+  Provides an alternate way to create a java.util.Date that avoids some synchronization
+
 
 Compatibility with 2.2
 ----------------------
diff --git a/pom.xml b/pom.xml
index c7a855b35..7e1c75c8e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -143,6 +143,10 @@
     <contributor>
       <name>Ricardo Trindade</name>
     </contributor>
+    <contributor>
+      <name>Bram Van Dam</name>
+      <url>https://github.com/codematters</url>
+    </contributor>
     <contributor>
       <name>Maxim Zhao</name>
     </contributor>
diff --git a/src/main/java/org/joda/time/LocalDateTime.java b/src/main/java/org/joda/time/LocalDateTime.java
index fbfac0b27..44d2ee9c0 100644
--- a/src/main/java/org/joda/time/LocalDateTime.java
+++ b/src/main/java/org/joda/time/LocalDateTime.java
@@ -788,7 +788,6 @@ public Date toDate() {
         Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom,
                         getHourOfDay(), getMinuteOfHour(), getSecondOfMinute());
         date.setTime(date.getTime() + getMillisOfSecond());
-
         return correctDstTransition(date, TimeZone.getDefault());
     }
 
@@ -811,20 +810,18 @@ public Date toDate() {
      * characteristics.
      *
      * @return a Date initialised with this date-time, never null
-     * @since 2.0
+     * @since 2.3
      */
     public Date toDate(final TimeZone timeZone) {
-	final Calendar calendar = Calendar.getInstance(timeZone);
-	calendar.clear();
-	calendar.set(getYear(), getMonthOfYear() - 1, getDayOfMonth(),
-		getHourOfDay(), getMinuteOfHour(), getSecondOfMinute());
-	Date date = calendar.getTime();
-	date.setTime(date.getTime() + getMillisOfSecond());
-
-	return correctDstTransition(date, timeZone);
+        final Calendar calendar = Calendar.getInstance(timeZone);
+        calendar.clear();
+        calendar.set(getYear(), getMonthOfYear() - 1, getDayOfMonth(),
+                    getHourOfDay(), getMinuteOfHour(), getSecondOfMinute());
+        Date date = calendar.getTime();
+        date.setTime(date.getTime() + getMillisOfSecond());
+        return correctDstTransition(date, timeZone);
     }
 
-
     /**
      * Correct <code>date</code> in case of DST overlap.
      * <p>
@@ -841,32 +838,32 @@ public Date toDate(final TimeZone timeZone) {
      * @see #toDate()
      */
     private Date correctDstTransition(Date date, final TimeZone timeZone) {
-	Calendar calendar = Calendar.getInstance(timeZone);
-	calendar.setTime(date);
-	LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);
-	if (check.isBefore(this)) {
-	    // DST gap
-	    // move forward in units of one minute until equal/after
-	    while (check.isBefore(this)) {
-		calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);
-		check = LocalDateTime.fromCalendarFields(calendar);
-	    }
-	    // move back in units of one second until date wrong
-	    while (check.isBefore(this) == false) {
-		calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);
-		check = LocalDateTime.fromCalendarFields(calendar);
-	    }
-	    calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);
-	} else if (check.equals(this)) {
-	    // check for DST overlap
-	    final Calendar earlier = Calendar.getInstance(timeZone);
-	    earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());
-	    check = LocalDateTime.fromCalendarFields(earlier);
-	    if (check.equals(this)) {
-		calendar = earlier;
-	    }
-	}
-	return calendar.getTime();
+        Calendar calendar = Calendar.getInstance(timeZone);
+        calendar.setTime(date);
+        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);
+        if (check.isBefore(this)) {
+            // DST gap
+            // move forward in units of one minute until equal/after
+            while (check.isBefore(this)) {
+                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);
+                check = LocalDateTime.fromCalendarFields(calendar);
+            }
+            // move back in units of one second until date wrong
+            while (check.isBefore(this) == false) {
+                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);
+                check = LocalDateTime.fromCalendarFields(calendar);
+            }
+            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);
+        } else if (check.equals(this)) {
+            // check for DST overlap
+            final Calendar earlier = Calendar.getInstance(timeZone);
+            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());
+            check = LocalDateTime.fromCalendarFields(earlier);
+            if (check.equals(this)) {
+                calendar = earlier;
+            }
+        }
+        return calendar.getTime();
     }
 
     //-----------------------------------------------------------------------

From 67778ce6f8a2d794ba876eaa95a3b5ddf720ac0b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 7 Aug 2013 19:48:48 +0100
Subject: [PATCH 33/43] Better thread-safety in ISODateTimeFormat

Fixes #45
---
 .../joda/time/format/ISODateTimeFormat.java   | 1407 ++++++++++-------
 1 file changed, 799 insertions(+), 608 deletions(-)

diff --git a/src/main/java/org/joda/time/format/ISODateTimeFormat.java b/src/main/java/org/joda/time/format/ISODateTimeFormat.java
index ecd1219e4..c849d16bc 100644
--- a/src/main/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/src/main/java/org/joda/time/format/ISODateTimeFormat.java
@@ -58,84 +58,6 @@
  */
 public class ISODateTimeFormat {
 
-    //-----------------------------------------------------------------------
-    private static DateTimeFormatter
-        ye,  // year element (yyyy)
-        mye, // monthOfYear element (-MM)
-        dme, // dayOfMonth element (-dd)
-        we,  // weekyear element (xxxx)
-        wwe, // weekOfWeekyear element (-ww)
-        dwe, // dayOfWeek element (-ee)
-        dye, // dayOfYear element (-DDD)
-        hde, // hourOfDay element (HH)
-        mhe, // minuteOfHour element (:mm)
-        sme, // secondOfMinute element (:ss)
-        fse, // fractionOfSecond element (.SSSSSSSSS)
-        ze,  // zone offset element
-        lte, // literal 'T' element
-        
-        //y,   // year (same as year element)
-        ym,  // year month
-        ymd, // year month day
-
-        //w,   // weekyear (same as weekyear element)
-        ww,  // weekyear week
-        wwd, // weekyear week day
-
-        //h,    // hour (same as hour element)
-        hm,   // hour minute
-        hms,  // hour minute second
-        hmsl, // hour minute second millis
-        hmsf, // hour minute second fraction
-
-        dh,    // date hour
-        dhm,   // date hour minute
-        dhms,  // date hour minute second
-        dhmsl, // date hour minute second millis
-        dhmsf, // date hour minute second fraction
-
-        //d,  // date (same as ymd)
-        t,  // time
-        tx,  // time no millis
-        tt,  // Ttime
-        ttx,  // Ttime no millis
-        dt, // date time
-        dtx, // date time no millis
-
-        //wd,  // week date (same as wwd)
-        wdt, // week date time
-        wdtx, // week date time no millis
-
-        od,  // ordinal date (same as yd)
-        odt, // ordinal date time
-        odtx, // ordinal date time no millis
-
-        bd,  // basic date
-        bt,  // basic time
-        btx,  // basic time no millis
-        btt, // basic Ttime
-        bttx, // basic Ttime no millis
-        bdt, // basic date time
-        bdtx, // basic date time no millis
-
-        bod,  // basic ordinal date
-        bodt, // basic ordinal date time
-        bodtx, // basic ordinal date time no millis
-
-        bwd,  // basic week date
-        bwdt, // basic week date time
-        bwdtx, // basic week date time no millis
-
-        dpe, // date parser element
-        tpe, // time parser element
-        dp,  // date parser
-        ldp, // local date parser
-        tp,  // time parser
-        ltp, // local time parser
-        dtp, // date time parser
-        dotp, // date optional time parser
-        ldotp; // local date optional time parser
-
     /**
      * Constructor.
      *
@@ -246,10 +168,10 @@ public static DateTimeFormatter forFields(
         } else if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {
             reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);
         } else if (workingFields.remove(DateTimeFieldType.year())) {
-            bld.append(yearElement());
+            bld.append(Constants.ye);
             reducedPrec = true;
         } else if (workingFields.remove(DateTimeFieldType.weekyear())) {
-            bld.append(weekyearElement());
+            bld.append(Constants.we);
             reducedPrec = true;
         }
         boolean datePresent = (workingFields.size() < inputSize);
@@ -292,7 +214,7 @@ private static boolean dateByMonth(
         
         boolean reducedPrec = false;
         if (fields.remove(DateTimeFieldType.year())) {
-            bld.append(yearElement());
+            bld.append(Constants.ye);
             if (fields.remove(DateTimeFieldType.monthOfYear())) {
                 if (fields.remove(DateTimeFieldType.dayOfMonth())) {
                     // YYYY-MM-DD/YYYYMMDD
@@ -360,7 +282,7 @@ private static boolean dateByOrdinal(
         
         boolean reducedPrec = false;
         if (fields.remove(DateTimeFieldType.year())) {
-            bld.append(yearElement());
+            bld.append(Constants.ye);
             if (fields.remove(DateTimeFieldType.dayOfYear())) {
                 // YYYY-DDD/YYYYDDD
                 appendSeparator(bld, extended);
@@ -397,7 +319,7 @@ private static boolean dateByWeek(
         
         boolean reducedPrec = false;
         if (fields.remove(DateTimeFieldType.weekyear())) {
-            bld.append(weekyearElement());
+            bld.append(Constants.we);
             if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {
                 appendSeparator(bld, extended);
                 bld.appendLiteral('W');
@@ -566,16 +488,7 @@ private static void appendSeparator(DateTimeFormatterBuilder bld, boolean extend
      * </pre>
      */
     public static DateTimeFormatter dateParser() {
-        if (dp == null) {
-            DateTimeParser tOffset = new DateTimeFormatterBuilder()
-                .appendLiteral('T')
-                .append(offsetElement()).toParser();
-            dp = new DateTimeFormatterBuilder()
-                .append(dateElementParser())
-                .appendOptional(tOffset)
-                .toFormatter();
-        }
-        return dp;
+        return Constants.dp;
     }
 
     /**
@@ -592,10 +505,7 @@ public static DateTimeFormatter dateParser() {
      * @since 1.3
      */
     public static DateTimeFormatter localDateParser() {
-        if (ldp == null) {
-            ldp = dateElementParser().withZoneUTC();
-        }
-        return ldp;
+        return Constants.ldp;
     }
 
     /**
@@ -610,30 +520,7 @@ public static DateTimeFormatter localDateParser() {
      * </pre>
      */
     public static DateTimeFormatter dateElementParser() {
-        if (dpe == null) {
-            dpe = new DateTimeFormatterBuilder()
-                .append(null, new DateTimeParser[] {
-                    new DateTimeFormatterBuilder()
-                    .append(yearElement())
-                    .appendOptional
-                    (new DateTimeFormatterBuilder()
-                     .append(monthElement())
-                     .appendOptional(dayOfMonthElement().getParser())
-                     .toParser())
-                    .toParser(),
-                    new DateTimeFormatterBuilder()
-                    .append(weekyearElement())
-                    .append(weekElement())
-                    .appendOptional(dayOfWeekElement().getParser())
-                    .toParser(),
-                    new DateTimeFormatterBuilder()
-                    .append(yearElement())
-                    .append(dayOfYearElement())
-                    .toParser()
-                })
-                .toFormatter();
-        }
-        return dpe;
+        return Constants.dpe;
     }
 
     /**
@@ -651,14 +538,7 @@ public static DateTimeFormatter dateElementParser() {
      * </pre>
      */
     public static DateTimeFormatter timeParser() {
-        if (tp == null) {
-            tp = new DateTimeFormatterBuilder()
-                .appendOptional(literalTElement().getParser())
-                .append(timeElementParser())
-                .appendOptional(offsetElement().getParser())
-                .toFormatter();
-        }
-        return tp;
+        return Constants.tp;
     }
 
     /**
@@ -677,13 +557,7 @@ public static DateTimeFormatter timeParser() {
      * @since 1.3
      */
     public static DateTimeFormatter localTimeParser() {
-        if (ltp == null) {
-            ltp = new DateTimeFormatterBuilder()
-                .appendOptional(literalTElement().getParser())
-                .append(timeElementParser())
-                .toFormatter().withZoneUTC();
-        }
-        return ltp;
+        return Constants.ltp;
     }
 
     /**
@@ -699,56 +573,7 @@ public static DateTimeFormatter localTimeParser() {
      * </pre>
      */
     public static DateTimeFormatter timeElementParser() {
-        if (tpe == null) {
-            // Decimal point can be either '.' or ','
-            DateTimeParser decimalPoint = new DateTimeFormatterBuilder()
-                .append(null, new DateTimeParser[] {
-                    new DateTimeFormatterBuilder()
-                    .appendLiteral('.')
-                    .toParser(),
-                    new DateTimeFormatterBuilder()
-                    .appendLiteral(',')
-                    .toParser()
-                })
-                .toParser();
-
-            tpe = new DateTimeFormatterBuilder()
-                // time-element
-                .append(hourElement())
-                .append
-                (null, new DateTimeParser[] {
-                    new DateTimeFormatterBuilder()
-                    // minute-element
-                    .append(minuteElement())
-                    .append
-                    (null, new DateTimeParser[] {
-                        new DateTimeFormatterBuilder()
-                        // second-element
-                        .append(secondElement())
-                        // second fraction
-                        .appendOptional(new DateTimeFormatterBuilder()
-                                        .append(decimalPoint)
-                                        .appendFractionOfSecond(1, 9)
-                                        .toParser())
-                        .toParser(),
-                        // minute fraction
-                        new DateTimeFormatterBuilder()
-                        .append(decimalPoint)
-                        .appendFractionOfMinute(1, 9)
-                        .toParser(),
-                        null
-                    })
-                    .toParser(),
-                    // hour fraction
-                    new DateTimeFormatterBuilder()
-                    .append(decimalPoint)
-                    .appendFractionOfHour(1, 9)
-                    .toParser(),
-                    null
-                })
-                .toFormatter();
-        }
-        return tpe;
+        return Constants.tpe;
     }
 
     /**
@@ -772,19 +597,7 @@ public static DateTimeFormatter timeElementParser() {
      * </pre>
      */
     public static DateTimeFormatter dateTimeParser() {
-        if (dtp == null) {
-            // This is different from the general time parser in that the 'T'
-            // is required.
-            DateTimeParser time = new DateTimeFormatterBuilder()
-                .appendLiteral('T')
-                .append(timeElementParser())
-                .appendOptional(offsetElement().getParser())
-                .toParser();
-            dtp = new DateTimeFormatterBuilder()
-                .append(null, new DateTimeParser[] {time, dateOptionalTimeParser().getParser()})
-                .toFormatter();
-        }
-        return dtp;
+        return Constants.dtp;
     }
 
     /**
@@ -807,18 +620,7 @@ public static DateTimeFormatter dateTimeParser() {
      * @since 1.3
      */
     public static DateTimeFormatter dateOptionalTimeParser() {
-        if (dotp == null) {
-            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()
-                .appendLiteral('T')
-                .appendOptional(timeElementParser().getParser())
-                .appendOptional(offsetElement().getParser())
-                .toParser();
-            dotp = new DateTimeFormatterBuilder()
-                .append(dateElementParser())
-                .appendOptional(timeOrOffset)
-                .toFormatter();
-        }
-        return dotp;
+        return Constants.dotp;
     }
 
     /**
@@ -842,17 +644,7 @@ public static DateTimeFormatter dateOptionalTimeParser() {
      * @since 1.3
      */
     public static DateTimeFormatter localDateOptionalTimeParser() {
-        if (ldotp == null) {
-            DateTimeParser time = new DateTimeFormatterBuilder()
-                .appendLiteral('T')
-                .append(timeElementParser())
-                .toParser();
-            ldotp = new DateTimeFormatterBuilder()
-                .append(dateElementParser())
-                .appendOptional(time)
-                .toFormatter().withZoneUTC();
-        }
-        return ldotp;
+        return Constants.ldotp;
     }
 
     //-----------------------------------------------------------------------
@@ -876,13 +668,7 @@ public static DateTimeFormatter date() {
      * @return a formatter for HH:mm:ss.SSSZZ
      */
     public static DateTimeFormatter time() {
-        if (t == null) {
-            t = new DateTimeFormatterBuilder()
-                .append(hourMinuteSecondFraction())
-                .append(offsetElement())
-                .toFormatter();
-        }
-        return t;
+        return Constants.t;
     }
 
     /**
@@ -894,13 +680,7 @@ public static DateTimeFormatter time() {
      * @return a formatter for HH:mm:ssZZ
      */
     public static DateTimeFormatter timeNoMillis() {
-        if (tx == null) {
-            tx = new DateTimeFormatterBuilder()
-                .append(hourMinuteSecond())
-                .append(offsetElement())
-                .toFormatter();
-        }
-        return tx;
+        return Constants.tx;
     }
 
     /**
@@ -913,13 +693,7 @@ public static DateTimeFormatter timeNoMillis() {
      * @return a formatter for 'T'HH:mm:ss.SSSZZ
      */
     public static DateTimeFormatter tTime() {
-        if (tt == null) {
-            tt = new DateTimeFormatterBuilder()
-                .append(literalTElement())
-                .append(time())
-                .toFormatter();
-        }
-        return tt;
+        return Constants.tt;
     }
 
     /**
@@ -932,13 +706,7 @@ public static DateTimeFormatter tTime() {
      * @return a formatter for 'T'HH:mm:ssZZ
      */
     public static DateTimeFormatter tTimeNoMillis() {
-        if (ttx == null) {
-            ttx = new DateTimeFormatterBuilder()
-                .append(literalTElement())
-                .append(timeNoMillis())
-                .toFormatter();
-        }
-        return ttx;
+        return Constants.ttx;
     }
 
     /**
@@ -950,13 +718,7 @@ public static DateTimeFormatter tTimeNoMillis() {
      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSSZZ
      */
     public static DateTimeFormatter dateTime() {
-        if (dt == null) {
-            dt = new DateTimeFormatterBuilder()
-                .append(date())
-                .append(tTime())
-                .toFormatter();
-        }
-        return dt;
+        return Constants.dt;
     }
 
     /**
@@ -968,13 +730,7 @@ public static DateTimeFormatter dateTime() {
      * @return a formatter for yyyy-MM-dd'T'HH:mm:ssZZ
      */
     public static DateTimeFormatter dateTimeNoMillis() {
-        if (dtx == null) {
-            dtx = new DateTimeFormatterBuilder()
-                .append(date())
-                .append(tTimeNoMillis())
-                .toFormatter();
-        }
-        return dtx;
+        return Constants.dtx;
     }
 
     /**
@@ -985,13 +741,7 @@ public static DateTimeFormatter dateTimeNoMillis() {
      * @since 1.1
      */
     public static DateTimeFormatter ordinalDate() {
-        if (od == null) {
-            od = new DateTimeFormatterBuilder()
-                .append(yearElement())
-                .append(dayOfYearElement())
-                .toFormatter();
-        }
-        return od;
+        return Constants.od;
     }
 
     /**
@@ -1004,13 +754,7 @@ public static DateTimeFormatter ordinalDate() {
      * @since 1.1
      */
     public static DateTimeFormatter ordinalDateTime() {
-        if (odt == null) {
-            odt = new DateTimeFormatterBuilder()
-                .append(ordinalDate())
-                .append(tTime())
-                .toFormatter();
-        }
-        return odt;
+        return Constants.odt;
     }
 
     /**
@@ -1023,13 +767,7 @@ public static DateTimeFormatter ordinalDateTime() {
      * @since 1.1
      */
     public static DateTimeFormatter ordinalDateTimeNoMillis() {
-        if (odtx == null) {
-            odtx = new DateTimeFormatterBuilder()
-                .append(ordinalDate())
-                .append(tTimeNoMillis())
-                .toFormatter();
-        }
-        return odtx;
+        return Constants.odtx;
     }
 
     /**
@@ -1039,7 +777,7 @@ public static DateTimeFormatter ordinalDateTimeNoMillis() {
      * @return a formatter for xxxx-'W'ww-e
      */
     public static DateTimeFormatter weekDate() {
-        return weekyearWeekDay();
+        return Constants.wwd;
     }
 
     /**
@@ -1051,13 +789,7 @@ public static DateTimeFormatter weekDate() {
      * @return a formatter for xxxx-'W'ww-e'T'HH:mm:ss.SSSZZ
      */
     public static DateTimeFormatter weekDateTime() {
-        if (wdt == null) {
-            wdt = new DateTimeFormatterBuilder()
-                .append(weekDate())
-                .append(tTime())
-                .toFormatter();
-        }
-        return wdt;
+        return Constants.wdt;
     }
 
     /**
@@ -1069,13 +801,7 @@ public static DateTimeFormatter weekDateTime() {
      * @return a formatter for xxxx-'W'ww-e'T'HH:mm:ssZZ
      */
     public static DateTimeFormatter weekDateTimeNoMillis() {
-        if (wdtx == null) {
-            wdtx = new DateTimeFormatterBuilder()
-                .append(weekDate())
-                .append(tTimeNoMillis())
-                .toFormatter();
-        }
-        return wdtx;
+        return Constants.wdtx;
     }
 
     //-----------------------------------------------------------------------
@@ -1086,14 +812,7 @@ public static DateTimeFormatter weekDateTimeNoMillis() {
      * @return a formatter for yyyyMMdd
      */
     public static DateTimeFormatter basicDate() {
-        if (bd == null) {
-            bd = new DateTimeFormatterBuilder()
-                .appendYear(4, 4)
-                .appendFixedDecimal(DateTimeFieldType.monthOfYear(), 2)
-                .appendFixedDecimal(DateTimeFieldType.dayOfMonth(), 2)
-                .toFormatter();
-        }
-        return bd;
+        return Constants.bd;
     }
 
     /**
@@ -1106,17 +825,7 @@ public static DateTimeFormatter basicDate() {
      * @return a formatter for HHmmss.SSSZ
      */
     public static DateTimeFormatter basicTime() {
-        if (bt == null) {
-            bt = new DateTimeFormatterBuilder()
-                .appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2)
-                .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)
-                .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)
-                .appendLiteral('.')
-                .appendFractionOfSecond(3, 9)
-                .appendTimeZoneOffset("Z", false, 2, 2)
-                .toFormatter();
-        }
-        return bt;
+        return Constants.bt;
     }
 
     /**
@@ -1128,15 +837,7 @@ public static DateTimeFormatter basicTime() {
      * @return a formatter for HHmmssZ
      */
     public static DateTimeFormatter basicTimeNoMillis() {
-        if (btx == null) {
-            btx = new DateTimeFormatterBuilder()
-                .appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2)
-                .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)
-                .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)
-                .appendTimeZoneOffset("Z", false, 2, 2)
-                .toFormatter();
-        }
-        return btx;
+        return Constants.btx;
     }
 
     /**
@@ -1149,13 +850,7 @@ public static DateTimeFormatter basicTimeNoMillis() {
      * @return a formatter for 'T'HHmmss.SSSZ
      */
     public static DateTimeFormatter basicTTime() {
-        if (btt == null) {
-            btt = new DateTimeFormatterBuilder()
-                .append(literalTElement())
-                .append(basicTime())
-                .toFormatter();
-        }
-        return btt;
+        return Constants.btt;
     }
 
     /**
@@ -1168,13 +863,7 @@ public static DateTimeFormatter basicTTime() {
      * @return a formatter for 'T'HHmmssZ
      */
     public static DateTimeFormatter basicTTimeNoMillis() {
-        if (bttx == null) {
-            bttx = new DateTimeFormatterBuilder()
-                .append(literalTElement())
-                .append(basicTimeNoMillis())
-                .toFormatter();
-        }
-        return bttx;
+        return Constants.bttx;
     }
 
     /**
@@ -1186,13 +875,7 @@ public static DateTimeFormatter basicTTimeNoMillis() {
      * @return a formatter for yyyyMMdd'T'HHmmss.SSSZ
      */
     public static DateTimeFormatter basicDateTime() {
-        if (bdt == null) {
-            bdt = new DateTimeFormatterBuilder()
-                .append(basicDate())
-                .append(basicTTime())
-                .toFormatter();
-        }
-        return bdt;
+        return Constants.bdt;
     }
 
     /**
@@ -1204,13 +887,7 @@ public static DateTimeFormatter basicDateTime() {
      * @return a formatter for yyyyMMdd'T'HHmmssZ
      */
     public static DateTimeFormatter basicDateTimeNoMillis() {
-        if (bdtx == null) {
-            bdtx = new DateTimeFormatterBuilder()
-                .append(basicDate())
-                .append(basicTTimeNoMillis())
-                .toFormatter();
-        }
-        return bdtx;
+        return Constants.bdtx;
     }
 
     /**
@@ -1221,13 +898,7 @@ public static DateTimeFormatter basicDateTimeNoMillis() {
      * @since 1.1
      */
     public static DateTimeFormatter basicOrdinalDate() {
-        if (bod == null) {
-            bod = new DateTimeFormatterBuilder()
-                .appendYear(4, 4)
-                .appendFixedDecimal(DateTimeFieldType.dayOfYear(), 3)
-                .toFormatter();
-        }
-        return bod;
+        return Constants.bod;
     }
 
     /**
@@ -1240,13 +911,7 @@ public static DateTimeFormatter basicOrdinalDate() {
      * @since 1.1
      */
     public static DateTimeFormatter basicOrdinalDateTime() {
-        if (bodt == null) {
-            bodt = new DateTimeFormatterBuilder()
-                .append(basicOrdinalDate())
-                .append(basicTTime())
-                .toFormatter();
-        }
-        return bodt;
+        return Constants.bodt;
     }
 
     /**
@@ -1259,13 +924,7 @@ public static DateTimeFormatter basicOrdinalDateTime() {
      * @since 1.1
      */
     public static DateTimeFormatter basicOrdinalDateTimeNoMillis() {
-        if (bodtx == null) {
-            bodtx = new DateTimeFormatterBuilder()
-                .append(basicOrdinalDate())
-                .append(basicTTimeNoMillis())
-                .toFormatter();
-        }
-        return bodtx;
+        return Constants.bodtx;
     }
 
     /**
@@ -1275,15 +934,7 @@ public static DateTimeFormatter basicOrdinalDateTimeNoMillis() {
      * @return a formatter for xxxx'W'wwe
      */
     public static DateTimeFormatter basicWeekDate() {
-        if (bwd == null) {
-            bwd = new DateTimeFormatterBuilder()
-                .appendWeekyear(4, 4)
-                .appendLiteral('W')
-                .appendFixedDecimal(DateTimeFieldType.weekOfWeekyear(), 2)
-                .appendFixedDecimal(DateTimeFieldType.dayOfWeek(), 1)
-                .toFormatter();
-        }
-        return bwd;
+        return Constants.bwd;
     }
 
     /**
@@ -1295,13 +946,7 @@ public static DateTimeFormatter basicWeekDate() {
      * @return a formatter for xxxx'W'wwe'T'HHmmss.SSSZ
      */
     public static DateTimeFormatter basicWeekDateTime() {
-        if (bwdt == null) {
-            bwdt = new DateTimeFormatterBuilder()
-                .append(basicWeekDate())
-                .append(basicTTime())
-                .toFormatter();
-        }
-        return bwdt;
+        return Constants.bwdt;
     }
 
     /**
@@ -1313,13 +958,7 @@ public static DateTimeFormatter basicWeekDateTime() {
      * @return a formatter for xxxx'W'wwe'T'HHmmssZ
      */
     public static DateTimeFormatter basicWeekDateTimeNoMillis() {
-        if (bwdtx == null) {
-            bwdtx = new DateTimeFormatterBuilder()
-                .append(basicWeekDate())
-                .append(basicTTimeNoMillis())
-                .toFormatter();
-        }
-        return bwdtx;
+        return Constants.bwdtx;
     }
 
     //-----------------------------------------------------------------------
@@ -1329,7 +968,7 @@ public static DateTimeFormatter basicWeekDateTimeNoMillis() {
      * @return a formatter for yyyy
      */
     public static DateTimeFormatter year() {
-        return yearElement();
+        return Constants.ye;
     }
 
     /**
@@ -1339,13 +978,7 @@ public static DateTimeFormatter year() {
      * @return a formatter for yyyy-MM
      */
     public static DateTimeFormatter yearMonth() {
-        if (ym == null) {
-            ym = new DateTimeFormatterBuilder()
-                .append(yearElement())
-                .append(monthElement())
-                .toFormatter();
-        }
-        return ym;
+        return Constants.ym;
     }
 
     /**
@@ -1355,14 +988,7 @@ public static DateTimeFormatter yearMonth() {
      * @return a formatter for yyyy-MM-dd
      */
     public static DateTimeFormatter yearMonthDay() {
-        if (ymd == null) {
-            ymd = new DateTimeFormatterBuilder()
-                .append(yearElement())
-                .append(monthElement())
-                .append(dayOfMonthElement())
-                .toFormatter();
-        }
-        return ymd;
+        return Constants.ymd;
     }
 
     /**
@@ -1371,7 +997,7 @@ public static DateTimeFormatter yearMonthDay() {
      * @return a formatter for xxxx
      */
     public static DateTimeFormatter weekyear() {
-        return weekyearElement();
+        return Constants.we;
     }
 
     /**
@@ -1381,13 +1007,7 @@ public static DateTimeFormatter weekyear() {
      * @return a formatter for xxxx-'W'ww
      */
     public static DateTimeFormatter weekyearWeek() {
-        if (ww == null) {
-            ww = new DateTimeFormatterBuilder()
-                .append(weekyearElement())
-                .append(weekElement())
-                .toFormatter();
-        }
-        return ww;
+        return Constants.ww;
     }
 
     /**
@@ -1397,14 +1017,7 @@ public static DateTimeFormatter weekyearWeek() {
      * @return a formatter for xxxx-'W'ww-e
      */
     public static DateTimeFormatter weekyearWeekDay() {
-        if (wwd == null) {
-            wwd = new DateTimeFormatterBuilder()
-                .append(weekyearElement())
-                .append(weekElement())
-                .append(dayOfWeekElement())
-                .toFormatter();
-        }
-        return wwd;
+        return Constants.wwd;
     }
 
     /**
@@ -1413,7 +1026,7 @@ public static DateTimeFormatter weekyearWeekDay() {
      * @return a formatter for HH
      */
     public static DateTimeFormatter hour() {
-        return hourElement();
+        return Constants.hde;
     }
 
     /**
@@ -1423,13 +1036,7 @@ public static DateTimeFormatter hour() {
      * @return a formatter for HH:mm
      */
     public static DateTimeFormatter hourMinute() {
-        if (hm == null) {
-            hm = new DateTimeFormatterBuilder()
-                .append(hourElement())
-                .append(minuteElement())
-                .toFormatter();
-        }
-        return hm;
+        return Constants.hm;
     }
 
     /**
@@ -1439,14 +1046,7 @@ public static DateTimeFormatter hourMinute() {
      * @return a formatter for HH:mm:ss
      */
     public static DateTimeFormatter hourMinuteSecond() {
-        if (hms == null) {
-            hms = new DateTimeFormatterBuilder()
-                .append(hourElement())
-                .append(minuteElement())
-                .append(secondElement())
-                .toFormatter();
-        }
-        return hms;
+        return Constants.hms;
     }
 
     /**
@@ -1458,16 +1058,7 @@ public static DateTimeFormatter hourMinuteSecond() {
      * @return a formatter for HH:mm:ss.SSS
      */
     public static DateTimeFormatter hourMinuteSecondMillis() {
-        if (hmsl == null) {
-            hmsl = new DateTimeFormatterBuilder()
-                .append(hourElement())
-                .append(minuteElement())
-                .append(secondElement())
-                .appendLiteral('.')
-                .appendFractionOfSecond(3, 3)
-                .toFormatter();
-        }
-        return hmsl;
+        return Constants.hmsl;
     }
 
     /**
@@ -1479,15 +1070,7 @@ public static DateTimeFormatter hourMinuteSecondMillis() {
      * @return a formatter for HH:mm:ss.SSS
      */
     public static DateTimeFormatter hourMinuteSecondFraction() {
-        if (hmsf == null) {
-            hmsf = new DateTimeFormatterBuilder()
-                .append(hourElement())
-                .append(minuteElement())
-                .append(secondElement())
-                .append(fractionElement())
-                .toFormatter();
-        }
-        return hmsf;
+        return Constants.hmsf;
     }
 
     /**
@@ -1497,14 +1080,7 @@ public static DateTimeFormatter hourMinuteSecondFraction() {
      * @return a formatter for yyyy-MM-dd'T'HH
      */
     public static DateTimeFormatter dateHour() {
-        if (dh == null) {
-            dh = new DateTimeFormatterBuilder()
-                .append(date())
-                .append(literalTElement())
-                .append(hour())
-                .toFormatter();
-        }
-        return dh;
+        return Constants.dh;
     }
 
     /**
@@ -1514,14 +1090,7 @@ public static DateTimeFormatter dateHour() {
      * @return a formatter for yyyy-MM-dd'T'HH:mm
      */
     public static DateTimeFormatter dateHourMinute() {
-        if (dhm == null) {
-            dhm = new DateTimeFormatterBuilder()
-                .append(date())
-                .append(literalTElement())
-                .append(hourMinute())
-                .toFormatter();
-        }
-        return dhm;
+        return Constants.dhm;
     }
 
     /**
@@ -1532,14 +1101,7 @@ public static DateTimeFormatter dateHourMinute() {
      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss
      */
     public static DateTimeFormatter dateHourMinuteSecond() {
-        if (dhms == null) {
-            dhms = new DateTimeFormatterBuilder()
-                .append(date())
-                .append(literalTElement())
-                .append(hourMinuteSecond())
-                .toFormatter();
-        }
-        return dhms;
+        return Constants.dhms;
     }
 
     /**
@@ -1551,14 +1113,7 @@ public static DateTimeFormatter dateHourMinuteSecond() {
      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS
      */
     public static DateTimeFormatter dateHourMinuteSecondMillis() {
-        if (dhmsl == null) {
-            dhmsl = new DateTimeFormatterBuilder()
-                .append(date())
-                .append(literalTElement())
-                .append(hourMinuteSecondMillis())
-                .toFormatter();
-        }
-        return dhmsl;
+        return Constants.dhmsl;
     }
 
     /**
@@ -1570,142 +1125,778 @@ public static DateTimeFormatter dateHourMinuteSecondMillis() {
      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS
      */
     public static DateTimeFormatter dateHourMinuteSecondFraction() {
-        if (dhmsf == null) {
-            dhmsf = new DateTimeFormatterBuilder()
-                .append(date())
-                .append(literalTElement())
-                .append(hourMinuteSecondFraction())
-                .toFormatter();
-        }
-        return dhmsf;
+        return Constants.dhmsf;
     }
 
     //-----------------------------------------------------------------------
-    private static DateTimeFormatter yearElement() {
-        if (ye == null) {
-            ye = new DateTimeFormatterBuilder()
-                .appendYear(4, 9)
-                .toFormatter();
+    static final class Constants {
+        private static final DateTimeFormatter
+            ye = yearElement(),  // year element (yyyy)
+            mye = monthElement(), // monthOfYear element (-MM)
+            dme = dayOfMonthElement(), // dayOfMonth element (-dd)
+            we = weekyearElement(),  // weekyear element (xxxx)
+            wwe = weekElement(), // weekOfWeekyear element (-ww)
+            dwe = dayOfWeekElement(), // dayOfWeek element (-ee)
+            dye = dayOfYearElement(), // dayOfYear element (-DDD)
+            hde = hourElement(), // hourOfDay element (HH)
+            mhe = minuteElement(), // minuteOfHour element (:mm)
+            sme = secondElement(), // secondOfMinute element (:ss)
+            fse = fractionElement(), // fractionOfSecond element (.SSSSSSSSS)
+            ze = offsetElement(),  // zone offset element
+            lte = literalTElement(), // literal 'T' element
+            
+            //y,   // year (same as year element)
+            ym = yearMonth(),  // year month
+            ymd = yearMonthDay(), // year month day
+
+            //w,   // weekyear (same as weekyear element)
+            ww = weekyearWeek(),  // weekyear week
+            wwd = weekyearWeekDay(), // weekyear week day
+
+            //h,    // hour (same as hour element)
+            hm = hourMinute(),   // hour minute
+            hms = hourMinuteSecond(),  // hour minute second
+            hmsl = hourMinuteSecondMillis(), // hour minute second millis
+            hmsf = hourMinuteSecondFraction(), // hour minute second fraction
+
+            dh = dateHour(),    // date hour
+            dhm = dateHourMinute(),   // date hour minute
+            dhms = dateHourMinuteSecond(),  // date hour minute second
+            dhmsl = dateHourMinuteSecondMillis(), // date hour minute second millis
+            dhmsf = dateHourMinuteSecondFraction(), // date hour minute second fraction
+
+            //d,  // date (same as ymd)
+            t = time(),  // time
+            tx = timeNoMillis(),  // time no millis
+            tt = tTime(),  // Ttime
+            ttx = tTimeNoMillis(),  // Ttime no millis
+            dt = dateTime(), // date time
+            dtx = dateTimeNoMillis(), // date time no millis
+
+            //wd,  // week date (same as wwd)
+            wdt = weekDateTime(), // week date time
+            wdtx = weekDateTimeNoMillis(), // week date time no millis
+
+            od = ordinalDate(),  // ordinal date (same as yd)
+            odt = ordinalDateTime(), // ordinal date time
+            odtx = ordinalDateTimeNoMillis(), // ordinal date time no millis
+
+            bd = basicDate(),  // basic date
+            bt = basicTime(),  // basic time
+            btx = basicTimeNoMillis(),  // basic time no millis
+            btt = basicTTime(), // basic Ttime
+            bttx = basicTTimeNoMillis(), // basic Ttime no millis
+            bdt = basicDateTime(), // basic date time
+            bdtx = basicDateTimeNoMillis(), // basic date time no millis
+
+            bod = basicOrdinalDate(),  // basic ordinal date
+            bodt = basicOrdinalDateTime(), // basic ordinal date time
+            bodtx = basicOrdinalDateTimeNoMillis(), // basic ordinal date time no millis
+
+            bwd = basicWeekDate(),  // basic week date
+            bwdt = basicWeekDateTime(), // basic week date time
+            bwdtx = basicWeekDateTimeNoMillis(), // basic week date time no millis
+
+            dpe = dateElementParser(), // date parser element
+            tpe = timeElementParser(), // time parser element
+            dp = dateParser(),  // date parser
+            ldp = localDateParser(), // local date parser
+            tp = timeParser(),  // time parser
+            ltp = localTimeParser(), // local time parser
+            dtp = dateTimeParser(), // date time parser
+            dotp = dateOptionalTimeParser(), // date optional time parser
+            ldotp = localDateOptionalTimeParser(); // local date optional time parser
+
+        //-----------------------------------------------------------------------
+        private static DateTimeFormatter dateParser() {
+            if (dp == null) {
+                DateTimeParser tOffset = new DateTimeFormatterBuilder()
+                    .appendLiteral('T')
+                    .append(offsetElement()).toParser();
+                return new DateTimeFormatterBuilder()
+                    .append(dateElementParser())
+                    .appendOptional(tOffset)
+                    .toFormatter();
+            }
+            return dp;
         }
-        return ye;
-    }
 
-    private static DateTimeFormatter monthElement() {
-        if (mye == null) {
-            mye = new DateTimeFormatterBuilder()
-                .appendLiteral('-')
-                .appendMonthOfYear(2)
-                .toFormatter();
+        private static DateTimeFormatter localDateParser() {
+            if (ldp == null) {
+                return dateElementParser().withZoneUTC();
+            }
+            return ldp;
         }
-        return mye;
-    }
 
-    private static DateTimeFormatter dayOfMonthElement() {
-        if (dme == null) {
-            dme = new DateTimeFormatterBuilder()
-                .appendLiteral('-')
-                .appendDayOfMonth(2)
-                .toFormatter();
+        private static DateTimeFormatter dateElementParser() {
+            if (dpe == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(null, new DateTimeParser[] {
+                        new DateTimeFormatterBuilder()
+                        .append(yearElement())
+                        .appendOptional
+                        (new DateTimeFormatterBuilder()
+                         .append(monthElement())
+                         .appendOptional(dayOfMonthElement().getParser())
+                         .toParser())
+                        .toParser(),
+                        new DateTimeFormatterBuilder()
+                        .append(weekyearElement())
+                        .append(weekElement())
+                        .appendOptional(dayOfWeekElement().getParser())
+                        .toParser(),
+                        new DateTimeFormatterBuilder()
+                        .append(yearElement())
+                        .append(dayOfYearElement())
+                        .toParser()
+                    })
+                    .toFormatter();
+            }
+            return dpe;
         }
-        return dme;
-    }
 
-    private static DateTimeFormatter weekyearElement() {
-        if (we == null) {
-            we = new DateTimeFormatterBuilder()
-                .appendWeekyear(4, 9)
-                .toFormatter();
+        private static DateTimeFormatter timeParser() {
+            if (tp == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendOptional(literalTElement().getParser())
+                    .append(timeElementParser())
+                    .appendOptional(offsetElement().getParser())
+                    .toFormatter();
+            }
+            return tp;
         }
-        return we;
-    }
 
-    private static DateTimeFormatter weekElement() {
-        if (wwe == null) {
-            wwe = new DateTimeFormatterBuilder()
-                .appendLiteral("-W")
-                .appendWeekOfWeekyear(2)
-                .toFormatter();
+        private static DateTimeFormatter localTimeParser() {
+            if (ltp == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendOptional(literalTElement().getParser())
+                    .append(timeElementParser())
+                    .toFormatter().withZoneUTC();
+            }
+            return ltp;
         }
-        return wwe;
-    }
 
-    private static DateTimeFormatter dayOfWeekElement() {
-        if (dwe == null) {
-            dwe = new DateTimeFormatterBuilder()
-                .appendLiteral('-')
-                .appendDayOfWeek(1)
-                .toFormatter();
+        private static DateTimeFormatter timeElementParser() {
+            if (tpe == null) {
+                // Decimal point can be either '.' or ','
+                DateTimeParser decimalPoint = new DateTimeFormatterBuilder()
+                    .append(null, new DateTimeParser[] {
+                        new DateTimeFormatterBuilder()
+                        .appendLiteral('.')
+                        .toParser(),
+                        new DateTimeFormatterBuilder()
+                        .appendLiteral(',')
+                        .toParser()
+                    })
+                    .toParser();
+
+                return new DateTimeFormatterBuilder()
+                    // time-element
+                    .append(hourElement())
+                    .append
+                    (null, new DateTimeParser[] {
+                        new DateTimeFormatterBuilder()
+                        // minute-element
+                        .append(minuteElement())
+                        .append
+                        (null, new DateTimeParser[] {
+                            new DateTimeFormatterBuilder()
+                            // second-element
+                            .append(secondElement())
+                            // second fraction
+                            .appendOptional(new DateTimeFormatterBuilder()
+                                            .append(decimalPoint)
+                                            .appendFractionOfSecond(1, 9)
+                                            .toParser())
+                            .toParser(),
+                            // minute fraction
+                            new DateTimeFormatterBuilder()
+                            .append(decimalPoint)
+                            .appendFractionOfMinute(1, 9)
+                            .toParser(),
+                            null
+                        })
+                        .toParser(),
+                        // hour fraction
+                        new DateTimeFormatterBuilder()
+                        .append(decimalPoint)
+                        .appendFractionOfHour(1, 9)
+                        .toParser(),
+                        null
+                    })
+                    .toFormatter();
+            }
+            return tpe;
+        }
+
+        private static DateTimeFormatter dateTimeParser() {
+            if (dtp == null) {
+                // This is different from the general time parser in that the 'T'
+                // is required.
+                DateTimeParser time = new DateTimeFormatterBuilder()
+                    .appendLiteral('T')
+                    .append(timeElementParser())
+                    .appendOptional(offsetElement().getParser())
+                    .toParser();
+                return new DateTimeFormatterBuilder()
+                    .append(null, new DateTimeParser[] {time, dateOptionalTimeParser().getParser()})
+                    .toFormatter();
+            }
+            return dtp;
+        }
+
+        private static DateTimeFormatter dateOptionalTimeParser() {
+            if (dotp == null) {
+                DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()
+                    .appendLiteral('T')
+                    .appendOptional(timeElementParser().getParser())
+                    .appendOptional(offsetElement().getParser())
+                    .toParser();
+                return new DateTimeFormatterBuilder()
+                    .append(dateElementParser())
+                    .appendOptional(timeOrOffset)
+                    .toFormatter();
+            }
+            return dotp;
+        }
+
+        private static DateTimeFormatter localDateOptionalTimeParser() {
+            if (ldotp == null) {
+                DateTimeParser time = new DateTimeFormatterBuilder()
+                    .appendLiteral('T')
+                    .append(timeElementParser())
+                    .toParser();
+                return new DateTimeFormatterBuilder()
+                    .append(dateElementParser())
+                    .appendOptional(time)
+                    .toFormatter().withZoneUTC();
+            }
+            return ldotp;
         }
-        return dwe;
-    }
 
-    private static DateTimeFormatter dayOfYearElement() {
-        if (dye == null) {
-            dye = new DateTimeFormatterBuilder()
-                .appendLiteral('-')
-                .appendDayOfYear(3)
-                .toFormatter();
+        //-----------------------------------------------------------------------
+        private static DateTimeFormatter time() {
+            if (t == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(hourMinuteSecondFraction())
+                    .append(offsetElement())
+                    .toFormatter();
+            }
+            return t;
         }
-        return dye;
-    }
-    
-    private static DateTimeFormatter literalTElement() {
-        if (lte == null) {
-            lte = new DateTimeFormatterBuilder()
-                .appendLiteral('T')
-                .toFormatter();
+
+        private static DateTimeFormatter timeNoMillis() {
+            if (tx == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(hourMinuteSecond())
+                    .append(offsetElement())
+                    .toFormatter();
+            }
+            return tx;
         }
-        return lte;
-    }
 
-    private static DateTimeFormatter hourElement() {
-        if (hde == null) {
-            hde = new DateTimeFormatterBuilder()
-                .appendHourOfDay(2)
-                .toFormatter();
+        private static DateTimeFormatter tTime() {
+            if (tt == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(literalTElement())
+                    .append(time())
+                    .toFormatter();
+            }
+            return tt;
         }
-        return hde;
-    }
 
-    private static DateTimeFormatter minuteElement() {
-        if (mhe == null) {
-            mhe = new DateTimeFormatterBuilder()
-                .appendLiteral(':')
-                .appendMinuteOfHour(2)
-                .toFormatter();
+        private static DateTimeFormatter tTimeNoMillis() {
+            if (ttx == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(literalTElement())
+                    .append(timeNoMillis())
+                    .toFormatter();
+            }
+            return ttx;
         }
-        return mhe;
-    }
 
-    private static DateTimeFormatter secondElement() {
-        if (sme == null) {
-            sme = new DateTimeFormatterBuilder()
-                .appendLiteral(':')
-                .appendSecondOfMinute(2)
-                .toFormatter();
+        private static DateTimeFormatter dateTime() {
+            if (dt == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(date())
+                    .append(tTime())
+                    .toFormatter();
+            }
+            return dt;
         }
-        return sme;
-    }
 
-    private static DateTimeFormatter fractionElement() {
-        if (fse == null) {
-            fse = new DateTimeFormatterBuilder()
-                .appendLiteral('.')
-                // Support parsing up to nanosecond precision even though
-                // those extra digits will be dropped.
-                .appendFractionOfSecond(3, 9)
-                .toFormatter();
+        private static DateTimeFormatter dateTimeNoMillis() {
+            if (dtx == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(date())
+                    .append(tTimeNoMillis())
+                    .toFormatter();
+            }
+            return dtx;
+        }
+
+        private static DateTimeFormatter ordinalDate() {
+            if (od == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(yearElement())
+                    .append(dayOfYearElement())
+                    .toFormatter();
+            }
+            return od;
+        }
+
+        private static DateTimeFormatter ordinalDateTime() {
+            if (odt == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(ordinalDate())
+                    .append(tTime())
+                    .toFormatter();
+            }
+            return odt;
+        }
+
+        private static DateTimeFormatter ordinalDateTimeNoMillis() {
+            if (odtx == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(ordinalDate())
+                    .append(tTimeNoMillis())
+                    .toFormatter();
+            }
+            return odtx;
         }
-        return fse;
-    }
 
-    private static DateTimeFormatter offsetElement() {
-        if (ze == null) {
-            ze = new DateTimeFormatterBuilder()
-                .appendTimeZoneOffset("Z", true, 2, 4)
-                .toFormatter();
+        private static DateTimeFormatter weekDateTime() {
+            if (wdt == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(weekDate())
+                    .append(tTime())
+                    .toFormatter();
+            }
+            return wdt;
+        }
+
+        private static DateTimeFormatter weekDateTimeNoMillis() {
+            if (wdtx == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(weekDate())
+                    .append(tTimeNoMillis())
+                    .toFormatter();
+            }
+            return wdtx;
         }
-        return ze;
+
+        //-----------------------------------------------------------------------
+        private static DateTimeFormatter basicDate() {
+            if (bd == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendYear(4, 4)
+                    .appendFixedDecimal(DateTimeFieldType.monthOfYear(), 2)
+                    .appendFixedDecimal(DateTimeFieldType.dayOfMonth(), 2)
+                    .toFormatter();
+            }
+            return bd;
+        }
+
+        private static DateTimeFormatter basicTime() {
+            if (bt == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2)
+                    .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)
+                    .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)
+                    .appendLiteral('.')
+                    .appendFractionOfSecond(3, 9)
+                    .appendTimeZoneOffset("Z", false, 2, 2)
+                    .toFormatter();
+            }
+            return bt;
+        }
+
+        private static DateTimeFormatter basicTimeNoMillis() {
+            if (btx == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2)
+                    .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)
+                    .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)
+                    .appendTimeZoneOffset("Z", false, 2, 2)
+                    .toFormatter();
+            }
+            return btx;
+        }
+
+        private static DateTimeFormatter basicTTime() {
+            if (btt == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(literalTElement())
+                    .append(basicTime())
+                    .toFormatter();
+            }
+            return btt;
+        }
+
+        private static DateTimeFormatter basicTTimeNoMillis() {
+            if (bttx == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(literalTElement())
+                    .append(basicTimeNoMillis())
+                    .toFormatter();
+            }
+            return bttx;
+        }
+
+        private static DateTimeFormatter basicDateTime() {
+            if (bdt == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(basicDate())
+                    .append(basicTTime())
+                    .toFormatter();
+            }
+            return bdt;
+        }
+
+        private static DateTimeFormatter basicDateTimeNoMillis() {
+            if (bdtx == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(basicDate())
+                    .append(basicTTimeNoMillis())
+                    .toFormatter();
+            }
+            return bdtx;
+        }
+
+        private static DateTimeFormatter basicOrdinalDate() {
+            if (bod == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendYear(4, 4)
+                    .appendFixedDecimal(DateTimeFieldType.dayOfYear(), 3)
+                    .toFormatter();
+            }
+            return bod;
+        }
+
+        private static DateTimeFormatter basicOrdinalDateTime() {
+            if (bodt == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(basicOrdinalDate())
+                    .append(basicTTime())
+                    .toFormatter();
+            }
+            return bodt;
+        }
+
+        private static DateTimeFormatter basicOrdinalDateTimeNoMillis() {
+            if (bodtx == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(basicOrdinalDate())
+                    .append(basicTTimeNoMillis())
+                    .toFormatter();
+            }
+            return bodtx;
+        }
+
+        private static DateTimeFormatter basicWeekDate() {
+            if (bwd == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendWeekyear(4, 4)
+                    .appendLiteral('W')
+                    .appendFixedDecimal(DateTimeFieldType.weekOfWeekyear(), 2)
+                    .appendFixedDecimal(DateTimeFieldType.dayOfWeek(), 1)
+                    .toFormatter();
+            }
+            return bwd;
+        }
+
+        private static DateTimeFormatter basicWeekDateTime() {
+            if (bwdt == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(basicWeekDate())
+                    .append(basicTTime())
+                    .toFormatter();
+            }
+            return bwdt;
+        }
+
+        private static DateTimeFormatter basicWeekDateTimeNoMillis() {
+            if (bwdtx == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(basicWeekDate())
+                    .append(basicTTimeNoMillis())
+                    .toFormatter();
+            }
+            return bwdtx;
+        }
+
+        //-----------------------------------------------------------------------
+        private static DateTimeFormatter yearMonth() {
+            if (ym == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(yearElement())
+                    .append(monthElement())
+                    .toFormatter();
+            }
+            return ym;
+        }
+
+        private static DateTimeFormatter yearMonthDay() {
+            if (ymd == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(yearElement())
+                    .append(monthElement())
+                    .append(dayOfMonthElement())
+                    .toFormatter();
+            }
+            return ymd;
+        }
+
+        private static DateTimeFormatter weekyearWeek() {
+            if (ww == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(weekyearElement())
+                    .append(weekElement())
+                    .toFormatter();
+            }
+            return ww;
+        }
+
+        private static DateTimeFormatter weekyearWeekDay() {
+            if (wwd == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(weekyearElement())
+                    .append(weekElement())
+                    .append(dayOfWeekElement())
+                    .toFormatter();
+            }
+            return wwd;
+        }
+
+        private static DateTimeFormatter hourMinute() {
+            if (hm == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(hourElement())
+                    .append(minuteElement())
+                    .toFormatter();
+            }
+            return hm;
+        }
+
+        private static DateTimeFormatter hourMinuteSecond() {
+            if (hms == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(hourElement())
+                    .append(minuteElement())
+                    .append(secondElement())
+                    .toFormatter();
+            }
+            return hms;
+        }
+
+        private static DateTimeFormatter hourMinuteSecondMillis() {
+            if (hmsl == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(hourElement())
+                    .append(minuteElement())
+                    .append(secondElement())
+                    .appendLiteral('.')
+                    .appendFractionOfSecond(3, 3)
+                    .toFormatter();
+            }
+            return hmsl;
+        }
+
+        private static DateTimeFormatter hourMinuteSecondFraction() {
+            if (hmsf == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(hourElement())
+                    .append(minuteElement())
+                    .append(secondElement())
+                    .append(fractionElement())
+                    .toFormatter();
+            }
+            return hmsf;
+        }
+
+        private static DateTimeFormatter dateHour() {
+            if (dh == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(date())
+                    .append(literalTElement())
+                    .append(hour())
+                    .toFormatter();
+            }
+            return dh;
+        }
+
+        private static DateTimeFormatter dateHourMinute() {
+            if (dhm == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(date())
+                    .append(literalTElement())
+                    .append(hourMinute())
+                    .toFormatter();
+            }
+            return dhm;
+        }
+
+        private static DateTimeFormatter dateHourMinuteSecond() {
+            if (dhms == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(date())
+                    .append(literalTElement())
+                    .append(hourMinuteSecond())
+                    .toFormatter();
+            }
+            return dhms;
+        }
+
+        private static DateTimeFormatter dateHourMinuteSecondMillis() {
+            if (dhmsl == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(date())
+                    .append(literalTElement())
+                    .append(hourMinuteSecondMillis())
+                    .toFormatter();
+            }
+            return dhmsl;
+        }
+
+        private static DateTimeFormatter dateHourMinuteSecondFraction() {
+            if (dhmsf == null) {
+                return new DateTimeFormatterBuilder()
+                    .append(date())
+                    .append(literalTElement())
+                    .append(hourMinuteSecondFraction())
+                    .toFormatter();
+            }
+            return dhmsf;
+        }
+
+        //-----------------------------------------------------------------------
+        private static DateTimeFormatter yearElement() {
+            if (ye == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendYear(4, 9)
+                    .toFormatter();
+            }
+            return ye;
+        }
+    
+        private static DateTimeFormatter monthElement() {
+            if (mye == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendLiteral('-')
+                    .appendMonthOfYear(2)
+                    .toFormatter();
+            }
+            return mye;
+        }
+    
+        private static DateTimeFormatter dayOfMonthElement() {
+            if (dme == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendLiteral('-')
+                    .appendDayOfMonth(2)
+                    .toFormatter();
+            }
+            return dme;
+        }
+    
+        private static DateTimeFormatter weekyearElement() {
+            if (we == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendWeekyear(4, 9)
+                    .toFormatter();
+            }
+            return we;
+        }
+    
+        private static DateTimeFormatter weekElement() {
+            if (wwe == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendLiteral("-W")
+                    .appendWeekOfWeekyear(2)
+                    .toFormatter();
+            }
+            return wwe;
+        }
+    
+        private static DateTimeFormatter dayOfWeekElement() {
+            if (dwe == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendLiteral('-')
+                    .appendDayOfWeek(1)
+                    .toFormatter();
+            }
+            return dwe;
+        }
+    
+        private static DateTimeFormatter dayOfYearElement() {
+            if (dye == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendLiteral('-')
+                    .appendDayOfYear(3)
+                    .toFormatter();
+            }
+            return dye;
+        }
+        
+        private static DateTimeFormatter literalTElement() {
+            if (lte == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendLiteral('T')
+                    .toFormatter();
+            }
+            return lte;
+        }
+    
+        private static DateTimeFormatter hourElement() {
+            if (hde == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendHourOfDay(2)
+                    .toFormatter();
+            }
+            return hde;
+        }
+    
+        private static DateTimeFormatter minuteElement() {
+            if (mhe == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendLiteral(':')
+                    .appendMinuteOfHour(2)
+                    .toFormatter();
+            }
+            return mhe;
+        }
+    
+        private static DateTimeFormatter secondElement() {
+            if (sme == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendLiteral(':')
+                    .appendSecondOfMinute(2)
+                    .toFormatter();
+            }
+            return sme;
+        }
+    
+        private static DateTimeFormatter fractionElement() {
+            if (fse == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendLiteral('.')
+                    // Support parsing up to nanosecond precision even though
+                    // those extra digits will be dropped.
+                    .appendFractionOfSecond(3, 9)
+                    .toFormatter();
+            }
+            return fse;
+        }
+    
+        private static DateTimeFormatter offsetElement() {
+            if (ze == null) {
+                return new DateTimeFormatterBuilder()
+                    .appendTimeZoneOffset("Z", true, 2, 4)
+                    .toFormatter();
+            }
+            return ze;
+        }
+
     }
 
 }

From 91b1ba4ed42ca0b345370ea3cc0ddcdb33781c6d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 7 Aug 2013 20:25:49 +0100
Subject: [PATCH 34/43] Better thread-safety in ISODateTimeFormat

Fixes #45
---
 RELEASE-NOTES.txt | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 7a3c11b71..a7b5ab78f 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -96,6 +96,8 @@ Bug fixes since 2.2
   Previously, the wrong year could be obtained at the start or end of the year in non UTC zones
   Now obtains the year from the ReadWritableInstant using the chronology of the ReadWritableInstant
 
+- Better thread-safety in ISODateTimeFormat [#45]
+
 
 Scala
 --------

From 28aeba952e838fb12c9b934ce6ef65658e45d7b2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 16 Aug 2013 14:41:18 +0100
Subject: [PATCH 35/43] Fix GJChronology.plus/minus across cutover and year
 zero

Fixes #28
When subtracting a number of years from a date in the GJChronology there are two considerations
The cutover date might be crossed, and year zero might be crossed (there is no year zero in GJ)
Previously, each were handled separately, but not together. Now it is fixed
As part of this change, the minimum cutover instant was set to 0001-01-01 (Gregorian)
---
 RELEASE-NOTES.txt                             |  10 ++
 .../org/joda/time/chrono/GJChronology.java    |  29 ++++
 .../java/org/joda/time/chrono/TestAll.java    |   1 +
 .../java/org/joda/time/chrono/TestGJDate.java | 138 ++++++++++++++++++
 4 files changed, 178 insertions(+)
 create mode 100644 src/test/java/org/joda/time/chrono/TestGJDate.java

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index a7b5ab78f..a440db562 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -55,6 +55,10 @@ Semantic compatible - Yes, except
  - BasicChronology now defines an equals method
    This which would affect you if you subclassed it (unlikely)
 
+ - GJChronology now has a minimum cutover instant of 0001-01-01 (Gregorian)
+   Its unlikely you have it set earlier than this
+   If you did your code was broken anyway
+
 
 Deprecations since 2.2
 ----------------------
@@ -98,6 +102,12 @@ Bug fixes since 2.2
 
 - Better thread-safety in ISODateTimeFormat [#45]
 
+- Fix GJChronology.plus/minus across cutover and year zero [#28]
+  When subtracting a number of years from a date in the GJChronology there are two considerations
+  The cutover date might be crossed, and year zero might be crossed (there is no year zero in GJ)
+  Previously, each were handled separately, but not together. Now it is fixed
+  As part of this change, the minimum cutover instant was set to 0001-01-01 (Gregorian)
+
 
 Scala
 --------
diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index 960fe479e..d1556f527 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -27,6 +27,7 @@
 import org.joda.time.DurationField;
 import org.joda.time.IllegalFieldValueException;
 import org.joda.time.Instant;
+import org.joda.time.LocalDate;
 import org.joda.time.ReadableInstant;
 import org.joda.time.ReadablePartial;
 import org.joda.time.field.BaseDateTimeField;
@@ -192,6 +193,10 @@ public static synchronized GJChronology getInstance(
             cutoverInstant = DEFAULT_CUTOVER;
         } else {
             cutoverInstant = gregorianCutover.toInstant();
+            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));
+            if (cutoverDate.getYear() <= 0) {
+                throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01.");
+            }
         }
 
         GJChronology chrono;
@@ -975,6 +980,17 @@ public long add(long instant, int value) {
                 if (instant < iCutover) {
                     // Only adjust if gap fully crossed.
                     if (instant + iGapDuration < iCutover) {
+                        if (iConvertByWeekyear) {
+                            int wyear = iGregorianChronology.weekyear().get(instant);
+                            if (wyear <= 0) {
+                                instant = iGregorianChronology.weekyear().add(instant, -1);
+                            }
+                        } else {
+                            int year = iGregorianChronology.year().get(instant);
+                            if (year <= 0) {
+                                instant = iGregorianChronology.year().add(instant, -1);
+                            }
+                        }
                         instant = gregorianToJulian(instant);
                     }
                 }
@@ -983,6 +999,7 @@ public long add(long instant, int value) {
                 if (instant >= iCutover) {
                     // Only adjust if gap fully crossed.
                     if (instant - iGapDuration >= iCutover) {
+                        // no special handling for year zero as cutover always after year zero
                         instant = julianToGregorian(instant);
                     }
                 }
@@ -996,6 +1013,17 @@ public long add(long instant, long value) {
                 if (instant < iCutover) {
                     // Only adjust if gap fully crossed.
                     if (instant + iGapDuration < iCutover) {
+                        if (iConvertByWeekyear) {
+                            int wyear = iGregorianChronology.weekyear().get(instant);
+                            if (wyear <= 0) {
+                                instant = iGregorianChronology.weekyear().add(instant, -1);
+                            }
+                        } else {
+                            int year = iGregorianChronology.year().get(instant);
+                            if (year <= 0) {
+                                instant = iGregorianChronology.year().add(instant, -1);
+                            }
+                        }
                         instant = gregorianToJulian(instant);
                     }
                 }
@@ -1004,6 +1032,7 @@ public long add(long instant, long value) {
                 if (instant >= iCutover) {
                     // Only adjust if gap fully crossed.
                     if (instant - iGapDuration >= iCutover) {
+                        // no special handling for year zero as cutover always after year zero
                         instant = julianToGregorian(instant);
                     }
                 }
diff --git a/src/test/java/org/joda/time/chrono/TestAll.java b/src/test/java/org/joda/time/chrono/TestAll.java
index 0db38e541..f1fcb3930 100644
--- a/src/test/java/org/joda/time/chrono/TestAll.java
+++ b/src/test/java/org/joda/time/chrono/TestAll.java
@@ -47,6 +47,7 @@ public static Test suite() {
         suite.addTest(TestJulianChronology.suite());
         suite.addTest(TestISOChronology.suite());
         suite.addTest(TestLenientChronology.suite());
+        suite.addTest(TestGJDate.suite());
         
         return suite;
     }
diff --git a/src/test/java/org/joda/time/chrono/TestGJDate.java b/src/test/java/org/joda/time/chrono/TestGJDate.java
new file mode 100644
index 000000000..ba2a1fbca
--- /dev/null
+++ b/src/test/java/org/joda/time/chrono/TestGJDate.java
@@ -0,0 +1,138 @@
+/*
+ *  Copyright 2001-2013 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.chrono;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.Chronology;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+import org.joda.time.LocalDate;
+
+/**
+ * Test.
+ */
+public class TestGJDate extends TestCase {
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestGJDate.class);
+    }
+
+    public TestGJDate(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    private static final Chronology GJ_CHRONOLOGY = GJChronology.getInstanceUTC();
+
+    //-----------------------------------------------------------------------
+    public void test_plusYears_positiveToPositive() {
+        LocalDate date = new LocalDate(3, 6, 30, GJ_CHRONOLOGY);
+        LocalDate expected = new LocalDate(7, 6, 30, GJ_CHRONOLOGY);
+        assertEquals(expected, date.plusYears(4));
+    }
+
+    public void test_plusYears_positiveToZero() {
+        LocalDate date = new LocalDate(3, 6, 30, GJ_CHRONOLOGY);
+        LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);
+        assertEquals(expected, date.plusYears(-3));
+    }
+
+    public void test_plusYears_positiveToNegative() {
+        LocalDate date = new LocalDate(3, 6, 30, GJ_CHRONOLOGY);
+        LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY);
+        assertEquals(expected, date.plusYears(-4));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_plusYears_negativeToNegative() {
+        LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY);
+        LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);
+        assertEquals(expected, date.plusYears(2));
+    }
+
+    public void test_plusYears_negativeToZero() {
+        LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY);
+        LocalDate expected = new LocalDate(1, 6, 30, GJ_CHRONOLOGY);
+        assertEquals(expected, date.plusYears(3));
+    }
+
+    public void test_plusYears_negativeToPositive() {
+        LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY);
+        LocalDate expected = new LocalDate(2, 6, 30, GJ_CHRONOLOGY);
+        assertEquals(expected, date.plusYears(4));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_plusYears_positiveToPositive_crossCutover() {
+        LocalDate date = new LocalDate(3, 6, 30, GJ_CHRONOLOGY);
+        LocalDate expected = new LocalDate(2007, 6, 30, GJ_CHRONOLOGY);
+        assertEquals(expected, date.plusYears(2004));
+    }
+
+    public void test_plusYears_positiveToZero_crossCutover() {
+        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);
+        LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);
+        assertEquals(expected, date.plusYears(-2003));
+    }
+
+    public void test_plusYears_positiveToNegative_crossCutover() {
+        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);
+        LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY);
+        assertEquals(expected, date.plusYears(-2004));
+    }
+
+    public void test_plusYears_negativeToPositive_crossCutover() {
+        LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY);
+        LocalDate expected = new LocalDate(2002, 6, 30, GJ_CHRONOLOGY);
+        assertEquals(expected, date.plusYears(2004));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_plusWeekyears_positiveToZero_crossCutover() {
+        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);
+        LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());
+        assertEquals(expected, date.weekyear().addToCopy(-2003));
+    }
+
+    public void test_plusWeekyears_positiveToNegative_crossCutover() {
+        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);
+        LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());
+        assertEquals(expected, date.weekyear().addToCopy(-2004));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_cutoverPreZero() {
+        DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC);
+        try {
+            GJChronology.getInstance(DateTimeZone.UTC, cutover);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+}

From f268b52a2e19f0f5dd1ef1ef1baf6b61ed037744 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 16 Aug 2013 15:03:00 +0100
Subject: [PATCH 36/43] Move to using m2e Maven Eclipse plugin

---
 .classpath                         |  11 -
 .gitignore                         |  20 +-
 .project                           |  17 --
 checkstyle.xml                     |  81 -------
 pom.xml                            | 325 +++++++++++++++++++++--------
 src/main/checkstyle/checkstyle.xml | 114 ++++++++++
 6 files changed, 366 insertions(+), 202 deletions(-)
 delete mode 100644 .classpath
 delete mode 100644 .project
 delete mode 100644 checkstyle.xml
 create mode 100644 src/main/checkstyle/checkstyle.xml

diff --git a/.classpath b/.classpath
deleted file mode 100644
index 13086d494..000000000
--- a/.classpath
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src/main/java"/>
-	<classpathentry kind="src" path="src/tz-data"/>
-	<classpathentry kind="src" path="src/test/java"/>
-	<classpathentry kind="src" path="src/example"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
-	<classpathentry kind="var" path="M2_REPO/junit/junit/3.8.2/junit-3.8.2.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/joda/joda-convert/1.1/joda-convert-1.1.jar"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
diff --git a/.gitignore b/.gitignore
index e03c98fd7..b958a5868 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,9 +1,17 @@
-bin/
-build/
-lib/
-target/
+/bin/
+/target/
 *.log
+/tests/
+.checkstyle
+.classpath
+.project
+/.settings/
+/nbproject/
+.idea
+*.iml
+
+/build/
+/lib/
+/test-output/
 src/tz-data/
 *TempTest*
-/test-output/
-/.settings/
diff --git a/.project b/.project
deleted file mode 100644
index 2be73689a..000000000
--- a/.project
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>joda-time</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/checkstyle.xml b/checkstyle.xml
deleted file mode 100644
index 0f1c60d63..000000000
--- a/checkstyle.xml
+++ /dev/null
@@ -1,81 +0,0 @@
-<?xml version="1.0"?>
-
-<!DOCTYPE module PUBLIC
-    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
-    "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">
-
-<!-- customization of default Checkstyle behavior -->
-<module name="Checker">
-  <property name="localeLanguage" value="en"/>
-  <!--module name="PackageHtml"/-->
-  <module name="TreeWalker">
-    <module name="MemberName">
-      <property name="format" value="^i[A-Z][a-zA-Z0-9]*$"/>
-    </module>
-    <module name="LocalVariableName">
-      <property name="format" value="^ex[0-9]*$"/>
-      <property name="tokens" value="PARAMETER_DEF"/>
-    </module>
-    <module name="AvoidStarImport"/>
-    <module name="RedundantImport"/>
-    <module name="UnusedImports"/>
-    
-    <module name="TabCharacter"/>
-    <module name="NeedBraces"/>
-    <!--module name="TypecastParenPad"/-->
-    <module name="WhitespaceAfter"/>
-    <module name="WhitespaceAround"/>
-    <module name="ModifierOrder"/>
-    <module name="RedundantModifier"/>
-    
-    <module name="EmptyBlock"/>
-    <module name="LeftCurly"/>
-    <module name="NeedBraces"/>
-    <module name="RightCurly"/>
-    <!--module name="AvoidNestedBlocks">
-      <property name="allowInSwitchCase" value="true"/>
-    </module-->
-    
-    <!--module name="ArrayTrailingComma"/-->
-    <!--module name="CovariantEquals"/-->
-    <module name="DoubleCheckedLocking"/>
-    <module name="EmptyStatement"/>
-    <module name="EqualsHashCode"/>
-    <!--module name="HiddenField">
-      <property name="ignoreConstructorParameter" value="true"/>
-      <property name="ignoreSetter" value="true"/>
-    </module-->
-    <module name="IllegalInstantiation">
-      <property name="classes" value="java.lang.Boolean"/>
-    </module>
-    <!--module name="SuperClone"/-->
-    <!--module name="ExplicitInitialization"/-->
-              
-    <module name="GenericIllegalRegexp">
-      <property name="format" value="System\.out\.println"/>
-    </module>
-    <module name="GenericIllegalRegexp">
-      <property name="format" value="System\.err\.println"/>
-    </module>
-    <module name="TodoComment"/>
-    <module name="UpperEll"/>
-    <module name="ArrayTypeStyle"/>
-    <module name="Indentation"/>
-          
-    <module name="RedundantThrows">
-      <property name="allowUnchecked" value="true"/>
-    </module>
-    <module name="LineLength">
-      <property name="max" value="120"/>
-    </module>
-    <module name="JavadocVariable">
-      <property name="excludeScope" value="private"/>
-    </module>
-    <module name="JavadocMethod">
-      <property name="excludeScope" value="private"/>
-      <property name="allowUndeclaredRTE" value="true"/>
-    </module>
- </module>
-</module>
-                        
-
diff --git a/pom.xml b/pom.xml
index 7e1c75c8e..b4d0ed17e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -3,14 +3,17 @@
     xmlns="http://maven.apache.org/POM/4.0.0"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+
   <modelVersion>4.0.0</modelVersion>
   <groupId>joda-time</groupId>
   <artifactId>joda-time</artifactId>
   <packaging>jar</packaging>
-  <name>Joda time</name>
+  <name>Joda-Time</name>
   <version>2.3-SNAPSHOT</version>
   <description>Date and time library to replace JDK date handling</description>
   <url>http://joda-time.sourceforge.net</url>
+
+  <!-- ==================================================================== -->
   <issueManagement>
     <system>GitHub</system>
     <url>https://github.com/JodaOrg/joda-time/issues</url>
@@ -24,6 +27,8 @@
       <archive>http://sourceforge.net/mailarchive/forum.php?forum_name=joda-interest</archive>
     </mailingList>
   </mailingLists>
+
+  <!-- ==================================================================== -->
   <developers>
     <developer>
       <id>scolebourne</id>
@@ -151,6 +156,8 @@
       <name>Maxim Zhao</name>
     </contributor>
   </contributors>
+
+  <!-- ==================================================================== -->
   <licenses>
     <license>
       <name>Apache 2</name>
@@ -159,7 +166,7 @@
     </license>
   </licenses>
   <scm>
-    <connection>scm:git:git@github.com:JodaOrg/joda-time.git</connection>
+    <connection>scm:git:https://github.com/JodaOrg/joda-time.git</connection>
     <developerConnection>scm:git:git@github.com:JodaOrg/joda-time.git</developerConnection>
     <url>https://github.com/JodaOrg/joda-time</url>
   </scm>
@@ -167,50 +174,28 @@
     <name>Joda.org</name>
     <url>http://www.joda.org</url>
   </organization>
+
+  <!-- ==================================================================== -->
   <build>
     <resources>
-      <resource>
-        <directory>src/main/resources</directory>
-      </resource>
       <resource>
         <targetPath>META-INF</targetPath>
-        <directory>${basedir}</directory>
+        <directory>${project.basedir}</directory>
         <includes>
           <include>LICENSE.txt</include>
           <include>NOTICE.txt</include>
         </includes>
       </resource>
       <resource>
-        <targetPath>.</targetPath>
-        <directory>src/main/java</directory>
+        <directory>${project.basedir}/src/main/resources</directory>
         <includes>
           <include>org/joda/time/tz/data/**</include>
           <include>**/*.properties</include>
         </includes>
       </resource>
     </resources>
+    <!-- define build -->
     <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-clean-plugin</artifactId>
-        <version>2.5</version>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.0</version>
-        <configuration>
-          <verbose>true</verbose>
-          <fork>true</fork>
-          <compilerVersion>1.5</compilerVersion>
-          <source>1.5</source>
-          <target>1.5</target>
-          <debug>true</debug>
-          <debuglevel>lines,source</debuglevel>
-          <optimize>true</optimize>
-          <showDeprecation>false</showDeprecation>
-        </configuration>
-      </plugin>
       <plugin>
         <groupId>org.codehaus.mojo</groupId>      
         <artifactId>exec-maven-plugin</artifactId>
@@ -255,7 +240,6 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-surefire-plugin</artifactId>
-        <version>2.13</version>
         <configuration>
           <includes>
             <include>**/TestAllPackages.java</include>
@@ -265,23 +249,20 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jar-plugin</artifactId>
-        <version>2.4</version>
         <configuration>
           <archive>
             <manifestFile>src/conf/MANIFEST.MF</manifestFile>
+            <manifest>
+              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
+              <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
+            </manifest>
           </archive>
         </configuration>
       </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
-        <version>2.9</version>
         <configuration>
-          <linksource>true</linksource>
-          <links>
-            <link>http://download.oracle.com/javase/1.5.0/docs/api/</link>
-          </links>
-          <encoding>UTF-8</encoding>
           <groups>
             <group>
               <title>User packages</title>
@@ -306,7 +287,6 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-source-plugin</artifactId>
-        <version>2.2.1</version>
         <executions>
           <execution>
             <id>attach-sources</id>
@@ -323,31 +303,11 @@
           </excludes>
         </configuration>
       </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-site-plugin</artifactId>
-        <version>3.2</version>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-repository-plugin</artifactId>
-        <version>2.3.1</version>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-resources-plugin</artifactId>
-        <version>2.6</version>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-deploy-plugin</artifactId>
-        <version>2.7</version>
-      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-assembly-plugin</artifactId>
-        <version>2.4</version>
         <configuration>
+          <attach>false</attach>
           <descriptors>
             <descriptor>src/main/assembly/dist.xml</descriptor>
           </descriptors>
@@ -368,11 +328,159 @@
         <artifactId>clirr-maven-plugin</artifactId>
         <version>2.3</version>
         <configuration>
-          <comparisonVersion>2.1</comparisonVersion>
+          <comparisonVersion>2.2</comparisonVersion>
         </configuration>
       </plugin>
     </plugins>
+    <!-- Manage plugin versions -->
+    <pluginManagement>
+      <plugins>
+        <!-- Maven build and reporting plugins (alphabetical) -->
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-assembly-plugin</artifactId>
+          <version>${maven-assembly-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-checkstyle-plugin</artifactId>
+          <version>${maven-checkstyle-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-changes-plugin</artifactId>
+          <version>${maven-changes-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-clean-plugin</artifactId>
+          <version>${maven-clean-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-compiler-plugin</artifactId>
+          <version>${maven-compiler-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-deploy-plugin</artifactId>
+          <version>${maven-deploy-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-dependency-plugin</artifactId>
+          <version>${maven-dependency-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-gpg-plugin</artifactId>
+          <version>${maven-gpg-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-install-plugin</artifactId>
+          <version>${maven-install-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-jar-plugin</artifactId>
+          <version>${maven-jar-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-javadoc-plugin</artifactId>
+          <version>${maven-javadoc-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-jxr-plugin</artifactId>
+          <version>${maven-jxr-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-plugin-plugin</artifactId>
+          <version>${maven-plugin-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-pmd-plugin</artifactId>
+          <version>${maven-pmd-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-project-info-reports-plugin</artifactId>
+          <version>${maven-project-info-reports-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-repository-plugin</artifactId>
+          <version>${maven-repository-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-resources-plugin</artifactId>
+          <version>${maven-resources-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-site-plugin</artifactId>
+          <version>${maven-site-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-source-plugin</artifactId>
+          <version>${maven-source-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-surefire-plugin</artifactId>
+          <version>${maven-surefire-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-surefire-report-plugin</artifactId>
+          <version>${maven-surefire-report-plugin.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-toolchains-plugin</artifactId>
+          <version>${maven-toolchains-plugin.version}</version>
+        </plugin>
+        <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
+        <plugin>
+        	<groupId>org.eclipse.m2e</groupId>
+        	<artifactId>lifecycle-mapping</artifactId>
+        	<version>1.0.0</version>
+        	<configuration>
+        		<lifecycleMappingMetadata>
+        			<pluginExecutions>
+        				<pluginExecution>
+        					<pluginExecutionFilter>
+        						<groupId>org.codehaus.mojo</groupId>
+        						<artifactId>
+        							exec-maven-plugin
+        						</artifactId>
+        						<versionRange>[1.2.1,)</versionRange>
+        						<goals>
+        							<goal>java</goal>
+        						</goals>
+        					</pluginExecutionFilter>
+        					<action>
+        						<ignore></ignore>
+        					</action>
+        				</pluginExecution>
+        			</pluginExecutions>
+        		</lifecycleMappingMetadata>
+        	</configuration>
+        </plugin>
+      </plugins>
+    </pluginManagement>
   </build>
+
+  <!-- ==================================================================== -->
+  <prerequisites>
+    <maven>3.0.4</maven>
+  </prerequisites>
   <dependencies>
     <dependency>
       <groupId>org.joda</groupId>
@@ -388,52 +496,45 @@
       <scope>test</scope>
     </dependency>
   </dependencies>
+
+  <!-- ==================================================================== -->
   <reporting>
-  	<plugins>
+    <plugins>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-project-info-reports-plugin</artifactId>
-        <version>2.5.1</version>
+        <version>${maven-project-info-plugin.version}</version>
         <reportSets>
           <reportSet>
             <reports>
-              <report>index</report>
               <report>dependencies</report>
-              <report>project-team</report>
-              <report>mailing-list</report>
+              <report>dependency-info</report>
               <report>issue-tracking</report>
               <report>license</report>
+              <report>mailing-list</report>
+              <report>project-team</report>
               <report>scm</report>
               <report>summary</report>
             </reports>
           </reportSet>
         </reportSets>
       </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-checkstyle-plugin</artifactId>
-        <version>2.3</version>
-        <configuration>
-          <configLocation>${basedir}/checkstyle.xml</configLocation>
-          <enableRulesSummary>false</enableRulesSummary>
-        </configuration>
-      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
-        <version>2.9</version>
-        <configuration>
-          <linksource>true</linksource>
-          <links>
-            <link>http://download.oracle.com/javase/1.5.0/docs/api/</link>
-          </links>
-          <encoding>UTF-8</encoding>
-        </configuration>
+        <version>${maven-javadoc-plugin.version}</version>
+        <reportSets>
+          <reportSet>
+            <reports>
+              <report>javadoc</report>
+            </reports>
+          </reportSet>
+        </reportSets>
       </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-surefire-report-plugin</artifactId>
-        <version>2.13</version>
+        <version>${maven-surefire-report-plugin.version}</version>
         <configuration>
            <showSuccess>true</showSuccess>
         </configuration>
@@ -441,10 +542,19 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jxr-plugin</artifactId>
-        <version>2.3</version>
+        <version>${maven-jxr-plugin.version}</version>
+        <reportSets>
+          <reportSet>
+            <reports>
+              <report>jxr</report>
+            </reports>
+          </reportSet>
+        </reportSets>
       </plugin>
-  	</plugins>
+    </plugins>
   </reporting>
+
+  <!-- ==================================================================== -->
   <distributionManagement>
     <repository>
       <id>sonatype-joda-staging</id>
@@ -466,6 +576,8 @@
     </site>
     <downloadUrl>http://oss.sonatype.org/content/repositories/joda-releases</downloadUrl>
   </distributionManagement>
+
+  <!-- ==================================================================== -->
   <profiles>
     <profile>
       <id>repo-sign-artifacts</id>
@@ -480,7 +592,6 @@
           <plugin>
             <groupId>org.apache.maven.plugins</groupId>
             <artifactId>maven-toolchains-plugin</artifactId>
-            <version>1.0</version>
             <executions>
               <execution>
                 <phase>validate</phase>
@@ -501,7 +612,6 @@
           <plugin>
             <groupId>org.apache.maven.plugins</groupId>
             <artifactId>maven-gpg-plugin</artifactId>
-            <version>1.4</version>
             <executions>
               <execution>
                 <id>sign-artifacts</id>
@@ -516,7 +626,48 @@
       </build>
     </profile>
   </profiles>
+
+  <!-- ==================================================================== -->
   <properties>
+    <!-- Plugin version numbers -->
+    <maven-assembly-plugin.version>2.4</maven-assembly-plugin.version>
+    <maven-changes-plugin.version>2.9</maven-changes-plugin.version>
+    <maven-checkstyle-plugin.version>2.10</maven-checkstyle-plugin.version>
+    <maven-clean-plugin.version>2.5</maven-clean-plugin.version>
+    <maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>
+    <maven-deploy-plugin.version>2.7</maven-deploy-plugin.version>
+    <maven-dependency-plugin.version>2.8</maven-dependency-plugin.version>
+    <maven-gpg-plugin.version>1.4</maven-gpg-plugin.version>
+    <maven-install-plugin.version>2.4</maven-install-plugin.version>
+    <maven-jar-plugin.version>2.4</maven-jar-plugin.version>
+    <maven-javadoc-plugin.version>2.9.1</maven-javadoc-plugin.version>
+    <maven-jxr-plugin.version>2.3</maven-jxr-plugin.version>
+    <maven-plugin-plugin.version>3.2</maven-plugin-plugin.version>
+    <maven-pmd-plugin.version>3.0.1</maven-pmd-plugin.version>
+    <maven-project-info-reports-plugin.version>2.7</maven-project-info-reports-plugin.version>
+    <maven-repository-plugin.version>2.3.1</maven-repository-plugin.version>
+    <maven-resources-plugin.version>2.6</maven-resources-plugin.version>
+    <maven-site-plugin.version>3.3</maven-site-plugin.version>
+    <maven-source-plugin.version>2.2.1</maven-source-plugin.version>
+    <maven-surefire-plugin.version>2.15</maven-surefire-plugin.version>
+    <maven-surefire-report-plugin.version>2.15</maven-surefire-report-plugin.version>
+    <maven-toolchains-plugin.version>1.0</maven-toolchains-plugin.version>
+    <!-- Properties for maven-compiler-plugin -->
+    <maven.compiler.compilerVersion>1.5</maven.compiler.compilerVersion>
+    <maven.compiler.source>1.5</maven.compiler.source>
+    <maven.compiler.target>1.5</maven.compiler.target>
+    <maven.compiler.fork>true</maven.compiler.fork>
+    <maven.compiler.verbose>true</maven.compiler.verbose>
+    <maven.compiler.optimize>true</maven.compiler.optimize>
+    <maven.compiler.debug>true</maven.compiler.debug>
+    <maven.compiler.debuglevel>lines,source</maven.compiler.debuglevel>
+    <!-- Properties for maven-javadoc-plugin -->
+    <author>false</author>
+    <notimestamp>true</notimestamp>
+    <!-- Properties for maven-checkstyle-plugin -->
+    <checkstyle.config.location>${project.basedir}/src/main/checkstyle/checkstyle.xml</checkstyle.config.location>
+    <!-- Other properties -->
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
   </properties>
 </project>
diff --git a/src/main/checkstyle/checkstyle.xml b/src/main/checkstyle/checkstyle.xml
new file mode 100644
index 000000000..16dddd3ec
--- /dev/null
+++ b/src/main/checkstyle/checkstyle.xml
@@ -0,0 +1,114 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
+
+<module name="Checker">
+  <property name="severity" value="warning"/>
+  <module name="TreeWalker">
+    <property name="tabWidth" value="4"/>
+    <module name="FileContentsHolder"/>
+    <module name="ConstantName">
+      <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$|^[a-z][a-zA-Z0-9]*$"/>
+    </module>
+    <module name="AvoidStarImport">
+      <property name="severity" value="error"/>
+    </module>
+    <module name="IllegalImport"/>
+    <module name="IllegalInstantiation">
+      <property name="classes" value="Boolean"/>
+    </module>
+    <module name="JavadocType">
+      <property name="scope" value="protected"/>
+    </module>
+    <module name="JavadocMethod">
+      <property name="scope" value="protected"/>
+      <property name="allowUndeclaredRTE" value="true"/>
+      <property name="allowMissingThrowsTags" value="true"/>
+      <property name="allowMissingJavadoc" value="true"/>
+      <property name="allowMissingPropertyJavadoc" value="true"/>
+      <property name="logLoadErrors" value="true"/>
+      <property name="suppressLoadErrors" value="true"/>
+    </module>
+    <module name="JavadocVariable">
+      <property name="scope" value="protected"/>
+    </module>
+    <module name="LineLength">
+      <property name="ignorePattern" value="^ *\* *[^ ]+$"/>
+      <property name="max" value="200"/>
+      <property name="tabWidth" value="2"/>
+    </module>
+    <module name="LocalFinalVariableName"/>
+    <module name="LocalVariableName"/>
+    <module name="MemberName">
+      <property name="format" value="^[a-z][a-zA-Z0-9$]*$"/>
+    </module>
+    <module name="MethodLength">
+      <property name="max" value="300"/>
+    </module>
+    <module name="MethodName"/>
+    <module name="ModifierOrder">
+      <property name="severity" value="error"/>
+    </module>
+    <module name="NeedBraces">
+      <property name="severity" value="error"/>
+    </module>
+    <module name="NoWhitespaceAfter"/>
+    <module name="NoWhitespaceBefore">
+      <property name="allowLineBreaks" value="true"/>
+      <property name="tokens" value="SEMI,DOT,POST_DEC,POST_INC"/>
+    </module>
+    <module name="OperatorWrap">
+      <property name="option" value="eol"/>
+      <property name="tokens" value="ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN, SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN"/>
+    </module>
+    <module name="PackageName"/>
+    <module name="ParameterName"/>
+    <module name="ParameterNumber">
+      <property name="max" value="20"/>
+    </module>
+    <module name="ParenPad"/>
+    <module name="RedundantImport"/>
+    <module name="RedundantModifier"/>
+    <module name="RightCurly">
+      <property name="severity" value="error"/>
+    </module>
+    <module name="StaticVariableName">
+      <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
+    </module>
+    <module name="TypeName"/>
+    <module name="UpperEll">
+      <property name="severity" value="error"/>
+    </module>
+    <module name="MissingDeprecated"/>
+    <module name="MissingOverride"/>
+    <module name="PackageAnnotation"/>
+    <module name="CovariantEquals"/>
+    <module name="ExplicitInitialization"/>
+    <module name="FallThrough"/>
+    <module name="StringLiteralEquality"/>
+    <module name="GenericWhitespace"/>
+    <module name="FinalClass"/>
+    <module name="MutableException"/>
+    <module name="ArrayTypeStyle">
+      <property name="severity" value="error"/>
+    </module>
+  </module>
+  <!-- Header inlined due to m2e -->
+  <module name="RegexpHeader">
+    <property name="header" value="^/\*[*]?\n^ \*  Copyright 200[0-9]([-](20[01][0-9]))? Stephen Colebourne"/>
+    <property name="fileExtensions" value="java"/>
+  </module>
+  <module name="SuppressionCommentFilter">
+    <property name="offCommentFormat" value="CSOFF"/>
+    <property name="onCommentFormat" value="CSON"/>
+  </module>
+  <module name="FileTabCharacter">
+    <property name="eachLine" value="true"/>
+    <property name="severity" value="error"/>
+  </module>
+  <module name="NewlineAtEndOfFile"/>
+  <module name="SuppressWithNearbyCommentFilter">
+    <property name="commentFormat" value="CSIGNORE"/>
+    <property name="checkFormat" value=".*"/>
+    <property name="checkC" value="false"/>
+  </module>
+</module>

From a6d5c6b54095e93a27e989670f11549395c4c8ce Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 16 Aug 2013 15:46:15 +0100
Subject: [PATCH 37/43] Remove basic code warnings

---
 src/main/java/org/joda/time/DateTimeZone.java                | 1 +
 src/main/java/org/joda/time/base/BaseLocal.java              | 3 ++-
 src/main/java/org/joda/time/chrono/BaseChronology.java       | 2 +-
 src/main/java/org/joda/time/chrono/BasicChronology.java      | 1 +
 .../org/joda/time/chrono/BasicDayOfMonthDateTimeField.java   | 3 ++-
 .../org/joda/time/chrono/BasicDayOfYearDateTimeField.java    | 3 ++-
 .../org/joda/time/chrono/BasicMonthOfYearDateTimeField.java  | 3 ++-
 .../joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java   | 3 ++-
 .../org/joda/time/chrono/BasicWeekyearDateTimeField.java     | 3 ++-
 .../java/org/joda/time/chrono/BasicYearDateTimeField.java    | 3 ++-
 src/main/java/org/joda/time/chrono/GJChronology.java         | 2 ++
 .../java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java  | 3 ++-
 src/main/java/org/joda/time/chrono/GJEraDateTimeField.java   | 3 ++-
 .../org/joda/time/chrono/GJMonthOfYearDateTimeField.java     | 3 ++-
 .../java/org/joda/time/chrono/GJYearOfEraDateTimeField.java  | 3 ++-
 .../java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java | 3 ++-
 src/main/java/org/joda/time/chrono/LimitChronology.java      | 3 ++-
 src/main/java/org/joda/time/chrono/ZonedChronology.java      | 1 +
 .../java/org/joda/time/field/DecoratedDateTimeField.java     | 3 ++-
 src/main/java/org/joda/time/field/DividedDateTimeField.java  | 3 ++-
 .../java/org/joda/time/field/ImpreciseDateTimeField.java     | 3 ++-
 src/main/java/org/joda/time/field/OffsetDateTimeField.java   | 3 ++-
 src/main/java/org/joda/time/field/PreciseDateTimeField.java  | 3 ++-
 .../org/joda/time/field/PreciseDurationDateTimeField.java    | 3 ++-
 .../java/org/joda/time/field/RemainderDateTimeField.java     | 3 ++-
 .../java/org/joda/time/field/ZeroIsMaxDateTimeField.java     | 3 ++-
 src/main/java/org/joda/time/format/DateTimeFormatter.java    | 3 +--
 src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java      | 5 ++++-
 src/main/java/org/joda/time/tz/ZoneInfoProvider.java         | 3 ++-
 29 files changed, 55 insertions(+), 26 deletions(-)

diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index a127604bb..3691ec98f 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -630,6 +630,7 @@ private static int parseOffset(String str) {
         // Can't use a real chronology if called during class
         // initialization. Offset parser doesn't need it anyhow.
         Chronology chrono = new BaseChronology() {
+            private static final long serialVersionUID = -3128740902654445468L;
             public DateTimeZone getZone() {
                 return null;
             }
diff --git a/src/main/java/org/joda/time/base/BaseLocal.java b/src/main/java/org/joda/time/base/BaseLocal.java
index 9095e8242..dade06b99 100644
--- a/src/main/java/org/joda/time/base/BaseLocal.java
+++ b/src/main/java/org/joda/time/base/BaseLocal.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -32,6 +32,7 @@
         extends AbstractPartial {
 
     /** Serialization version */
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = 276453175381783L;
 
     //-----------------------------------------------------------------------
diff --git a/src/main/java/org/joda/time/chrono/BaseChronology.java b/src/main/java/org/joda/time/chrono/BaseChronology.java
index 2a36fc656..cf3ae1597 100644
--- a/src/main/java/org/joda/time/chrono/BaseChronology.java
+++ b/src/main/java/org/joda/time/chrono/BaseChronology.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
diff --git a/src/main/java/org/joda/time/chrono/BasicChronology.java b/src/main/java/org/joda/time/chrono/BasicChronology.java
index 4ed757b57..0753d86d7 100644
--- a/src/main/java/org/joda/time/chrono/BasicChronology.java
+++ b/src/main/java/org/joda/time/chrono/BasicChronology.java
@@ -753,6 +753,7 @@ private YearInfo getYearInfo(int year) {
     }
 
     private static class HalfdayField extends PreciseDateTimeField {
+        @SuppressWarnings("unused")
         private static final long serialVersionUID = 581601443656929254L;
 
         HalfdayField() {
diff --git a/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java
index 2fd054cd0..29a1e4e21 100644
--- a/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@
  */
 final class BasicDayOfMonthDateTimeField extends PreciseDurationDateTimeField {
 
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = -4677223814028011723L;
 
     private final BasicChronology iChronology;
diff --git a/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
index 028ec3bd2..2315ca2c6 100644
--- a/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@
  */
 final class BasicDayOfYearDateTimeField extends PreciseDurationDateTimeField {
 
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = -6821236822336841037L;
 
     private final BasicChronology iChronology;
diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
index 2892a2d75..051caeddf 100644
--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -34,6 +34,7 @@
 class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {
 
     /** Serialization version */
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = -8258715387168736L;
 
     private static final int MIN = DateTimeConstants.JANUARY;
diff --git a/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java
index 200231fda..9fd946d88 100644
--- a/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -31,6 +31,7 @@
  */
 final class BasicWeekOfWeekyearDateTimeField extends PreciseDurationDateTimeField {
 
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = -1587436826395135328L;
 
     private final BasicChronology iChronology;
diff --git a/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java
index 85abc2bf1..fc2f299b5 100644
--- a/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -31,6 +31,7 @@
  */
 final class BasicWeekyearDateTimeField extends ImpreciseDateTimeField {
     
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = 6215066916806820644L;
 
     private static final long WEEK_53 = (53L - 1) * DateTimeConstants.MILLIS_PER_WEEK;
diff --git a/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java
index 595e61ab3..6ded862cc 100644
--- a/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -31,6 +31,7 @@
 class BasicYearDateTimeField extends ImpreciseDateTimeField {
 
     /** Serialization version. */
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = -98628754872287L;
 
     /** The underlying basic chronology. */
diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index d1556f527..c5ecda0bc 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -606,6 +606,7 @@ long gregorianToJulianByWeekyear(long instant) {
      * assumes that calls to add and addWrapField are unaffected by the cutover.
      */
     private class CutoverField extends BaseDateTimeField {
+        @SuppressWarnings("unused")
         private static final long serialVersionUID = 3528501219481026402L;
 
         final DateTimeField iJulianField;
@@ -938,6 +939,7 @@ protected long gregorianToJulian(long instant) {
      * field requires specific knowledge of how the GJ fields are implemented.
      */
     private final class ImpreciseCutoverField extends CutoverField {
+        @SuppressWarnings("unused")
         private static final long serialVersionUID = 3410248757173576441L;
 
         /**
diff --git a/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java b/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java
index 8137181b0..2eb4f527c 100644
--- a/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -34,6 +34,7 @@
 final class GJDayOfWeekDateTimeField extends PreciseDurationDateTimeField {
     
     /** Serialization version */
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = -3857947176719041436L;
 
     private final BasicChronology iChronology;
diff --git a/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java b/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java
index b2f91a25e..5c4484b87 100644
--- a/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -35,6 +35,7 @@
 final class GJEraDateTimeField extends BaseDateTimeField {
     
     /** Serialization version */
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = 4240986525305515528L;
 
     private final BasicChronology iChronology;
diff --git a/src/main/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java
index 19c9e6bbb..1d3d6cf40 100644
--- a/src/main/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -28,6 +28,7 @@
 final class GJMonthOfYearDateTimeField extends BasicMonthOfYearDateTimeField {
 
     /** Serialization version */
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = -4748157875845286249L;
 
     /**
diff --git a/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java b/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java
index c080c6bb2..0466b8f0b 100644
--- a/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -29,6 +29,7 @@
  */
 final class GJYearOfEraDateTimeField extends DecoratedDateTimeField {
 
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = -5961050944769862059L;
 
     private final BasicChronology iChronology;
diff --git a/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java b/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java
index 27cc20ed7..95b42ca9a 100644
--- a/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -32,6 +32,7 @@
  */
 class ISOYearOfEraDateTimeField extends DecoratedDateTimeField {
 
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = 7037524068969447317L;
 
     /**
diff --git a/src/main/java/org/joda/time/chrono/LimitChronology.java b/src/main/java/org/joda/time/chrono/LimitChronology.java
index d5f243105..89325adee 100644
--- a/src/main/java/org/joda/time/chrono/LimitChronology.java
+++ b/src/main/java/org/joda/time/chrono/LimitChronology.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -441,6 +441,7 @@ public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
     }
 
     private class LimitDateTimeField extends DecoratedDateTimeField {
+        @SuppressWarnings("unused")
         private static final long serialVersionUID = -2435306746995699312L;
 
         private final DurationField iDurationField;
diff --git a/src/main/java/org/joda/time/chrono/ZonedChronology.java b/src/main/java/org/joda/time/chrono/ZonedChronology.java
index 45c448c57..1eb99b6f6 100644
--- a/src/main/java/org/joda/time/chrono/ZonedChronology.java
+++ b/src/main/java/org/joda/time/chrono/ZonedChronology.java
@@ -369,6 +369,7 @@ private long addOffset(long instant) {
      * versa on output.
      */
     static final class ZonedDateTimeField extends BaseDateTimeField {
+        @SuppressWarnings("unused")
         private static final long serialVersionUID = -3968986277775529794L;
 
         final DateTimeField iField;
diff --git a/src/main/java/org/joda/time/field/DecoratedDateTimeField.java b/src/main/java/org/joda/time/field/DecoratedDateTimeField.java
index 6dd59e56d..dc16782fc 100644
--- a/src/main/java/org/joda/time/field/DecoratedDateTimeField.java
+++ b/src/main/java/org/joda/time/field/DecoratedDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -39,6 +39,7 @@
 public abstract class DecoratedDateTimeField extends BaseDateTimeField {
 
     /** Serialization version */
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = 203115783733757597L;
 
     /** The DateTimeField being wrapped */
diff --git a/src/main/java/org/joda/time/field/DividedDateTimeField.java b/src/main/java/org/joda/time/field/DividedDateTimeField.java
index 31464675c..6a477b2b4 100644
--- a/src/main/java/org/joda/time/field/DividedDateTimeField.java
+++ b/src/main/java/org/joda/time/field/DividedDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -34,6 +34,7 @@
  */
 public class DividedDateTimeField extends DecoratedDateTimeField {
 
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = 8318475124230605365L;
 
     // Shared with RemainderDateTimeField.
diff --git a/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java b/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java
index 0bd5c5e67..b75395ded 100644
--- a/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java
+++ b/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -40,6 +40,7 @@
  */
 public abstract class ImpreciseDateTimeField extends BaseDateTimeField {
 
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = 7190739608550251860L;
 
     final long iUnitMillis;
diff --git a/src/main/java/org/joda/time/field/OffsetDateTimeField.java b/src/main/java/org/joda/time/field/OffsetDateTimeField.java
index 1b857cdc0..b317eb296 100644
--- a/src/main/java/org/joda/time/field/OffsetDateTimeField.java
+++ b/src/main/java/org/joda/time/field/OffsetDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -28,6 +28,7 @@
  * @since 1.0
  */
 public class OffsetDateTimeField extends DecoratedDateTimeField {
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = 3145790132623583142L;
 
     private final int iOffset;
diff --git a/src/main/java/org/joda/time/field/PreciseDateTimeField.java b/src/main/java/org/joda/time/field/PreciseDateTimeField.java
index d1524e553..3db90c3f2 100644
--- a/src/main/java/org/joda/time/field/PreciseDateTimeField.java
+++ b/src/main/java/org/joda/time/field/PreciseDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -34,6 +34,7 @@
  */
 public class PreciseDateTimeField extends PreciseDurationDateTimeField {
 
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = -5586801265774496376L;
 
     /** The maximum range in the correct units */
diff --git a/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java b/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java
index b3c289cc0..ee6385968 100644
--- a/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java
+++ b/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -29,6 +29,7 @@
  */
 public abstract class PreciseDurationDateTimeField extends BaseDateTimeField {
 
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = 5004523158306266035L;
 
     /** The fractional unit in millis */
diff --git a/src/main/java/org/joda/time/field/RemainderDateTimeField.java b/src/main/java/org/joda/time/field/RemainderDateTimeField.java
index 3150030bb..d45aefd08 100644
--- a/src/main/java/org/joda/time/field/RemainderDateTimeField.java
+++ b/src/main/java/org/joda/time/field/RemainderDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -33,6 +33,7 @@
  */
 public class RemainderDateTimeField extends DecoratedDateTimeField {
 
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = 5708241235177666790L;
 
     // Shared with DividedDateTimeField.
diff --git a/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java b/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java
index 6848a7cd5..8a9011e29 100644
--- a/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java
+++ b/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -32,6 +32,7 @@
  */
 public final class ZeroIsMaxDateTimeField extends DecoratedDateTimeField {
 
+    @SuppressWarnings("unused")
     private static final long serialVersionUID = 961749798233026866L;
 
     /**
diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java
index 913d036e3..8f1bc631e 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2011 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
-import org.joda.time.Instant;
 import org.joda.time.LocalDate;
 import org.joda.time.LocalDateTime;
 import org.joda.time.LocalTime;
diff --git a/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
index ab4731bbf..8166b4e16 100644
--- a/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
+++ b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2010 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -819,6 +819,7 @@ Recurrence renameAppend(String appendNameKey) {
             iToYear = toYear;
         }
 
+        @SuppressWarnings("unused")
         public int getFromYear() {
             return iFromYear;
         }
@@ -827,6 +828,7 @@ public int getToYear() {
             return iToYear;
         }
 
+        @SuppressWarnings("unused")
         public OfYear getOfYear() {
             return iRecurrence.getOfYear();
         }
@@ -977,6 +979,7 @@ public boolean isTransitionFrom(Transition other) {
             iUpperOfYear = rs.iUpperOfYear;
         }
 
+        @SuppressWarnings("unused")
         public int getStandardOffset() {
             return iStandardOffset;
         }
diff --git a/src/main/java/org/joda/time/tz/ZoneInfoProvider.java b/src/main/java/org/joda/time/tz/ZoneInfoProvider.java
index ff36abbee..1903ca046 100644
--- a/src/main/java/org/joda/time/tz/ZoneInfoProvider.java
+++ b/src/main/java/org/joda/time/tz/ZoneInfoProvider.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2013 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -191,6 +191,7 @@ protected void uncaughtException(Exception ex) {
      * @return the input stream
      * @throws IOException if an error occurs
      */
+    @SuppressWarnings("resource")
     private InputStream openResource(String name) throws IOException {
         InputStream in;
         if (iFileDir != null) {

From 223e863a1f86987883674d704444f3ca5ffb6907 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 16 Aug 2013 16:30:46 +0100
Subject: [PATCH 38/43] Add proper GitHub README

---
 README.md  | 73 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 README.txt | 18 --------------
 2 files changed, 73 insertions(+), 18 deletions(-)
 create mode 100644 README.md
 delete mode 100644 README.txt

diff --git a/README.md b/README.md
new file mode 100644
index 000000000..03378a852
--- /dev/null
+++ b/README.md
@@ -0,0 +1,73 @@
+Joda-Time
+---------
+
+Joda-Time provides a quality replacement for the Java date and time classes.
+The design allows for multiple calendar systems, while still providing a simple API.
+The 'default' calendar is the ISO8601 standard which is used by XML.
+The Gregorian, Julian, Buddhist, Coptic, Ethiopic and Islamic systems are also included, and we welcome further additions.
+Supporting classes include time zone, duration, format and parsing. 
+
+As a flavour of Joda-Time, here's some example code:
+
+```
+public boolean isAfterPayDay(DateTime datetime) {
+  if (datetime.getMonthOfYear() == 2) {   // February is month 2!!
+    return datetime.getDayOfMonth() > 26;
+  }
+  return datetime.getDayOfMonth() > 28;
+}
+
+public Days daysToNewYear(LocalDate fromDate) {
+  LocalDate newYear = fromDate.plusYears(1).withDayOfYear(1);
+  return Days.daysBetween(fromDate, newYear);
+}
+
+public boolean isRentalOverdue(DateTime datetimeRented) {
+  Period rentalPeriod = new Period().withDays(2).withHours(12);
+  return datetimeRented.plus(rentalPeriod).isBeforeNow();
+}
+
+public String getBirthMonthText(LocalDate dateOfBirth) {
+  return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH);
+}
+```
+
+Joda-Time is licensed under the business-friendly [Apache 2.0 licence](http://www.joda.org/joda-time/license.html).
+
+
+### Documentation
+Various documentation is available:
+
+* The [home page](http://www.joda.org/joda-time/)
+* Two user guides - [quick](http://www.joda.org/joda-time/quickstart.html) and [full](http://www.joda.org/joda-time/userguide.html)
+* The [Javadoc](http://www.joda.org/joda-time/apidocs/index.html)
+* The [FAQ](http://www.joda.org/joda-time/faq.html) list
+* The change notes for the [releases](http://www.joda.org/joda-time/changes-report.html)
+* Information on [downloading and installing](http://www.joda.org/joda-time/installation.html) Joda-Time
+
+
+### Releases
+[Release 2.2](http://www.joda.org/joda-time/download.html) is the current latest release.
+This release is considered stable and worthy of the 1.x tag.
+It depends on JDK 1.5 or later.
+
+Available in the [Maven Central repository](http://search.maven.org/#artifactdetails|joda-time|joda-time|2.2|jar)
+
+
+### Related projects
+Related projects at GitHub:
+- https://github.com/JodaOrg/joda-time-hibernate
+- https://github.com/JodaOrg/joda-time-jsptags
+- https://github.com/JodaOrg/joda-time-i18n
+
+Other related projects:
+- http://www.joda.org/joda-time/related.html
+
+
+### Support
+Please use GitHub issues and Pull Requests for support.
+
+
+### History
+Issue tracking and active development is at GitHub.
+Historically, the project was at [Sourceforge](https://sourceforge.net/projects/joda-time/).
diff --git a/README.txt b/README.txt
deleted file mode 100644
index 0f19e7109..000000000
--- a/README.txt
+++ /dev/null
@@ -1,18 +0,0 @@
-
-Joda-Time
-=========
-Joda-Time is a date and time library that vastly improves on the JDK.
-
-See the home page for more details:
-http://joda-time.sourceforge.net/
-
-The source code is held primarily at GitHub:
-https://github.com/JodaOrg/joda-time
-
-Related projects at GitHub:
-https://github.com/JodaOrg/joda-time-hibernate
-https://github.com/JodaOrg/joda-time-jsptags
-https://github.com/JodaOrg/joda-time-i18n
-
-Other related projects:
-http://joda-time.sourceforge.net/related.html

From 4ff0dadfc9dae54d7289a245a95a3b46c41f80e9 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 16 Aug 2013 16:55:33 +0100
Subject: [PATCH 39/43] Move to using m2e Maven Eclipse plugin

Fix build
---
 pom.xml | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/pom.xml b/pom.xml
index b4d0ed17e..41a16316f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -187,9 +187,8 @@
         </includes>
       </resource>
       <resource>
-        <directory>${project.basedir}/src/main/resources</directory>
+        <directory>${project.basedir}/src/main/java</directory>
         <includes>
-          <include>org/joda/time/tz/data/**</include>
           <include>**/*.properties</include>
         </includes>
       </resource>

From eb4965a236f69e6abadc32e8290347a579ac0902 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 16 Aug 2013 17:21:05 +0100
Subject: [PATCH 40/43] Use GitHub pages for home page

---
 pom.xml | 37 +++++++++++++++++++++++++++++++------
 1 file changed, 31 insertions(+), 6 deletions(-)

diff --git a/pom.xml b/pom.xml
index 41a16316f..a4738b3b7 100644
--- a/pom.xml
+++ b/pom.xml
@@ -11,7 +11,7 @@
   <name>Joda-Time</name>
   <version>2.3-SNAPSHOT</version>
   <description>Date and time library to replace JDK date handling</description>
-  <url>http://joda-time.sourceforge.net</url>
+  <url>http://www.joda.org/joda-time/</url>
 
   <!-- ==================================================================== -->
   <issueManagement>
@@ -322,6 +322,36 @@
           </execution>
         </executions>
       </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-site-plugin</artifactId>
+        <configuration>
+          <skipDeploy>true</skipDeploy>
+        </configuration>
+      </plugin>
+      <plugin>
+        <groupId>com.github.github</groupId>
+        <artifactId>site-maven-plugin</artifactId>
+        <version>0.8</version>
+        <executions>
+          <execution>
+            <id>github-site</id>
+            <goals>
+              <goal>site</goal>
+            </goals>
+            <phase>site-deploy</phase>
+          </execution>
+        </executions>
+        <configuration>
+          <message>Create website for ${project.artifactId} v${project.version}</message>
+          <path>${project.artifactId}</path>
+          <merge>true</merge>
+          <server>github</server>
+          <repositoryOwner>JodaOrg</repositoryOwner>
+          <repositoryName>jodaorg.github.io</repositoryName>
+          <branch>refs/heads/master</branch>
+        </configuration>
+      </plugin>
       <plugin>
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>clirr-maven-plugin</artifactId>
@@ -568,11 +598,6 @@
       <url>http://oss.sonatype.org/content/repositories/joda-snapshots</url>
       <layout>default</layout>
     </snapshotRepository>
-    <site>
-      <id>sf-web-joda-time</id>
-      <name>Sourceforge Site</name>
-      <url>scpexe://shell.sourceforge.net/home/project-web/joda-time/htdocs</url>
-    </site>
     <downloadUrl>http://oss.sonatype.org/content/repositories/joda-releases</downloadUrl>
   </distributionManagement>
 

From 9732f2a8932b39de93a1afda8d5f9f12d764fba9 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 16 Aug 2013 17:21:19 +0100
Subject: [PATCH 41/43] Update website and docs

---
 RELEASE-NOTES.txt                |  5 ++++-
 src/conf/MANIFEST.MF             |  2 +-
 src/site/resources/download.html |  6 ++++++
 src/site/site.xml                | 34 +++++++++++++++++---------------
 src/site/xdoc/index.xml          | 25 +++++++++++++++--------
 src/site/xdoc/installation.xml   |  2 +-
 src/site/xdoc/related.xml        |  6 +++---
 src/site/xdoc/tz_update.xml      | 19 +++++++++---------
 src/site/xdoc/upgradeto100.xml   |  8 ++++----
 src/site/xdoc/upgradeto140.xml   |  2 +-
 src/site/xdoc/upgradeto150.xml   |  2 +-
 src/site/xdoc/upgradeto151.xml   |  2 +-
 src/site/xdoc/upgradeto152.xml   |  2 +-
 src/site/xdoc/upgradeto160.xml   |  2 +-
 src/site/xdoc/upgradeto161.xml   |  2 +-
 src/site/xdoc/upgradeto162.xml   |  2 +-
 src/site/xdoc/upgradeto200.xml   |  2 +-
 src/site/xdoc/upgradeto210.xml   |  2 +-
 src/site/xdoc/upgradeto220.xml   |  2 +-
 19 files changed, 74 insertions(+), 53 deletions(-)
 create mode 100644 src/site/resources/download.html

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index a440db562..fc2249f11 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -13,7 +13,7 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
 **  Please also check out our related projects   **
-** http://joda-time.sourceforge.net/related.html **
+** http://www.joda.org/joda-time/related.html **
 
 
 Enhancements since 2.2
@@ -35,6 +35,9 @@ Enhancements since 2.2
 - Add LocalDateTime.toDate(TimeZone) [#48]
   Provides an alternate way to create a java.util.Date that avoids some synchronization
 
+- Home page moved
+  http://www.joda.org/joda-time
+
 
 Compatibility with 2.2
 ----------------------
diff --git a/src/conf/MANIFEST.MF b/src/conf/MANIFEST.MF
index 8431fc9c8..92d8b5d80 100644
--- a/src/conf/MANIFEST.MF
+++ b/src/conf/MANIFEST.MF
@@ -20,4 +20,4 @@ Export-Package: org.joda.time;version=2.2,
  org.joda.time.format;version=2.2,
  org.joda.time.tz;version=2.2
 Bundle-License: Apache 2.0
-Bundle-DocURL: http://joda-time.sourceforge.net/
+Bundle-DocURL: http://www.joda.org/joda-time/
diff --git a/src/site/resources/download.html b/src/site/resources/download.html
new file mode 100644
index 000000000..4eef86acc
--- /dev/null
+++ b/src/site/resources/download.html
@@ -0,0 +1,6 @@
+<head>
+<title>OpenGamma</title>
+<meta http-equiv="REFRESH" content="0;url=http://sourceforge.net/projects/joda-time/files/joda-time/">
+</head>
+<body></body>
+</html>
diff --git a/src/site/site.xml b/src/site/site.xml
index 81c04225c..1b8ab6657 100644
--- a/src/site/site.xml
+++ b/src/site/site.xml
@@ -3,19 +3,19 @@
   <publishDate position="navigation-bottom" format="yyyy-MM-dd"/>
   <bannerLeft>
     <name>Joda.org</name>
-    <href>http://joda.sourceforge.net/</href>
+    <href>http://www.joda.org/</href>
   </bannerLeft>
   <bannerRight>
     <name>Joda-Time</name>
-    <href>http://joda-time.sourceforge.net/</href>
+    <href>http://www.joda.org/joda-time/</href>
   </bannerRight>
 
   <body>
     <links>
-      <item name="Joda-Time" href="/index.html"/>
-      <item name="JSP tags" href="/contrib/jsptags/index.html"/>
-      <item name="Hibernate" href="/contrib/hibernate/index.html"/>
-      <item name="I18N" href="/contrib/i18n/index.html"/>
+      <item name="Joda-Time" href="index.html"/>
+      <item name="JSP tags" href="http://www.joda.org/joda-time-jsptags/"/>
+      <item name="Hibernate" href="http://www.joda.org/joda-time-hibernate/"/>
+      <item name="I18N" href="http://www.joda.org/joda-time-i18n/"/>
     </links>
 
     <menu name="Joda Time">
@@ -26,7 +26,7 @@
       <item name="Related projects" href="related.html"/>
       <item name="Javadoc" href="apidocs/index.html"/>
       <item name="License" href="license.html"/>
-      <item name="Download" href="https://sourceforge.net/projects/joda-time/files/joda-time/"/>
+      <item name="Download" href="download.html"/>
     </menu>
 
     <menu name="Key concepts">
@@ -51,18 +51,18 @@
     </menu>
 
     <menu name="Development">
-      <item name="GitHub (Source code)" href="https://github.com/JodaOrg/joda-time"/>
-      <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
+      <item name="GitHub" href="https://github.com/JodaOrg/joda-time"/>
       <item name="Test results" href="surefire-report.html"/>
       <item name="Mailing lists" href="mail-lists.html"/>
+      <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
     </menu>
 
     <menu name="Joda">
-      <item name="Joda home" href="http://joda.sourceforge.net"/>
-      <item name="Beans" href="http://joda-beans.sourceforge.net/index.html"/>
-      <item name="Convert" href="http://joda-convert.sourceforge.net/index.html"/>
-      <item name="Money" href="http://joda-money.sourceforge.net/index.html"/>
-      <item name="Primitives" href="http://joda-primitives.sourceforge.net/index.html"/>
+      <item name="Joda home" href="http://www.joda.org"/>
+      <item name="Beans" href="http://www.joda.org/joda-beans/"/>
+      <item name="Convert" href="http://www.joda.org/joda-convert/"/>
+      <item name="Money" href="http://www.joda.org/joda-money/"/>
+      <item name="Primitives" href="http://www.joda.org/joda-primitives/"/>
     </menu>
 
     <menu ref="reports"/>
@@ -73,7 +73,9 @@
   </body>
 
   <poweredBy>
-    <logo name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"
-        img="http://sourceforge.net/sflogo.php?group_id=274452&amp;type=2" width="125" height="37" />
+    <logo name="Maven" href="http://maven.apache.org/"
+          img="http://maven.apache.org/images/logos/maven-feather.png"/>
+    <logo name="GitHub" href="https://github.com/JodaOrg/joda-time"
+          img="http://www.joda.org/images/github.png"/>
   </poweredBy>
 </project>
diff --git a/src/site/xdoc/index.xml b/src/site/xdoc/index.xml
index cd310d50d..5e5a0b5aa 100644
--- a/src/site/xdoc/index.xml
+++ b/src/site/xdoc/index.xml
@@ -55,7 +55,7 @@ public boolean isJoinedInLastThreeMonths(<a href="apidocs/org/joda/time/DateTime
 }
 -->
 Version 2.2 was released on 2013-03-08 -
-<a href="https://sourceforge.net/projects/joda-time/files/joda-time/2.2/">Download now</a>
+<a href="download.html">Download now</a>
 </p>
 </section>
 
@@ -122,24 +122,25 @@ Joda-Time is licenced under the business friendly <a href="license.html">Apache
 </p>
 </section>
 
+
 <section name="Documentation">
 <p>
 Various documentation is available:
 <ul>
 <li>Two user guides - <a href="quickstart.html">quick</a> and <a href="userguide.html">full</a></li>
 <li>The key concepts and chronology documents in the left navigation area</li>
-<li>The javadoc for the <a href="apidocs/index.html">current release</a></li>
-<li>The javadoc for the <a href="apidocs/index.html">latest source code</a></li>
-<li>A <a href="faq.html">FAQ</a> list</li>
+<li>The <a href="apidocs/index.html">Javadoc</a></li>
 <li>Information on <a href="installation.html">downloading and installing</a> Joda-Time</li>
+<li>The <a href="faq.html">FAQ</a> list</li>
 <li>The <a href="https://github.com/JodaOrg/joda-time">GitHub</a> source repository</li>
 </ul>
 </p>
 </section>
 
+
 <section name="Releases">
 <p>
-<a href="https://sourceforge.net/projects/joda-time/files/joda-time/2.2/">Release 2.2</a>
+<a href="download.html">Release 2.2</a>
 is the current latest release.
 This release is an evolution of the 1.x codebase, not a major rewrite.
 It is considered stable and worthy of the 2.x tag.
@@ -159,6 +160,9 @@ We will support the 2.x product line using standard Java mechanisms.
 The main public API will remain backwards compatible for both source and binary in the 2.x stream.
 The version number will change to 3.0 to indicate a significant change in compatibility.
 </p>
+<p>
+Available in <a href="http://search.maven.org/#artifactdetails|joda-time|joda-time|2.2|jar">Maven Central</a>.
+</p>
 
 <p>
 <a href="https://sourceforge.net/projects/joda-time/files/joda-time/1.6.2/">Release 1.6.2</a>
@@ -170,14 +174,19 @@ releases in the v1.x product line.
 
 </section>
 
+
 <section name="Support">
 <p>
 Support on bugs, library usage or enhancement requests is available on a best efforts basis.
-The best approach is to use <a href="https://github.com/JodaOrg/joda-time/issues/">GitHub issues</a> and Pull Requests.
 </p>
 <p>
-Alternative approaches include the joda-interest <a href="mail-lists.html">mailing list</a> (subscription required)
-and the joda-time <a href="http://sourceforge.net/projects/joda-time/forums/forum/337835">forum</a>.
+To suggest enhancements or contribute, please <a href="https://github.com/JodaOrg/joda-time">fork the source code</a> on GitHub.
+Alternatively, use GitHub <a href="https://github.com/JodaOrg/joda-time/issues">issues</a>.
+</p>
+<p>
+The older mechanisms of the joda-interest <a href="mail-lists.html">mailing list</a>
+and the joda-time <a href="http://sourceforge.net/projects/joda-time/forums/forum/337835">forums</a>
+do still exist, but are deprecated.
 </p>
 <p>
 <br />
diff --git a/src/site/xdoc/installation.xml b/src/site/xdoc/installation.xml
index ccdb040dd..ec883ead4 100644
--- a/src/site/xdoc/installation.xml
+++ b/src/site/xdoc/installation.xml
@@ -11,7 +11,7 @@
 <section name="Download and Installation">
 <p>
 To use Joda-Time you need to
-<a href="http://sourceforge.net/projects/joda-time/files/joda-time/">download the latest version</a>.
+<a href="download.html">download the latest version</a>.
 The download will contain the joda-time jar file.
 Once you add this to your classpath you will be able to use Joda-Time.
 </p>
diff --git a/src/site/xdoc/related.xml b/src/site/xdoc/related.xml
index 624e36eae..647d57cf4 100644
--- a/src/site/xdoc/related.xml
+++ b/src/site/xdoc/related.xml
@@ -16,11 +16,11 @@ A number of libraries and applications are now built using Joda-Time.
 <ul>
 <li><a href="http://usertype.sourceforge.net/">Extended Hibernate support</a>
 A set of classes to link Joda-Time to databases using Hibernate.</li>
-<li><a href="http://joda-time.sourceforge.net/contrib/hibernate/index.html">Original Hibernate support</a>
+<li><a href="http://www.joda.org/joda-time-hibernate/">Original Hibernate support</a>
 The original set of classes to link Joda-Time to databases using Hibernate (UserType project is newer and better maintained).</li>
-<li><a href="http://joda-time.sourceforge.net/contrib/jsptags/index.html">JSP tag support</a>
+<li><a href="http://www.joda.org/joda-time-jsptags/">JSP tag support</a>
 A tag library in the style of JSTL to allow Joda-Time classes to be used in JSP.</li>
-<li><a href="http://joda-time.sourceforge.net/contrib/i18n/index.html">I18N support</a>
+<li><a href="http://www.joda.org/joda-time-i18n/">I18N support</a>
 A simple library that provides additional internationalization data for Joda-Time.</li>
 <li><a href="http://objectlabkit.sourceforge.net/">ObjectLab Holiday calculation</a>
 Support for working and non-working days, plus how to calculate and resolve holidays, from a finance industry perspective.</li>
diff --git a/src/site/xdoc/tz_update.xml b/src/site/xdoc/tz_update.xml
index 73ca6933a..c28d3b144 100644
--- a/src/site/xdoc/tz_update.xml
+++ b/src/site/xdoc/tz_update.xml
@@ -14,7 +14,7 @@
 Time zones are a concept driven by the political situation in each country around the world.
 As such, they change frequently, and often at short notice.
 In order to manage this, Joda-Time uses the internationally recognised
-<a href="http://www.twinsun.com/tz/tz-link.htm">tz database</a>, which is also used
+<a href="http://www.iana.org/time-zones">tz database</a>, which is also used
 in most operating systems and the JDK itself.
 </p>
 <p>
@@ -30,22 +30,23 @@ that you can update the raw data and recompile the jar at any time.
 <section name="Updating the time zone data">
 <p>
 Firstly, download the latest version of the data files from
-<a href="http://www.twinsun.com/tz/tz-link.htm">tz database</a>. At the time of writing,
-you need to pick the 'FTP distribution' or 'HTTP mirror' links.
+<a href="http://www.iana.org/time-zones">tz database</a>.
+Ensure you select the "Data" download which comes as a tar.gz.
 </p>
 <p>
-Secondly, you need a source code download of Joda-Time, available via
-<a href="http://sourceforge.net/projects/joda-time/files/joda-time/">sourceforge</a>.
+Secondly, you need a <a href="download.html">source code download</a> of Joda-Time.
 </p>
 <p>
 Thirdly, you must take the time zone data files from step one, and replace those in the Joda-Time download.
-They are located at <code>{root}/src/java/org/joda/time/tz/src</code>.
+They are located at <code>{root}/src/main/java/org/joda/time/tz/src</code>.
 Note that only <i>some</i> of the files need to be copied across.
 </p>
 <p>
-Finally, recompile the Joda-Time jar file using ant.
-Simply type <code>ant jar</code> in the root directory.
-You may want to rename the produced jar file to remind you that it has been updated.
+Fourthly, change the version number in the pom.xml file to indicate that it is a non-standard release.
+</p>
+<p>
+Finally, recompile the Joda-Time jar file using maven.
+Simply type <code>mvn package</code> in the root directory.
 </p>
 
 </section>
diff --git a/src/site/xdoc/upgradeto100.xml b/src/site/xdoc/upgradeto100.xml
index ff0047b07..b0443ef5c 100644
--- a/src/site/xdoc/upgradeto100.xml
+++ b/src/site/xdoc/upgradeto100.xml
@@ -33,25 +33,25 @@ of restrictions. If the license cause you problems please contact the mailing li
 Incompatible changes since 0.99
 -------------------------------
 Deprecated methods removed.
-See http://joda-time.sourceforge.net/upgradeto099.html for 0.98 to 0.99 changes
+See http://www.joda.org/joda-time/upgradeto099.html for 0.98 to 0.99 changes
 
 
 Deprecations since 0.99
 -----------------------
 None
-See http://joda-time.sourceforge.net/upgradeto099.html for 0.98 to 0.99 changes
+See http://www.joda.org/joda-time/upgradeto099.html for 0.98 to 0.99 changes
 
 
 Bug fixes since 0.99
 --------------------
 None
-See http://joda-time.sourceforge.net/upgradeto099.html for 0.98 to 0.99 changes
+See http://www.joda.org/joda-time/upgradeto099.html for 0.98 to 0.99 changes
 
 
 Enhancements since 0.99
 -----------------------
 None
-See http://joda-time.sourceforge.net/upgradeto099.html for 0.98 to 0.99 changes
+See http://www.joda.org/joda-time/upgradeto099.html for 0.98 to 0.99 changes
 
 </source>
 </p>
diff --git a/src/site/xdoc/upgradeto140.xml b/src/site/xdoc/upgradeto140.xml
index 4978c46bd..fa5db0756 100644
--- a/src/site/xdoc/upgradeto140.xml
+++ b/src/site/xdoc/upgradeto140.xml
@@ -30,7 +30,7 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
 *  Please also check out our related projects   *
-* http://joda-time.sourceforge.net/related.html *
+* http://www.joda.org/joda-time/related.html *
 
 
 Enhancements since 1.3
diff --git a/src/site/xdoc/upgradeto150.xml b/src/site/xdoc/upgradeto150.xml
index d2734704c..7caefa0af 100644
--- a/src/site/xdoc/upgradeto150.xml
+++ b/src/site/xdoc/upgradeto150.xml
@@ -30,7 +30,7 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
 *  Please also check out our related projects   *
-* http://joda-time.sourceforge.net/related.html *
+* http://www.joda.org/joda-time/related.html *
 
 
 Enhancements since 1.4
diff --git a/src/site/xdoc/upgradeto151.xml b/src/site/xdoc/upgradeto151.xml
index e112520b6..38b965077 100644
--- a/src/site/xdoc/upgradeto151.xml
+++ b/src/site/xdoc/upgradeto151.xml
@@ -31,7 +31,7 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
 *  Please also check out our related projects   *
-* http://joda-time.sourceforge.net/related.html *
+* http://www.joda.org/joda-time/related.html *
 
 
 Enhancements since 1.5
diff --git a/src/site/xdoc/upgradeto152.xml b/src/site/xdoc/upgradeto152.xml
index 993090f45..a8583c60a 100644
--- a/src/site/xdoc/upgradeto152.xml
+++ b/src/site/xdoc/upgradeto152.xml
@@ -31,7 +31,7 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
 *  Please also check out our related projects   *
-* http://joda-time.sourceforge.net/related.html *
+* http://www.joda.org/joda-time/related.html *
 
 
 Enhancements since 1.5
diff --git a/src/site/xdoc/upgradeto160.xml b/src/site/xdoc/upgradeto160.xml
index f930734b7..1f3b4da4e 100644
--- a/src/site/xdoc/upgradeto160.xml
+++ b/src/site/xdoc/upgradeto160.xml
@@ -30,7 +30,7 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
 **  Please also check out our related projects   **
-** http://joda-time.sourceforge.net/related.html **
+** http://www.joda.org/joda-time/related.html **
 
 ********************************************************************
  The next release will probably be v2.0
diff --git a/src/site/xdoc/upgradeto161.xml b/src/site/xdoc/upgradeto161.xml
index 5200f4738..653d5d2d3 100644
--- a/src/site/xdoc/upgradeto161.xml
+++ b/src/site/xdoc/upgradeto161.xml
@@ -31,7 +31,7 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
 **  Please also check out our related projects   **
-** http://joda-time.sourceforge.net/related.html **
+** http://www.joda.org/joda-time/related.html **
 
 
 Compatibility with 1.6
diff --git a/src/site/xdoc/upgradeto162.xml b/src/site/xdoc/upgradeto162.xml
index 4fa0c6a3c..1160dcd0f 100644
--- a/src/site/xdoc/upgradeto162.xml
+++ b/src/site/xdoc/upgradeto162.xml
@@ -31,7 +31,7 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
 ** Please also check out our related projects **
-** http://joda-time.sourceforge.net/related.html **
+** http://www.joda.org/joda-time/related.html **
 
 
 Compatibility with 1.6.1
diff --git a/src/site/xdoc/upgradeto200.xml b/src/site/xdoc/upgradeto200.xml
index 548d76f4b..e5549b1e6 100644
--- a/src/site/xdoc/upgradeto200.xml
+++ b/src/site/xdoc/upgradeto200.xml
@@ -39,7 +39,7 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
 **  Please also check out our related projects   **
-** http://joda-time.sourceforge.net/related.html **
+** http://www.joda.org/joda-time/related.html **
 
 
 Enhancements since 1.6
diff --git a/src/site/xdoc/upgradeto210.xml b/src/site/xdoc/upgradeto210.xml
index bf0839cf4..7ee52edbf 100644
--- a/src/site/xdoc/upgradeto210.xml
+++ b/src/site/xdoc/upgradeto210.xml
@@ -30,7 +30,7 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
 **  Please also check out our related projects   **
-** http://joda-time.sourceforge.net/related.html **
+** http://www.joda.org/joda-time/related.html **
 
 
 Enhancements since 2.0
diff --git a/src/site/xdoc/upgradeto220.xml b/src/site/xdoc/upgradeto220.xml
index bda5ed784..786a9702b 100644
--- a/src/site/xdoc/upgradeto220.xml
+++ b/src/site/xdoc/upgradeto220.xml
@@ -28,7 +28,7 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
 **  Please also check out our related projects   **
-** http://joda-time.sourceforge.net/related.html **
+** http://www.joda.org/joda-time/related.html **
 
 
 Enhancements since 2.1

From bbb38a06988303ab97beb72da9850a0e6426b9f5 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 16 Aug 2013 18:18:10 +0100
Subject: [PATCH 42/43] Add additional clirr config

---
 pom.xml | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/pom.xml b/pom.xml
index a4738b3b7..4ecf1a22c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -358,6 +358,8 @@
         <version>2.3</version>
         <configuration>
           <comparisonVersion>2.2</comparisonVersion>
+          <minSeverity>info</minSeverity>
+          <logResults>true</logResults>
         </configuration>
       </plugin>
     </plugins>

From b0fcbb950326cbb47452670de9e666ca119ef53d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 16 Aug 2013 18:18:49 +0100
Subject: [PATCH 43/43] Release v2.3

---
 README.md                      |   4 +-
 pom.xml                        |   2 +-
 src/conf/MANIFEST.MF           |  20 ++---
 src/site/xdoc/index.xml        |  10 +--
 src/site/xdoc/installation.xml |   1 +
 src/site/xdoc/upgradeto230.xml | 139 +++++++++++++++++++++++++++++++++
 6 files changed, 158 insertions(+), 18 deletions(-)
 create mode 100644 src/site/xdoc/upgradeto230.xml

diff --git a/README.md b/README.md
index 03378a852..59122d501 100644
--- a/README.md
+++ b/README.md
@@ -47,11 +47,11 @@ Various documentation is available:
 
 
 ### Releases
-[Release 2.2](http://www.joda.org/joda-time/download.html) is the current latest release.
+[Release 2.3](http://www.joda.org/joda-time/download.html) is the current latest release.
 This release is considered stable and worthy of the 1.x tag.
 It depends on JDK 1.5 or later.
 
-Available in the [Maven Central repository](http://search.maven.org/#artifactdetails|joda-time|joda-time|2.2|jar)
+Available in the [Maven Central repository](http://search.maven.org/#artifactdetails|joda-time|joda-time|2.3|jar)
 
 
 ### Related projects
diff --git a/pom.xml b/pom.xml
index 4ecf1a22c..eb2e4c095 100644
--- a/pom.xml
+++ b/pom.xml
@@ -9,7 +9,7 @@
   <artifactId>joda-time</artifactId>
   <packaging>jar</packaging>
   <name>Joda-Time</name>
-  <version>2.3-SNAPSHOT</version>
+  <version>2.3</version>
   <description>Date and time library to replace JDK date handling</description>
   <url>http://www.joda.org/joda-time/</url>
 
diff --git a/src/conf/MANIFEST.MF b/src/conf/MANIFEST.MF
index 92d8b5d80..c5ce028c5 100644
--- a/src/conf/MANIFEST.MF
+++ b/src/conf/MANIFEST.MF
@@ -2,22 +2,22 @@ Package: org.joda.time
 Extension-Name: joda-time
 Specification-Title: Joda-Time
 Specification-Vendor: Joda.org
-Specification-Version: 2.2
+Specification-Version: 2.3
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time
-Implementation-Version: 2.2
+Implementation-Version: 2.3
 Implementation-Vendor-Id: org.joda
 Bundle-ManifestVersion: 2
 Bundle-Vendor: Joda.org
 Bundle-Name: Joda-Time
 Bundle-SymbolicName: joda-time
-Bundle-Version: 2.2
-Export-Package: org.joda.time;version=2.2,
- org.joda.time.base;version=2.2,
- org.joda.time.chrono;version=2.2,
- org.joda.time.convert;version=2.2,
- org.joda.time.field;version=2.2,
- org.joda.time.format;version=2.2,
- org.joda.time.tz;version=2.2
+Bundle-Version: 2.3
+Export-Package: org.joda.time;version=2.3,
+ org.joda.time.base;version=2.3,
+ org.joda.time.chrono;version=2.3,
+ org.joda.time.convert;version=2.3,
+ org.joda.time.field;version=2.3,
+ org.joda.time.format;version=2.3,
+ org.joda.time.tz;version=2.3
 Bundle-License: Apache 2.0
 Bundle-DocURL: http://www.joda.org/joda-time/
diff --git a/src/site/xdoc/index.xml b/src/site/xdoc/index.xml
index 5e5a0b5aa..ba85bae14 100644
--- a/src/site/xdoc/index.xml
+++ b/src/site/xdoc/index.xml
@@ -54,7 +54,7 @@ public boolean isJoinedInLastThreeMonths(<a href="apidocs/org/joda/time/DateTime
   return last3Months.contains(datetimeJoined);
 }
 -->
-Version 2.2 was released on 2013-03-08 -
+Version 2.3 was released on 2013-08-16 -
 <a href="download.html">Download now</a>
 </p>
 </section>
@@ -140,14 +140,14 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="download.html">Release 2.2</a>
+<a href="download.html">Release 2.3</a>
 is the current latest release.
 This release is an evolution of the 1.x codebase, not a major rewrite.
 It is considered stable and worthy of the 2.x tag.
 </p>
 <p>
-Version 2.2 is a bugfix release compatible with version 2.1.
-See the <a href="upgradeto220.html">upgrade notes</a> for full details.
+Version 2.3 is a bugfix release compatible with version 2.2.
+See the <a href="upgradeto230.html">upgrade notes</a> for full details.
 </p>
 <p>
 Version 2.x is almost completely source and binary compatible with version 1.x.
@@ -161,7 +161,7 @@ The main public API will remain backwards compatible for both source and binary
 The version number will change to 3.0 to indicate a significant change in compatibility.
 </p>
 <p>
-Available in <a href="http://search.maven.org/#artifactdetails|joda-time|joda-time|2.2|jar">Maven Central</a>.
+Available in <a href="http://search.maven.org/#artifactdetails|joda-time|joda-time|2.3|jar">Maven Central</a>.
 </p>
 
 <p>
diff --git a/src/site/xdoc/installation.xml b/src/site/xdoc/installation.xml
index ec883ead4..fe4f8275b 100644
--- a/src/site/xdoc/installation.xml
+++ b/src/site/xdoc/installation.xml
@@ -22,6 +22,7 @@ of the source code suitable for linking to the jar file in IDEs such as Eclipse.
 <p>
 The release notes for upgraders can be found here:
 <ul>
+<li><a href="upgradeto230.html">Version 2.3</a> - upgrade from Version 2.2</li>
 <li><a href="upgradeto220.html">Version 2.2</a> - upgrade from Version 2.1</li>
 <li><a href="upgradeto210.html">Version 2.1</a> - upgrade from Version 2.0</li>
 <li><a href="upgradeto200.html">Version 2.0</a> - upgrade from Version 1.6</li>
diff --git a/src/site/xdoc/upgradeto230.xml b/src/site/xdoc/upgradeto230.xml
new file mode 100644
index 000000000..dd3973922
--- /dev/null
+++ b/src/site/xdoc/upgradeto230.xml
@@ -0,0 +1,139 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Upgrade from 2.2 to 2.3</title>
+  <author>Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="Upgrade">
+<p>
+These are the release notes and advice for upgrading Joda-Time from version 2.2 to version 2.3.
+<source>
+Joda-Time version 2.3
+---------------------
+
+Joda-Time is a date and time handling library that seeks to replace the JDK
+Date and Calendar classes.
+
+This release contains enhancements, bug fixes and a time zone update.
+The release runs on JDK 5 or later.
+
+Joda-Time is licensed under the business-friendly Apache License Version 2.
+This is the same license as all of Apache, plus other open source projects such as Spring.
+The intent is to make the code available to the Java community with the minimum
+of restrictions. If the license causes you problems please contact the mailing list.
+
+**  Please also check out our related projects   **
+** http://www.joda.org/joda-time/related.html **
+
+
+Enhancements since 2.2
+----------------------
+- Interval/MutableInterval .isEqual() [#20]
+  Add method to compare intervals ignoring the chronology
+  https://github.com/JodaOrg/joda-time/issues/20
+
+- Chronology classes now define equals methods [#36]
+  Previously, the Chronology classes relied on caching in factory methods
+  to guarantee instances were singletons
+  Now, there are dedicated, normal, equals methods
+  This will aid weird cases where deserialization or similar avoids the caches
+  It will make no difference to most users
+
+- Maximum size for pattern cache [#49]
+  Sets a maximum size for the cache to avoid memory issues
+
+- Add LocalDateTime.toDate(TimeZone) [#48]
+  Provides an alternate way to create a java.util.Date that avoids some synchronization
+
+- Home page moved
+  http://www.joda.org/joda-time
+
+
+Compatibility with 2.2
+----------------------
+Build system - Yes
+
+Binary compatible - Yes
+
+Source compatible - Yes
+
+Serialization compatible - Yes
+
+Data compatible - Yes, except
+ - DateTimeZone data updated to version 2013d
+
+Semantic compatible - Yes, except
+ - DateTimeZone is now limited to offsets from -23:59:59.999 to +23:59:59.999
+
+ - BasicChronology now defines an equals method
+   This which would affect you if you subclassed it (unlikely)
+
+ - GJChronology now has a minimum cutover instant of 0001-01-01 (Gregorian)
+   Its unlikely you have it set earlier than this
+   If you did your code was broken anyway
+
+
+Deprecations since 2.2
+----------------------
+- DateMidnight [#41]
+  This class is flawed in concept
+  The time of midnight occasionally does not occur in some time-zones
+  This is a result of a daylight savings time from 00:00 to 01:00
+  DateMidnight is essentially a DateTime with a time locked to midnight
+  Such a concept is more generally a poor one to use, given LocalDate
+  Replace DateMidnight with LocalDate
+  Or replace it with DateTime, perhaps using the withTimeAtStartOfDay() method
+
+
+Bug fixes since 2.2
+-------------------
+- ZoneInfoCompiler and DateTimeZoneBuilder multi-threading [#18]
+  A thread local variable was previously only initialised in one thread causing NPE
+  https://github.com/JodaOrg/joda-time/issues/18
+
+- Short time-zone name parsing failed to match the longest name
+  This affected two short names where one is a short form of the second such as "UT" and "UTC"
+
+- Days.daysBetween fails for MonthDay [#22]
+  Incorrect calculation around leap years
+
+- DateTimeZone failed to validate offsets [#43]
+  Previously, there was little validation, resulting in the ability to create large offsets
+  Those offsets could fail in other parts of the library
+  Now, it is limited to -23:59:59.999 to +23:59:59.999
+
+- DateTimeZone.forOffsetHoursMinutes failed to allow offsets from -00:01 to -00:59 [#42]
+  The forOffsetHoursMinutes() method could not create an offset  from -00:01 to -00:59
+  This was due to an inappropriate design
+  A backwards compatible change to the input handling has been made
+  forOffsetHoursMinutes(0, -15) now creates -00:15
+
+- DateTimeFormatter.parseInto [#21]
+  Fix parseInto() where it obtains the default year for parsing from the ReadWritableInstant
+  Previously, the wrong year could be obtained at the start or end of the year in non UTC zones
+  Now obtains the year from the ReadWritableInstant using the chronology of the ReadWritableInstant
+
+- Better thread-safety in ISODateTimeFormat [#45]
+
+- Fix GJChronology.plus/minus across cutover and year zero [#28]
+  When subtracting a number of years from a date in the GJChronology there are two considerations
+  The cutover date might be crossed, and year zero might be crossed (there is no year zero in GJ)
+  Previously, each were handled separately, but not together. Now it is fixed
+  As part of this change, the minimum cutover instant was set to 0001-01-01 (Gregorian)
+
+
+Scala
+--------
+Joda-Time uses annotations from Joda-Convert.
+In the Java programming language, this dependency is optional, however in Scala it is not.
+Scala users must manually add the Joda-Convert v1.2 dependency.
+</source>
+</p>
+</section>
+
+</body>
+</document>