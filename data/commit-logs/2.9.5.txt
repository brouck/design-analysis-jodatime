From 569fe0b4cc7db61af8d1b95e2f688b3543f46374 Mon Sep 17 00:00:00 2001
From: Kaj Hejer <kaj.hejer@usit.uio.no>
Date: Wed, 1 Jun 2016 11:25:59 +0200
Subject: [PATCH 01/25] Added norwegian localization

---
 .../joda/time/format/messages_no.properties   | 22 +++++++++++++++++++
 1 file changed, 22 insertions(+)
 create mode 100644 src/main/java/org/joda/time/format/messages_no.properties

diff --git a/src/main/java/org/joda/time/format/messages_no.properties b/src/main/java/org/joda/time/format/messages_no.properties
new file mode 100644
index 000000000..dacda841a
--- /dev/null
+++ b/src/main/java/org/joda/time/format/messages_no.properties
@@ -0,0 +1,22 @@
+PeriodFormat.space=\ 
+PeriodFormat.comma=,
+PeriodFormat.commandand=,og
+PeriodFormat.commaspaceand=, og
+PeriodFormat.commaspace=,\ 
+PeriodFormat.spaceandspace=\ og\ 
+PeriodFormat.year=\ \u00e5r
+PeriodFormat.years=\ \u00e5r
+PeriodFormat.month=\ m\u00e5ned
+PeriodFormat.months=\ m\u00e5neder
+PeriodFormat.week=\ uke
+PeriodFormat.weeks=\ uker
+PeriodFormat.day=\ dag
+PeriodFormat.days=\ dager
+PeriodFormat.hour=\ time
+PeriodFormat.hours=\ timer
+PeriodFormat.minute=\ minutt
+PeriodFormat.minutes=\ minutter
+PeriodFormat.second=\ sekund
+PeriodFormat.seconds=\ sekunder
+PeriodFormat.millisecond=\ millisekund
+PeriodFormat.milliseconds=\ millisekunder

From 2e27ba998265f5d761b63306b7ae0a3f1cdffcbc Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 13 Jun 2016 20:30:17 +0100
Subject: [PATCH 02/25] Add Norwegian period translations

Update following PR
Fixes #378
---
 RELEASE-NOTES.txt | 5 +++++
 pom.xml           | 4 ++++
 2 files changed, 9 insertions(+)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 414939f5f..f62cb3585 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -13,6 +13,11 @@ This is the same license as all of Apache, plus other open source projects such
 **  Please also check out our related projects   **
 ** http://www.joda.org/joda-time/related.html **
 
+Changes in 2.9.5
+----------------
+ - Add Norwegian period translations [#378]
+
+
 Changes in 2.9.4
 ----------------
  - DateTimeZone data updated to version 2016d
diff --git a/pom.xml b/pom.xml
index 41356f303..92a51facf 100644
--- a/pom.xml
+++ b/pom.xml
@@ -140,6 +140,10 @@
       <name>Vsevolod Ivanov</name>
       <url>https://github.com/seva-ask</url>
     </contributor>
+    <contributor>
+      <name>kajh</name>
+      <url>https://github.com/kajh</url>
+    </contributor>
     <contributor>
       <name>Ing. Jan Kalab</name>
       <url>https://github.com/Pitel</url>

From c866452a78b537a4459ccde2693eb0db1aaa08eb Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 13 Jun 2016 20:33:57 +0100
Subject: [PATCH 03/25] Add Norwegian period translations

Update following PR
Fixes #378
---
 pom.xml | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/pom.xml b/pom.xml
index 92a51facf..582d340da 100644
--- a/pom.xml
+++ b/pom.xml
@@ -124,6 +124,10 @@
       <name>haguenau</name>
       <url>https://github.com/haguenau</url>
     </contributor>
+    <contributor>
+      <name>Kaj Hejer</name>
+      <url>https://github.com/kajh</url>
+    </contributor>
     <contributor>
       <name>Rowan Hill</name>
       <url>https://github.com/rowanhill</url>
@@ -140,10 +144,6 @@
       <name>Vsevolod Ivanov</name>
       <url>https://github.com/seva-ask</url>
     </contributor>
-    <contributor>
-      <name>kajh</name>
-      <url>https://github.com/kajh</url>
-    </contributor>
     <contributor>
       <name>Ing. Jan Kalab</name>
       <url>https://github.com/Pitel</url>

From 5714b9360e324f8bbc47bed424cfe613f82e931b Mon Sep 17 00:00:00 2001
From: Afif Ahmed <getafif22@gmail.com>
Date: Wed, 1 Jun 2016 21:08:09 +0530
Subject: [PATCH 04/25] Duration class dividedBy method RoundingMode support

Added dividedBy(long,RoundingMode) method in Duration.java.
Unit tests for the aforesaid method have also been added.
---
 src/main/java/org/joda/time/Duration.java     | 19 ++++++++++++
 .../java/org/joda/time/field/FieldUtils.java  | 25 +++++++++++++++
 .../org/joda/time/TestDuration_Basics.java    | 26 ++++++++++++++++
 .../org/joda/time/field/TestFieldUtils.java   | 31 +++++++++++++++++++
 4 files changed, 101 insertions(+)

diff --git a/src/main/java/org/joda/time/Duration.java b/src/main/java/org/joda/time/Duration.java
index 15fe52d0c..da2c70552 100644
--- a/src/main/java/org/joda/time/Duration.java
+++ b/src/main/java/org/joda/time/Duration.java
@@ -16,6 +16,7 @@
 package org.joda.time;
 
 import java.io.Serializable;
+import java.math.RoundingMode;
 
 import org.joda.convert.FromString;
 import org.joda.time.base.BaseDuration;
@@ -505,6 +506,24 @@ public Duration dividedBy(long divisor) {
         return new Duration(FieldUtils.safeDivide(getMillis(), divisor));
     }
 
+    /**
+     * Returns a new duration with its length divided by the
+     * specified divisor. RoundingMode can be specified
+     * This instance is immutable and is not altered.
+     * <p>
+     * If the divisor is one, this instance is returned.
+     *
+     * @param divisor the divisor to divide this one by
+     * @param roundingMode type of rounding desired
+     * @return the new duration instance
+     */
+    public Duration dividedBy(long divisor,RoundingMode roundingMode) {
+        if(divisor==1) {
+            return this;
+        }
+        return new Duration(FieldUtils.safeDivide(getMillis(),divisor,roundingMode));
+    }
+
     /**
      * Returns a new duration with this length negated.
      * This instance is immutable and is not altered.
diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java
index 36b0b2d29..ce74c7575 100644
--- a/src/main/java/org/joda/time/field/FieldUtils.java
+++ b/src/main/java/org/joda/time/field/FieldUtils.java
@@ -15,6 +15,9 @@
  */
 package org.joda.time.field;
 
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+
 import org.joda.time.DateTimeField;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.IllegalFieldValueException;
@@ -192,6 +195,28 @@ public static long safeDivide(long dividend, long divisor) {
         return dividend / divisor;
     }
 
+    /**
+     * Divides the dividend by divisor. Rounding of result occurs
+     * as per the roundingMode.
+     *
+     * @param dividend the dividend
+     * @param divisor the divisor
+     * @param roundingMode the desired rounding mode
+     * @return the division result as per the specified rounding mode
+     * @throws ArithmeticException if the operation overflows or the divisor is zero
+     */
+
+    public static long safeDivide(long dividend, long divisor, RoundingMode roundingMode) {
+        if (dividend == Long.MIN_VALUE && divisor == -1L) {
+            throw new ArithmeticException("Multiplication overflows a long: " + dividend + " / " + divisor);
+        }
+
+        BigDecimal dividendBigDecimal = new BigDecimal(dividend);
+        BigDecimal divisorBigDecimal = new BigDecimal(divisor);
+
+        return dividendBigDecimal.divide(divisorBigDecimal, roundingMode).longValue();
+    }
+
     /**
      * Casts to an int throwing an exception if overflow occurs.
      * 
diff --git a/src/test/java/org/joda/time/TestDuration_Basics.java b/src/test/java/org/joda/time/TestDuration_Basics.java
index 1abfa8e77..8e7333440 100644
--- a/src/test/java/org/joda/time/TestDuration_Basics.java
+++ b/src/test/java/org/joda/time/TestDuration_Basics.java
@@ -19,6 +19,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
+import java.math.RoundingMode;
 import java.util.Locale;
 import java.util.TimeZone;
 
@@ -704,6 +705,31 @@ public void testDividedBy_long2() {
         assertSame(test, result);
     }
 
+    //-----------------------------------------------------------------------
+    public void testDividedByRoundingMode_long1() {
+        Duration test = new Duration(246L);
+        Duration result = test.dividedBy(2L, RoundingMode.UNNECESSARY);
+        assertEquals(123L,result.getMillis());
+    }
+
+    public void testDividedByRoundingMode_long2() {
+        Duration test = new Duration(123L);
+        Duration result = test.dividedBy(2L, RoundingMode.FLOOR);
+        assertEquals(61L,result.getMillis());
+    }
+
+    public void testDividedByRoundingMode_long3() {
+        Duration test = new Duration(123L);
+        Duration result = test.dividedBy(7L, RoundingMode.CEILING);
+        assertEquals(18L,result.getMillis());
+    }
+
+    public void testDividedByRoundingMode_long4() {
+        Duration test = new Duration(33L);
+        Duration result = test.dividedBy(1L,RoundingMode.FLOOR);
+        assertSame(test,result);
+    }
+
     //-----------------------------------------------------------------------
     public void testNegated_long1() {
         Duration test = new Duration(246L);
diff --git a/src/test/java/org/joda/time/field/TestFieldUtils.java b/src/test/java/org/joda/time/field/TestFieldUtils.java
index 0d1328c38..be57a28b8 100644
--- a/src/test/java/org/joda/time/field/TestFieldUtils.java
+++ b/src/test/java/org/joda/time/field/TestFieldUtils.java
@@ -15,6 +15,8 @@
  */
 package org.joda.time.field;
 
+import java.math.RoundingMode;
+
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
@@ -321,4 +323,33 @@ public void testSafeDivideLongLong() {
         }
     }
 
+    //--------------------------------
+    public void testSafeDivideRoundingModeLong()
+    {
+        assertEquals(3L,FieldUtils.safeDivide(15L, 5L, RoundingMode.UNNECESSARY));
+        assertEquals(59L, FieldUtils.safeDivide(179L, 3L, RoundingMode.FLOOR));
+        assertEquals(60L, FieldUtils.safeDivide(179L, 3L, RoundingMode.CEILING));
+        assertEquals(60L, FieldUtils.safeDivide(179L, 3L, RoundingMode.HALF_UP));
+        assertEquals(-60L, FieldUtils.safeDivide(-179L, 3L, RoundingMode.HALF_UP));
+        assertEquals(60L, FieldUtils.safeDivide(179L, 3L, RoundingMode.HALF_DOWN));
+        assertEquals(-60L, FieldUtils.safeDivide(-179L, 3L, RoundingMode.HALF_DOWN));
+
+        assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L,RoundingMode.UNNECESSARY));
+        assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L,RoundingMode.UNNECESSARY));
+        assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L,RoundingMode.UNNECESSARY));
+
+        try {
+            FieldUtils.safeDivide(Long.MIN_VALUE, -1L,RoundingMode.UNNECESSARY);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeDivide(1L, 0L,RoundingMode.UNNECESSARY);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+    }
+
 }

From 57224c530e407fdaab7b451641acd5b177953dde Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 13 Jun 2016 20:44:31 +0100
Subject: [PATCH 05/25] Add Duration.dividedBy(long,RoundingMode)

Fix formatting
Fixes #69, fixes #379
---
 RELEASE-NOTES.txt                               |  2 ++
 pom.xml                                         |  4 ++++
 src/main/java/org/joda/time/Duration.java       | 12 ++++++------
 .../java/org/joda/time/field/FieldUtils.java    |  8 +++-----
 .../java/org/joda/time/TestDuration_Basics.java | 10 +++++-----
 .../org/joda/time/field/TestFieldUtils.java     | 17 ++++++++---------
 6 files changed, 28 insertions(+), 25 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index f62cb3585..dada63b2a 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -17,6 +17,8 @@ Changes in 2.9.5
 ----------------
  - Add Norwegian period translations [#378]
 
+ - Add Duration.dividedBy(long,RoundingMode) [#69, #379]
+
 
 Changes in 2.9.4
 ----------------
diff --git a/pom.xml b/pom.xml
index 582d340da..eae102154 100644
--- a/pom.xml
+++ b/pom.xml
@@ -54,6 +54,10 @@
       <name>Adrian Acala</name>
       <url>https://github.com/AdrianAcala</url>
     </contributor>
+    <contributor>
+      <name>Afif Ahmed</name>
+      <url>https://github.com/a7i7</url>
+    </contributor>
     <contributor>
       <name>Guy Allard</name>
     </contributor>
diff --git a/src/main/java/org/joda/time/Duration.java b/src/main/java/org/joda/time/Duration.java
index da2c70552..624b4aa1e 100644
--- a/src/main/java/org/joda/time/Duration.java
+++ b/src/main/java/org/joda/time/Duration.java
@@ -508,20 +508,20 @@ public Duration dividedBy(long divisor) {
 
     /**
      * Returns a new duration with its length divided by the
-     * specified divisor. RoundingMode can be specified
+     * specified divisor. {@code RoundingMode} can be specified.
      * This instance is immutable and is not altered.
      * <p>
      * If the divisor is one, this instance is returned.
      *
-     * @param divisor the divisor to divide this one by
-     * @param roundingMode type of rounding desired
+     * @param divisor  the divisor to divide this one by
+     * @param roundingMode  the type of rounding desired
      * @return the new duration instance
      */
-    public Duration dividedBy(long divisor,RoundingMode roundingMode) {
-        if(divisor==1) {
+    public Duration dividedBy(long divisor, RoundingMode roundingMode) {
+        if (divisor == 1) {
             return this;
         }
-        return new Duration(FieldUtils.safeDivide(getMillis(),divisor,roundingMode));
+        return new Duration(FieldUtils.safeDivide(getMillis(), divisor, roundingMode));
     }
 
     /**
diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java
index ce74c7575..aea3288fd 100644
--- a/src/main/java/org/joda/time/field/FieldUtils.java
+++ b/src/main/java/org/joda/time/field/FieldUtils.java
@@ -199,13 +199,12 @@ public static long safeDivide(long dividend, long divisor) {
      * Divides the dividend by divisor. Rounding of result occurs
      * as per the roundingMode.
      *
-     * @param dividend the dividend
-     * @param divisor the divisor
-     * @param roundingMode the desired rounding mode
+     * @param dividend  the dividend
+     * @param divisor  the divisor
+     * @param roundingMode  the desired rounding mode
      * @return the division result as per the specified rounding mode
      * @throws ArithmeticException if the operation overflows or the divisor is zero
      */
-
     public static long safeDivide(long dividend, long divisor, RoundingMode roundingMode) {
         if (dividend == Long.MIN_VALUE && divisor == -1L) {
             throw new ArithmeticException("Multiplication overflows a long: " + dividend + " / " + divisor);
@@ -213,7 +212,6 @@ public static long safeDivide(long dividend, long divisor, RoundingMode rounding
 
         BigDecimal dividendBigDecimal = new BigDecimal(dividend);
         BigDecimal divisorBigDecimal = new BigDecimal(divisor);
-
         return dividendBigDecimal.divide(divisorBigDecimal, roundingMode).longValue();
     }
 
diff --git a/src/test/java/org/joda/time/TestDuration_Basics.java b/src/test/java/org/joda/time/TestDuration_Basics.java
index 8e7333440..216ac1214 100644
--- a/src/test/java/org/joda/time/TestDuration_Basics.java
+++ b/src/test/java/org/joda/time/TestDuration_Basics.java
@@ -709,25 +709,25 @@ public void testDividedBy_long2() {
     public void testDividedByRoundingMode_long1() {
         Duration test = new Duration(246L);
         Duration result = test.dividedBy(2L, RoundingMode.UNNECESSARY);
-        assertEquals(123L,result.getMillis());
+        assertEquals(123L, result.getMillis());
     }
 
     public void testDividedByRoundingMode_long2() {
         Duration test = new Duration(123L);
         Duration result = test.dividedBy(2L, RoundingMode.FLOOR);
-        assertEquals(61L,result.getMillis());
+        assertEquals(61L, result.getMillis());
     }
 
     public void testDividedByRoundingMode_long3() {
         Duration test = new Duration(123L);
         Duration result = test.dividedBy(7L, RoundingMode.CEILING);
-        assertEquals(18L,result.getMillis());
+        assertEquals(18L, result.getMillis());
     }
 
     public void testDividedByRoundingMode_long4() {
         Duration test = new Duration(33L);
-        Duration result = test.dividedBy(1L,RoundingMode.FLOOR);
-        assertSame(test,result);
+        Duration result = test.dividedBy(1L, RoundingMode.FLOOR);
+        assertSame(test, result);
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/test/java/org/joda/time/field/TestFieldUtils.java b/src/test/java/org/joda/time/field/TestFieldUtils.java
index be57a28b8..fb9946a3c 100644
--- a/src/test/java/org/joda/time/field/TestFieldUtils.java
+++ b/src/test/java/org/joda/time/field/TestFieldUtils.java
@@ -323,10 +323,9 @@ public void testSafeDivideLongLong() {
         }
     }
 
-    //--------------------------------
-    public void testSafeDivideRoundingModeLong()
-    {
-        assertEquals(3L,FieldUtils.safeDivide(15L, 5L, RoundingMode.UNNECESSARY));
+    //-----------------------------------------------------------------------
+    public void testSafeDivideRoundingModeLong() {
+        assertEquals(3L, FieldUtils.safeDivide(15L, 5L, RoundingMode.UNNECESSARY));
         assertEquals(59L, FieldUtils.safeDivide(179L, 3L, RoundingMode.FLOOR));
         assertEquals(60L, FieldUtils.safeDivide(179L, 3L, RoundingMode.CEILING));
         assertEquals(60L, FieldUtils.safeDivide(179L, 3L, RoundingMode.HALF_UP));
@@ -334,18 +333,18 @@ public void testSafeDivideRoundingModeLong()
         assertEquals(60L, FieldUtils.safeDivide(179L, 3L, RoundingMode.HALF_DOWN));
         assertEquals(-60L, FieldUtils.safeDivide(-179L, 3L, RoundingMode.HALF_DOWN));
 
-        assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L,RoundingMode.UNNECESSARY));
-        assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L,RoundingMode.UNNECESSARY));
-        assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L,RoundingMode.UNNECESSARY));
+        assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L, RoundingMode.UNNECESSARY));
+        assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L, RoundingMode.UNNECESSARY));
+        assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L, RoundingMode.UNNECESSARY));
 
         try {
-            FieldUtils.safeDivide(Long.MIN_VALUE, -1L,RoundingMode.UNNECESSARY);
+            FieldUtils.safeDivide(Long.MIN_VALUE, -1L, RoundingMode.UNNECESSARY);
             fail();
         } catch (ArithmeticException e) {
         }
 
         try {
-            FieldUtils.safeDivide(1L, 0L,RoundingMode.UNNECESSARY);
+            FieldUtils.safeDivide(1L, 0L, RoundingMode.UNNECESSARY);
             fail();
         } catch (ArithmeticException e) {
         }

From ac49bf6dc694550eff859159c1ac9fc33ba1b3e7 Mon Sep 17 00:00:00 2001
From: john9x <devyatyh@gmail.com>
Date: Tue, 28 Jun 2016 17:01:28 +0500
Subject: [PATCH 06/25] TimeZone Database 2016e

---
 RELEASE-NOTES.txt                             |  2 +
 pom.xml                                       |  2 +-
 src/main/java/org/joda/time/tz/src/Readme.txt |  2 +-
 src/main/java/org/joda/time/tz/src/africa     | 90 ++++++++++++++++++-
 src/main/java/org/joda/time/tz/src/antarctica | 24 ++---
 src/main/java/org/joda/time/tz/src/asia       |  2 +-
 .../java/org/joda/time/tz/src/australasia     |  4 +-
 src/main/java/org/joda/time/tz/src/europe     |  3 +
 .../java/org/joda/time/tz/src/northamerica    | 14 +--
 .../java/org/joda/time/tz/src/southamerica    | 16 ++--
 10 files changed, 125 insertions(+), 34 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index dada63b2a..06ffd337c 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -19,6 +19,8 @@ Changes in 2.9.5
 
  - Add Duration.dividedBy(long,RoundingMode) [#69, #379]
 
+ - DateTimeZone data updated to version 2016e
+
 
 Changes in 2.9.4
 ----------------
diff --git a/pom.xml b/pom.xml
index eae102154..63e783e2d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -852,6 +852,6 @@
     <!-- Other properties -->
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
-    <tz.database.version>2016d</tz.database.version>
+    <tz.database.version>2016e</tz.database.version>
   </properties>
 </project>
diff --git a/src/main/java/org/joda/time/tz/src/Readme.txt b/src/main/java/org/joda/time/tz/src/Readme.txt
index 74a874bd4..c90d217d8 100644
--- a/src/main/java/org/joda/time/tz/src/Readme.txt
+++ b/src/main/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public IANA time zone database,
-http://www.iana.org/time-zones, version 2016d.
+http://www.iana.org/time-zones, version 2016e.
diff --git a/src/main/java/org/joda/time/tz/src/africa b/src/main/java/org/joda/time/tz/src/africa
index f20d21602..547e21589 100644
--- a/src/main/java/org/joda/time/tz/src/africa
+++ b/src/main/java/org/joda/time/tz/src/africa
@@ -343,6 +343,45 @@ Rule	Egypt	2007	only	-	Sep	Thu>=1	24:00	0	-
 # decision to abandon DST permanently.  See Ahram Online 2015-04-24.
 # http://english.ahram.org.eg/NewsContent/1/64/128509/Egypt/Politics-/Sisi-cancels-daylight-saving-time-in-Egypt.aspx
 
+# From Steffen Thorsen (2016-04-29):
+# Egypt will have DST from July 7 until the end of October....
+# http://english.ahram.org.eg/NewsContentP/1/204655/Egypt/Daylight-savings-time-returning-to-Egypt-on--July.aspx
+# http://www.nileinternational.net/en/?p=25806
+# ... EgyptAir seems to have assumed DST to start in April (like it previously
+# did in 2010), and therefore this obviously causes problems with the schedules:
+# http://www.egyptair.com/en/about-egyptair/news-and-press/Pages/CANCELLATION%20OF%20DAYLIGHT%20SAVING%20TIME.aspx
+#
+# From Paul Eggert (2016-04-29):
+# For now, guess fall transitions will be October's last Thursday at
+# 24:00 and spring transitions will follow rules used 1995-2010 and be
+# April's last Thursday at 24:00, and guess a switch to standard time at
+# 24:00 the last Thursday before Ramadan, and back to DST at 00:00 the
+# first Friday after Ramadan.  To implement this,
+# transition dates for 2016 through 2068 were determined by running
+# the following program under GNU Emacs 24.5, with the results integrated
+# by hand into the table below.  Ramadan again intrudes on the guessed
+# DST starting in 2069, but that's beyond our somewhat-arbitrary cutoff here.
+# (let ((islamic-year 1437))
+#   (while (< islamic-year 1491)
+#     (let ((a (calendar-islamic-to-absolute (list 9 1 islamic-year)))
+#           (b (calendar-islamic-to-absolute (list 10 1 islamic-year)))
+#           (friday 5))
+#       (while (/= friday (mod a 7))
+#         (setq a (1- a)))
+#       (while (/= friday (mod b 7))
+#         (setq b (1+ b)))
+#       (setq a (1- a))
+#       (setq b (1- b))
+#       (setq a (calendar-gregorian-from-absolute a))
+#       (setq b (calendar-gregorian-from-absolute b))
+#       (insert
+#        (format
+#         (concat "Rule\tEgypt\t%d\tonly\t-\t%s\t%2d\t24:00\t0\t-\n"
+#                 "Rule\tEgypt\t%d\tonly\t-\t%s\t%2d\t24:00\t1:00\tS\n")
+#         (car (cdr (cdr a))) (calendar-month-name (car a) t) (car (cdr a))
+#         (car (cdr (cdr b))) (calendar-month-name (car b) t) (car (cdr b)))))
+#     (setq islamic-year (+ 1 islamic-year))))
+
 Rule	Egypt	2008	only	-	Aug	lastThu	24:00	0	-
 Rule	Egypt	2009	only	-	Aug	20	24:00	0	-
 Rule	Egypt	2010	only	-	Aug	10	24:00	0	-
@@ -352,6 +391,53 @@ Rule	Egypt	2014	only	-	May	15	24:00	1:00	S
 Rule	Egypt	2014	only	-	Jun	26	24:00	0	-
 Rule	Egypt	2014	only	-	Jul	31	24:00	1:00	S
 Rule	Egypt	2014	only	-	Sep	lastThu	24:00	0	-
+Rule	Egypt	2016	only	-	Jul	 7	24:00	1:00	S
+Rule	Egypt	2016	2035	-	Oct	lastThu	24:00	0	-
+Rule	Egypt	2017	2019	-	Apr	lastThu	24:00	1:00	S
+Rule	Egypt	2017	only	-	May	25	24:00	0	-
+Rule	Egypt	2017	only	-	Jun	29	24:00	1:00	S
+Rule	Egypt	2018	only	-	May	10	24:00	0	-
+Rule	Egypt	2018	only	-	Jun	14	24:00	1:00	S
+Rule	Egypt	2019	only	-	May	 2	24:00	0	-
+Rule	Egypt	2019	only	-	Jun	 6	24:00	1:00	S
+Rule	Egypt	2020	only	-	May	28	24:00	1:00	S
+Rule	Egypt	2021	only	-	May	13	24:00	1:00	S
+Rule	Egypt	2022	only	-	May	 5	24:00	1:00	S
+Rule	Egypt	2023	2051	-	Apr	lastThu	24:00	1:00	S
+Rule	Egypt	2036	only	-	Oct	16	24:00	0	-
+Rule	Egypt	2037	only	-	Oct	 8	24:00	0	-
+Rule	Egypt	2038	only	-	Sep	23	24:00	0	-
+Rule	Egypt	2039	only	-	Sep	15	24:00	0	-
+Rule	Egypt	2039	only	-	Oct	20	24:00	1:00	S
+Rule	Egypt	2039	max	-	Oct	lastThu	24:00	0	-
+Rule	Egypt	2040	only	-	Sep	 6	24:00	0	-
+Rule	Egypt	2040	only	-	Oct	11	24:00	1:00	S
+Rule	Egypt	2041	only	-	Aug	22	24:00	0	-
+Rule	Egypt	2041	only	-	Sep	26	24:00	1:00	S
+Rule	Egypt	2042	only	-	Aug	14	24:00	0	-
+Rule	Egypt	2042	only	-	Sep	18	24:00	1:00	S
+Rule	Egypt	2043	only	-	Aug	 6	24:00	0	-
+Rule	Egypt	2043	only	-	Sep	10	24:00	1:00	S
+Rule	Egypt	2044	only	-	Jul	21	24:00	0	-
+Rule	Egypt	2044	only	-	Aug	25	24:00	1:00	S
+Rule	Egypt	2045	only	-	Jul	13	24:00	0	-
+Rule	Egypt	2045	only	-	Aug	17	24:00	1:00	S
+Rule	Egypt	2046	only	-	Jun	28	24:00	0	-
+Rule	Egypt	2046	only	-	Aug	 9	24:00	1:00	S
+Rule	Egypt	2047	only	-	Jun	20	24:00	0	-
+Rule	Egypt	2047	only	-	Jul	25	24:00	1:00	S
+Rule	Egypt	2048	only	-	Jun	11	24:00	0	-
+Rule	Egypt	2048	only	-	Jul	16	24:00	1:00	S
+Rule	Egypt	2049	only	-	May	27	24:00	0	-
+Rule	Egypt	2049	only	-	Jul	 1	24:00	1:00	S
+Rule	Egypt	2050	only	-	May	19	24:00	0	-
+Rule	Egypt	2050	only	-	Jun	23	24:00	1:00	S
+Rule	Egypt	2051	only	-	May	11	24:00	0	-
+Rule	Egypt	2051	only	-	Jun	15	24:00	1:00	S
+Rule	Egypt	2052	only	-	May	30	24:00	1:00	S
+Rule	Egypt	2053	only	-	May	22	24:00	1:00	S
+Rule	Egypt	2054	only	-	May	14	24:00	1:00	S
+Rule	Egypt	2055	max	-	Apr	lastThu	24:00	1:00	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Cairo	2:05:09 -	LMT	1900 Oct
@@ -858,11 +944,11 @@ Rule	Morocco	2009	only	-	Aug	21	 0:00	0	-
 Rule	Morocco	2010	only	-	May	 2	 0:00	1:00	S
 Rule	Morocco	2010	only	-	Aug	 8	 0:00	0	-
 Rule	Morocco	2011	only	-	Apr	 3	 0:00	1:00	S
-Rule	Morocco	2011	only	-	Jul	31	 0	0	-
+Rule	Morocco	2011	only	-	Jul	31	 0:00	0	-
 Rule	Morocco	2012	2013	-	Apr	lastSun	 2:00	1:00	S
-Rule	Morocco	2012	only	-	Sep	30	 3:00	0	-
 Rule	Morocco	2012	only	-	Jul	20	 3:00	0	-
 Rule	Morocco	2012	only	-	Aug	20	 2:00	1:00	S
+Rule	Morocco	2012	only	-	Sep	30	 3:00	0	-
 Rule	Morocco	2013	only	-	Jul	 7	 3:00	0	-
 Rule	Morocco	2013	only	-	Aug	10	 2:00	1:00	S
 Rule	Morocco	2013	max	-	Oct	lastSun	 3:00	0	-
diff --git a/src/main/java/org/joda/time/tz/src/antarctica b/src/main/java/org/joda/time/tz/src/antarctica
index 2af088f0b..a53783295 100644
--- a/src/main/java/org/joda/time/tz/src/antarctica
+++ b/src/main/java/org/joda/time/tz/src/antarctica
@@ -13,7 +13,7 @@
 #
 # Except for the French entries,
 # I made up all time zone abbreviations mentioned here; corrections welcome!
-# FORMAT is 'zzz' and GMTOFF is 0 for locations while uninhabited.
+# FORMAT is '-00' and GMTOFF is 0 for locations while uninhabited.
 
 # Argentina - year-round bases
 # Belgrano II, Confin Coast, -770227-0343737, since 1972-02-05
@@ -67,22 +67,22 @@
 # http://www.timeanddate.com/news/time/antartica-time-changes-2010.html
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Casey	0	-	zzz	1969
+Zone Antarctica/Casey	0	-	-00	1969
 			8:00	-	AWST	2009 Oct 18  2:00
 						# Australian Western Std Time
 			11:00	-	CAST	2010 Mar  5  2:00  # Casey Time
 			8:00	-	AWST	2011 Oct 28  2:00
 			11:00	-	CAST	2012 Feb 21 17:00u
 			8:00	-	AWST
-Zone Antarctica/Davis	0	-	zzz	1957 Jan 13
+Zone Antarctica/Davis	0	-	-00	1957 Jan 13
 			7:00	-	DAVT	1964 Nov    # Davis Time
-			0	-	zzz	1969 Feb
+			0	-	-00	1969 Feb
 			7:00	-	DAVT	2009 Oct 18  2:00
 			5:00	-	DAVT	2010 Mar 10 20:00u
 			7:00	-	DAVT	2011 Oct 28  2:00
 			5:00	-	DAVT	2012 Feb 21 20:00u
 			7:00	-	DAVT
-Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
+Zone Antarctica/Mawson	0	-	-00	1954 Feb 13
 			6:00	-	MAWT	2009 Oct 18  2:00 # Mawson Time
 			5:00	-	MAWT
 # References:
@@ -137,7 +137,7 @@ Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
 #	fishing stations operated variously 1819/1931
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Kerguelen	0	-	zzz	1950 # Port-aux-Français
+Zone Indian/Kerguelen	0	-	-00	1950 # Port-aux-Français
 			5:00	-	TFT	# ISO code TF Time
 #
 # year-round base in the main continent
@@ -148,9 +148,9 @@ Zone Indian/Kerguelen	0	-	zzz	1950 # Port-aux-Français
 # It was destroyed by fire on 1952-01-14.
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/DumontDUrville 0 -	zzz	1947
+Zone Antarctica/DumontDUrville 0 -	-00	1947
 			10:00	-	PMT	1952 Jan 14 # Port-Martin Time
-			0	-	zzz	1956 Nov
+			0	-	-00	1956 Nov
 			10:00	-	DDUT	# Dumont-d'Urville Time
 
 # France & Italy - year-round base
@@ -176,7 +176,7 @@ Zone Antarctica/DumontDUrville 0 -	zzz	1947
 # was established on 1957-01-29.  Since Syowa station is still the main
 # station of Japan, it's appropriate for the principal location.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Syowa	0	-	zzz	1957 Jan 29
+Zone Antarctica/Syowa	0	-	-00	1957 Jan 29
 			3:00	-	SYOT	# Syowa Time
 # See:
 # NIPR Antarctic Research Activities (1999-08-17)
@@ -226,7 +226,7 @@ Rule	Troll	2005	max	-	Mar	lastSun	1:00u	2:00	CEST
 # Remove the following line when uncommenting the above '#Rule' lines.
 Rule	Troll	2004	max	-	Oct	lastSun	1:00u	0:00	UTC
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Troll	0	-	zzz	2005 Feb 12
+Zone Antarctica/Troll	0	-	-00	2005 Feb 12
 			0:00	Troll	%s
 
 # Poland - year-round base
@@ -267,7 +267,7 @@ Zone Antarctica/Troll	0	-	zzz	2005 Feb 12
 # happened to be during their visit.  So we still don't really know what time
 # it is at Vostok.  But we'll guess UTC+6.
 #
-Zone Antarctica/Vostok	0	-	zzz	1957 Dec 16
+Zone Antarctica/Vostok	0	-	-00	1957 Dec 16
 			6:00	-	VOST	# Vostok time
 
 # S Africa - year-round bases
@@ -300,7 +300,7 @@ Zone Antarctica/Vostok	0	-	zzz	1957 Dec 16
 # <http://webexhibits.org/daylightsaving/g.html> says Rothera is -03 all year.
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Rothera	0	-	zzz	1976 Dec  1
+Zone Antarctica/Rothera	0	-	-00	1976 Dec  1
 			-3:00	-	ROTT	# Rothera time
 
 # Uruguay - year round base
diff --git a/src/main/java/org/joda/time/tz/src/asia b/src/main/java/org/joda/time/tz/src/asia
index 75d429842..533e2186d 100644
--- a/src/main/java/org/joda/time/tz/src/asia
+++ b/src/main/java/org/joda/time/tz/src/asia
@@ -146,7 +146,7 @@ Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
 			3:00	-	BAKT	1957 Mar    # Baku Time
 			4:00 RussiaAsia BAK%sT	1991 Mar 31  2:00s
 			3:00	1:00	BAKST	1991 Aug 30 # independence
-			3:00 RussiaAsia	AZ%sT	1992 Sep lastSat 23:00
+			3:00 RussiaAsia	AZ%sT	1992 Sep lastSun  2:00s
 			4:00	-	AZT	1996     # Azerbaijan Time
 			4:00	EUAsia	AZ%sT	1997
 			4:00	Azer	AZ%sT
diff --git a/src/main/java/org/joda/time/tz/src/australasia b/src/main/java/org/joda/time/tz/src/australasia
index 55f44cfcb..0b33f67ed 100644
--- a/src/main/java/org/joda/time/tz/src/australasia
+++ b/src/main/java/org/joda/time/tz/src/australasia
@@ -243,11 +243,11 @@ Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
 # will produce a binary file with an [A]EST-type as the first 32-bit type;
 # this is required for correct handling of times before 1916 by
 # pre-2013 versions of localtime.
-Zone Antarctica/Macquarie 0	-	zzz	1899 Nov
+Zone Antarctica/Macquarie 0	-	-00	1899 Nov
 			10:00	-	AEST	1916 Oct  1  2:00
 			10:00	1:00	AEDT	1917 Feb
 			10:00	Aus	AE%sT	1919 Apr  1  0:00s
-			0	-	zzz	1948 Mar 25
+			0	-	-00	1948 Mar 25
 			10:00	Aus	AE%sT	1967
 			10:00	AT	AE%sT	2010 Apr  4  3:00
 			11:00	-	MIST	# Macquarie I Standard Time
diff --git a/src/main/java/org/joda/time/tz/src/europe b/src/main/java/org/joda/time/tz/src/europe
index 86159f7e1..7e43bc2c2 100644
--- a/src/main/java/org/joda/time/tz/src/europe
+++ b/src/main/java/org/joda/time/tz/src/europe
@@ -2771,6 +2771,9 @@ Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14  6:00
 # approved by the Federation Council on 2016-04-20, signed by the President and
 # published as a law around 2016-04-26.
 
+# From Matt Johnson (2016-04-26):
+# http://publication.pravo.gov.ru/Document/View/0001201604260048
+
 Zone	Asia/Tomsk	 5:39:51 -	LMT	1919 Dec 22
 			 6:00	-	+06	1930 Jun 21
 			 7:00	Russia	+07/+08	1991 Mar 31  2:00s
diff --git a/src/main/java/org/joda/time/tz/src/northamerica b/src/main/java/org/joda/time/tz/src/northamerica
index 1d7395c7f..6256f970a 100644
--- a/src/main/java/org/joda/time/tz/src/northamerica
+++ b/src/main/java/org/joda/time/tz/src/northamerica
@@ -2191,39 +2191,39 @@ Rule	NT_YK	1980	2006	-	Oct	lastSun	2:00	0	S
 Rule	NT_YK	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 # aka Panniqtuuq
-Zone America/Pangnirtung 0	-	zzz	1921 # trading post est.
+Zone America/Pangnirtung 0	-	-00	1921 # trading post est.
 			-4:00	NT_YK	A%sT	1995 Apr Sun>=1  2:00
 			-5:00	Canada	E%sT	1999 Oct 31  2:00
 			-6:00	Canada	C%sT	2000 Oct 29  2:00
 			-5:00	Canada	E%sT
 # formerly Frobisher Bay
-Zone America/Iqaluit	0	-	zzz	1942 Aug # Frobisher Bay est.
+Zone America/Iqaluit	0	-	-00	1942 Aug # Frobisher Bay est.
 			-5:00	NT_YK	E%sT	1999 Oct 31  2:00
 			-6:00	Canada	C%sT	2000 Oct 29  2:00
 			-5:00	Canada	E%sT
 # aka Qausuittuq
-Zone America/Resolute	0	-	zzz	1947 Aug 31 # Resolute founded
+Zone America/Resolute	0	-	-00	1947 Aug 31 # Resolute founded
 			-6:00	NT_YK	C%sT	2000 Oct 29  2:00
 			-5:00	-	EST	2001 Apr  1  3:00
 			-6:00	Canada	C%sT	2006 Oct 29  2:00
 			-5:00	-	EST	2007 Mar 11  3:00
 			-6:00	Canada	C%sT
 # aka Kangiqiniq
-Zone America/Rankin_Inlet 0	-	zzz	1957 # Rankin Inlet founded
+Zone America/Rankin_Inlet 0	-	-00	1957 # Rankin Inlet founded
 			-6:00	NT_YK	C%sT	2000 Oct 29  2:00
 			-5:00	-	EST	2001 Apr  1  3:00
 			-6:00	Canada	C%sT
 # aka Iqaluktuuttiaq
-Zone America/Cambridge_Bay 0	-	zzz	1920 # trading post est.?
+Zone America/Cambridge_Bay 0	-	-00	1920 # trading post est.?
 			-7:00	NT_YK	M%sT	1999 Oct 31  2:00
 			-6:00	Canada	C%sT	2000 Oct 29  2:00
 			-5:00	-	EST	2000 Nov  5  0:00
 			-6:00	-	CST	2001 Apr  1  3:00
 			-7:00	Canada	M%sT
-Zone America/Yellowknife 0	-	zzz	1935 # Yellowknife founded?
+Zone America/Yellowknife 0	-	-00	1935 # Yellowknife founded?
 			-7:00	NT_YK	M%sT	1980
 			-7:00	Canada	M%sT
-Zone America/Inuvik	0	-	zzz	1953 # Inuvik founded
+Zone America/Inuvik	0	-	-00	1953 # Inuvik founded
 			-8:00	NT_YK	P%sT	1979 Apr lastSun  2:00
 			-7:00	NT_YK	M%sT	1980
 			-7:00	Canada	M%sT
diff --git a/src/main/java/org/joda/time/tz/src/southamerica b/src/main/java/org/joda/time/tz/src/southamerica
index 477a6e1cd..1c38f63d1 100644
--- a/src/main/java/org/joda/time/tz/src/southamerica
+++ b/src/main/java/org/joda/time/tz/src/southamerica
@@ -1309,7 +1309,7 @@ Zone Pacific/Easter	-7:17:28 -	LMT	1890
 # Palmer used to be supplied from Argentina.
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Palmer	0	-	zzz	1965
+Zone Antarctica/Palmer	0	-	-00	1965
 			-4:00	Arg	AR%sT	1969 Oct  5
 			-3:00	Arg	AR%sT	1982 May
 			-4:00	Chile	CL%sT
@@ -1759,16 +1759,16 @@ Zone America/Montevideo	-3:44:44 -	LMT	1898 Jun 28
 # https://actualidad.rt.com/actualidad/204758-venezuela-modificar-huso-horario-sequia-elnino
 #
 # From Paul Eggert (2016-04-15):
-# Clocks advance 30 minutes on 2016-05-01 at 02:30. See:
-# Barboza AD. Huso horario en Venezuela volverá a 4 horas menos con
-# respecto al "Greenwich". Panorama 2016-04-15 12:20 -0430.
-# http://www.panorama.com.ve/ciudad/Huso-horario-en-Venezuela-volvera-a-4-horas-menos-con-respecto-al-Greenwich-20160415-0032.html
-#
+# Clocks advance 30 minutes on 2016-05-01 at 02:30....
 # "'Venezuela's new time-zone: hours without light, hours without water,
-# hours of presidential broadcasts, hours of lines," quipped comedian
-# Jean Mary Curro ...". See: Cawthorne A, Kai D. Venezuela scraps
+# hours of presidential broadcasts, hours of lines,' quipped comedian
+# Jean Mary Curró ...". See: Cawthorne A, Kai D. Venezuela scraps
 # half-hour time difference set by Chavez. Reuters 2016-04-15 14:50 -0400
 # http://www.reuters.com/article/us-venezuela-timezone-idUSKCN0XC2BE
+#
+# From Matt Johnson (2016-04-20):
+# ... published in the official Gazette [2016-04-18], here:
+# http://historico.tsj.gob.ve/gaceta_ext/abril/1842016/E-1842016-4551.pdf
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Caracas	-4:27:44 -	LMT	1890

From 0815c2db3af376598c85336c0bdbb4ecb72439f5 Mon Sep 17 00:00:00 2001
From: Evgeniy Devyatykh <devyatyh@gmail.com>
Date: Tue, 5 Jul 2016 22:57:09 +0500
Subject: [PATCH 07/25] TimeZone Database 2016f

---
 RELEASE-NOTES.txt                             |  4 +-
 pom.xml                                       |  2 +-
 src/main/java/org/joda/time/tz/src/Readme.txt |  2 +-
 src/main/java/org/joda/time/tz/src/africa     | 84 +------------------
 src/main/java/org/joda/time/tz/src/europe     | 47 +++++++----
 5 files changed, 35 insertions(+), 104 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 06ffd337c..7a11099fd 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -19,14 +19,14 @@ Changes in 2.9.5
 
  - Add Duration.dividedBy(long,RoundingMode) [#69, #379]
 
- - DateTimeZone data updated to version 2016e
+ - DateTimeZone data updated to version 2016f
 
 
 Changes in 2.9.4
 ----------------
  - DateTimeZone data updated to version 2016d
 
- - Loading time-zone provider now occurs in a priveleged block [#327, #375]
+ - Loading time-zone provider now occurs in a privileged block [#327, #375]
 
 
 Changes in 2.9.3
diff --git a/pom.xml b/pom.xml
index 63e783e2d..cec8b338f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -852,6 +852,6 @@
     <!-- Other properties -->
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
-    <tz.database.version>2016e</tz.database.version>
+    <tz.database.version>2016f</tz.database.version>
   </properties>
 </project>
diff --git a/src/main/java/org/joda/time/tz/src/Readme.txt b/src/main/java/org/joda/time/tz/src/Readme.txt
index c90d217d8..608c5b74c 100644
--- a/src/main/java/org/joda/time/tz/src/Readme.txt
+++ b/src/main/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public IANA time zone database,
-http://www.iana.org/time-zones, version 2016e.
+http://www.iana.org/time-zones, version 2016f.
diff --git a/src/main/java/org/joda/time/tz/src/africa b/src/main/java/org/joda/time/tz/src/africa
index 547e21589..50f29d5dd 100644
--- a/src/main/java/org/joda/time/tz/src/africa
+++ b/src/main/java/org/joda/time/tz/src/africa
@@ -346,41 +346,8 @@ Rule	Egypt	2007	only	-	Sep	Thu>=1	24:00	0	-
 # From Steffen Thorsen (2016-04-29):
 # Egypt will have DST from July 7 until the end of October....
 # http://english.ahram.org.eg/NewsContentP/1/204655/Egypt/Daylight-savings-time-returning-to-Egypt-on--July.aspx
-# http://www.nileinternational.net/en/?p=25806
-# ... EgyptAir seems to have assumed DST to start in April (like it previously
-# did in 2010), and therefore this obviously causes problems with the schedules:
-# http://www.egyptair.com/en/about-egyptair/news-and-press/Pages/CANCELLATION%20OF%20DAYLIGHT%20SAVING%20TIME.aspx
-#
-# From Paul Eggert (2016-04-29):
-# For now, guess fall transitions will be October's last Thursday at
-# 24:00 and spring transitions will follow rules used 1995-2010 and be
-# April's last Thursday at 24:00, and guess a switch to standard time at
-# 24:00 the last Thursday before Ramadan, and back to DST at 00:00 the
-# first Friday after Ramadan.  To implement this,
-# transition dates for 2016 through 2068 were determined by running
-# the following program under GNU Emacs 24.5, with the results integrated
-# by hand into the table below.  Ramadan again intrudes on the guessed
-# DST starting in 2069, but that's beyond our somewhat-arbitrary cutoff here.
-# (let ((islamic-year 1437))
-#   (while (< islamic-year 1491)
-#     (let ((a (calendar-islamic-to-absolute (list 9 1 islamic-year)))
-#           (b (calendar-islamic-to-absolute (list 10 1 islamic-year)))
-#           (friday 5))
-#       (while (/= friday (mod a 7))
-#         (setq a (1- a)))
-#       (while (/= friday (mod b 7))
-#         (setq b (1+ b)))
-#       (setq a (1- a))
-#       (setq b (1- b))
-#       (setq a (calendar-gregorian-from-absolute a))
-#       (setq b (calendar-gregorian-from-absolute b))
-#       (insert
-#        (format
-#         (concat "Rule\tEgypt\t%d\tonly\t-\t%s\t%2d\t24:00\t0\t-\n"
-#                 "Rule\tEgypt\t%d\tonly\t-\t%s\t%2d\t24:00\t1:00\tS\n")
-#         (car (cdr (cdr a))) (calendar-month-name (car a) t) (car (cdr a))
-#         (car (cdr (cdr b))) (calendar-month-name (car b) t) (car (cdr b)))))
-#     (setq islamic-year (+ 1 islamic-year))))
+# From Mina Samuel (2016-07-04):
+# Egyptian government took the decision to cancel the DST,
 
 Rule	Egypt	2008	only	-	Aug	lastThu	24:00	0	-
 Rule	Egypt	2009	only	-	Aug	20	24:00	0	-
@@ -391,53 +358,6 @@ Rule	Egypt	2014	only	-	May	15	24:00	1:00	S
 Rule	Egypt	2014	only	-	Jun	26	24:00	0	-
 Rule	Egypt	2014	only	-	Jul	31	24:00	1:00	S
 Rule	Egypt	2014	only	-	Sep	lastThu	24:00	0	-
-Rule	Egypt	2016	only	-	Jul	 7	24:00	1:00	S
-Rule	Egypt	2016	2035	-	Oct	lastThu	24:00	0	-
-Rule	Egypt	2017	2019	-	Apr	lastThu	24:00	1:00	S
-Rule	Egypt	2017	only	-	May	25	24:00	0	-
-Rule	Egypt	2017	only	-	Jun	29	24:00	1:00	S
-Rule	Egypt	2018	only	-	May	10	24:00	0	-
-Rule	Egypt	2018	only	-	Jun	14	24:00	1:00	S
-Rule	Egypt	2019	only	-	May	 2	24:00	0	-
-Rule	Egypt	2019	only	-	Jun	 6	24:00	1:00	S
-Rule	Egypt	2020	only	-	May	28	24:00	1:00	S
-Rule	Egypt	2021	only	-	May	13	24:00	1:00	S
-Rule	Egypt	2022	only	-	May	 5	24:00	1:00	S
-Rule	Egypt	2023	2051	-	Apr	lastThu	24:00	1:00	S
-Rule	Egypt	2036	only	-	Oct	16	24:00	0	-
-Rule	Egypt	2037	only	-	Oct	 8	24:00	0	-
-Rule	Egypt	2038	only	-	Sep	23	24:00	0	-
-Rule	Egypt	2039	only	-	Sep	15	24:00	0	-
-Rule	Egypt	2039	only	-	Oct	20	24:00	1:00	S
-Rule	Egypt	2039	max	-	Oct	lastThu	24:00	0	-
-Rule	Egypt	2040	only	-	Sep	 6	24:00	0	-
-Rule	Egypt	2040	only	-	Oct	11	24:00	1:00	S
-Rule	Egypt	2041	only	-	Aug	22	24:00	0	-
-Rule	Egypt	2041	only	-	Sep	26	24:00	1:00	S
-Rule	Egypt	2042	only	-	Aug	14	24:00	0	-
-Rule	Egypt	2042	only	-	Sep	18	24:00	1:00	S
-Rule	Egypt	2043	only	-	Aug	 6	24:00	0	-
-Rule	Egypt	2043	only	-	Sep	10	24:00	1:00	S
-Rule	Egypt	2044	only	-	Jul	21	24:00	0	-
-Rule	Egypt	2044	only	-	Aug	25	24:00	1:00	S
-Rule	Egypt	2045	only	-	Jul	13	24:00	0	-
-Rule	Egypt	2045	only	-	Aug	17	24:00	1:00	S
-Rule	Egypt	2046	only	-	Jun	28	24:00	0	-
-Rule	Egypt	2046	only	-	Aug	 9	24:00	1:00	S
-Rule	Egypt	2047	only	-	Jun	20	24:00	0	-
-Rule	Egypt	2047	only	-	Jul	25	24:00	1:00	S
-Rule	Egypt	2048	only	-	Jun	11	24:00	0	-
-Rule	Egypt	2048	only	-	Jul	16	24:00	1:00	S
-Rule	Egypt	2049	only	-	May	27	24:00	0	-
-Rule	Egypt	2049	only	-	Jul	 1	24:00	1:00	S
-Rule	Egypt	2050	only	-	May	19	24:00	0	-
-Rule	Egypt	2050	only	-	Jun	23	24:00	1:00	S
-Rule	Egypt	2051	only	-	May	11	24:00	0	-
-Rule	Egypt	2051	only	-	Jun	15	24:00	1:00	S
-Rule	Egypt	2052	only	-	May	30	24:00	1:00	S
-Rule	Egypt	2053	only	-	May	22	24:00	1:00	S
-Rule	Egypt	2054	only	-	May	14	24:00	1:00	S
-Rule	Egypt	2055	max	-	Apr	lastThu	24:00	1:00	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Cairo	2:05:09 -	LMT	1900 Oct
diff --git a/src/main/java/org/joda/time/tz/src/europe b/src/main/java/org/joda/time/tz/src/europe
index 7e43bc2c2..cd3a0883d 100644
--- a/src/main/java/org/joda/time/tz/src/europe
+++ b/src/main/java/org/joda/time/tz/src/europe
@@ -755,6 +755,14 @@ Zone	Europe/Vienna	1:05:21 -	LMT	1893 Apr
 			1:00	EU	CE%sT
 
 # Belarus
+#
+# From Stepan Golosunov (2016-07-02):
+# http://www.lawbelarus.com/repub/sub30/texf9611.htm
+# (Act of the Cabinet of Ministers of the Republic of Belarus from
+# 1992-03-25 No. 157) ... says clocks were to be moved forward at 2:00
+# on last Sunday of March and backward at 3:00 on last Sunday of September
+# (the same as previous USSR and contemporary Russian regulations).
+#
 # From Yauhen Kharuzhy (2011-09-16):
 # By latest Belarus government act Europe/Minsk timezone was changed to
 # GMT+3 without DST (was GMT+2 with DST).
@@ -778,9 +786,6 @@ Zone	Europe/Minsk	1:50:16 -	LMT	1880
 			1:00	C-Eur	CE%sT	1944 Jul  3
 			3:00	Russia	MSK/MSD	1990
 			3:00	-	MSK	1991 Mar 31  2:00s
-			2:00	1:00	EEST	1991 Sep 29  2:00s
-			2:00	-	EET	1992 Mar 29  0:00s
-			2:00	1:00	EEST	1992 Sep 27  0:00s
 			2:00	Russia	EE%sT	2011 Mar 27  2:00s
 			3:00	-	FET	2014 Oct 26  1:00s
 			3:00	-	MSK
@@ -2723,14 +2728,22 @@ Zone Asia/Barnaul	 5:35:00 -	LMT	1919 Dec 10
 # Asia/Novosibirsk covers:
 # 54	RU-NVS	Novosibirsk Oblast
 
+# From Stepan Golosunov (2016-05-30):
+# http://asozd2.duma.gov.ru/main.nsf/(Spravka)?OpenAgent&RN=1085784-6
+# moves Novosibirsk oblast from UTC+6 to UTC+7.
+# From Stepan Golosunov (2016-07-04):
+# The law was signed yesterday and published today on
+# http://publication.pravo.gov.ru/Document/View/0001201607040064
+
 Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14  6:00
-			 6:00	-	NOVT	1930 Jun 21 # Novosibirsk Time
-			 7:00	Russia	NOV%sT	1991 Mar 31  2:00s
-			 6:00	Russia	NOV%sT	1992 Jan 19  2:00s
-			 7:00	Russia	NOV%sT	1993 May 23 # say Shanks & P.
-			 6:00	Russia	NOV%sT	2011 Mar 27  2:00s
-			 7:00	-	NOVT	2014 Oct 26  2:00s
-			 6:00	-	NOVT
+			 6:00	-	+06	1930 Jun 21
+			 7:00	Russia	+07/+08	1991 Mar 31  2:00s
+			 6:00	Russia	+06/+07	1992 Jan 19  2:00s
+			 7:00	Russia	+07/+08	1993 May 23 # say Shanks & P.
+			 6:00	Russia	+06/+07	2011 Mar 27  2:00s
+			 7:00	-	+07	2014 Oct 26  2:00s
+			 6:00	-	+06	2016 Jul 24  2:00s
+			 7:00	-	+07
 
 # From Paul Eggert (2016-03-18):
 # Asia/Tomsk covers:
@@ -2813,14 +2826,12 @@ Zone	Asia/Tomsk	 5:39:51 -	LMT	1919 Dec 22
 # realigning itself with KRAT.
 
 Zone Asia/Novokuznetsk	 5:48:48 -	LMT	1924 May  1
-			 6:00	-	KRAT	1930 Jun 21 # Krasnoyarsk Time
-			 7:00	Russia	KRA%sT	1991 Mar 31  2:00s
-			 6:00	Russia	KRA%sT	1992 Jan 19  2:00s
-			 7:00	Russia	KRA%sT	2010 Mar 28  2:00s
-			 6:00	Russia	NOV%sT	2011 Mar 27  2:00s # Novosibirsk
-			 7:00	-	NOVT	2014 Oct 26  2:00s
-			 7:00	-	KRAT	# Krasnoyarsk Time
-
+			 6:00	-	+06	1930 Jun 21
+			 7:00	Russia	+07/+08	1991 Mar 31  2:00s
+			 6:00	Russia	+06/+07	1992 Jan 19  2:00s
+			 7:00	Russia	+07/+08	2010 Mar 28  2:00s
+			 6:00	Russia	+06/+07	2011 Mar 27  2:00s
+			 7:00	-	+07
 
 # From Tim Parenti (2014-07-03), per Oscar van Vlijmen (2001-08-25):
 # Asia/Krasnoyarsk covers...

From 80c7dedc1cf7ecaf81a206cd90c8f08975ed7d3f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <stephen@opengamma.com>
Date: Thu, 21 Jul 2016 00:24:48 +0100
Subject: [PATCH 08/25] Fix bug in time-zone binary search

The fix in v2.9.2 caused problems when the time-zone being parsed
was not the last element in the input string. New approach uses up-front
grouping to reduce the search space based on the common slash separator
Fixes #386
See #332
---
 RELEASE-NOTES.txt                             |   5 +
 .../time/format/DateTimeFormatterBuilder.java | 101 ++++++++++--------
 .../format/TestDateTimeFormatterBuilder.java  | 100 +++++++++++++++++
 3 files changed, 162 insertions(+), 44 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 7a11099fd..42f31caf2 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -20,6 +20,11 @@ Changes in 2.9.5
  - Add Duration.dividedBy(long,RoundingMode) [#69, #379]
 
  - DateTimeZone data updated to version 2016f
+ 
+ - Fix bug in time-zone binary search [#332, #386]
+  The fix in v2.9.2 caused problems when the time-zone being parsed
+  was not the last element in the input string. New approach uses a
+  different approach to the problem.
 
 
 Changes in 2.9.4
diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 51ae9f481..b3fe7a3de 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -18,6 +18,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -2315,17 +2316,38 @@ public int parseInto(DateTimeParserBucket bucket, CharSequence text, int positio
 
         INSTANCE;
         private static final List<String> ALL_IDS;
+        // groups are "Europe/A", "Europe/B", "Europe/C", etc
+        // group of "" is for zones that do not have a "/" in the name
+        private static final Map<String, List<String>> GROUPED_IDS;
+        private static final List<String> BASE_GROUPED_IDS = new ArrayList<String>();
+        static final int MAX_LENGTH;
+        static final int MAX_PREFIX_LENGTH;
         static {
             ALL_IDS = new ArrayList<String>(DateTimeZone.getAvailableIDs());
             Collections.sort(ALL_IDS);
-        }
-        static final int MAX_LENGTH;
-        static {
+            GROUPED_IDS = new HashMap<String, List<String>>();
             int max = 0;
+            int maxPrefix = 0;
             for (String id : ALL_IDS) {
+                int pos = id.indexOf('/');
+                if (pos >= 0) {
+                    if (pos < id.length()) {
+                        pos++;
+                    }
+                    maxPrefix = Math.max(maxPrefix, pos);
+                    String prefix = id.substring(0, pos + 1);
+                    String suffix = id.substring(pos);
+                    if (!GROUPED_IDS.containsKey(prefix)) {
+                        GROUPED_IDS.put(prefix, new ArrayList<String>());
+                    }
+                    GROUPED_IDS.get(prefix).add(suffix);
+                } else {
+                    BASE_GROUPED_IDS.add(id);
+                }
                 max = Math.max(max, id.length());
             }
             MAX_LENGTH = max;
+            MAX_PREFIX_LENGTH = maxPrefix;
         }
 
         public int estimatePrintedLength() {
@@ -2347,43 +2369,47 @@ public int estimateParsedLength() {
         }
 
         public int parseInto(DateTimeParserBucket bucket, CharSequence text, int position) {
-            String best = null;
-            int pos = prefixedStartPosition(text, position);
-            for (int i = pos; i < ALL_IDS.size(); i++) {
-                String id = ALL_IDS.get(i);
-                if (csStartsWith(text, position, id)) {
-                    if (best == null || id.length() > best.length()) {
-                        best = id;
+            // select the base set of identifiers that do not have a slash
+            List<String> suffixSet = BASE_GROUPED_IDS;
+            // hunt for a slash only as far as the max prefix length
+            int textLen = text.length();
+            int matchLen = Math.min(textLen, position + MAX_PREFIX_LENGTH);
+            int pos = position;
+            String prefix = "";
+            for (int i = pos; i < matchLen; i++) {
+                if (text.charAt(i) == '/') {
+                    // when a slash is found, determine the prefix, such as "Europe/A" and lookup to get suffixes
+                    prefix = text.subSequence(pos, i + 1).toString();
+                    pos += prefix.length();
+                    String prefixLookup = prefix;
+                    if (i < textLen) {
+                        prefixLookup += text.charAt(i + 1);
+                    }
+                    suffixSet = GROUPED_IDS.get(prefixLookup);
+                    if (suffixSet == null) {
+                        return ~position;
                     }
-                } else {
                     break;
                 }
             }
+            // search all suffixes, hopefully a relatively small number due to prefix search
+            String best = null;
+            for (int i = 0; i < suffixSet.size(); i++) {
+                String suffix = suffixSet.get(i);
+                if (csStartsWith(text, pos, suffix)) {
+                    if (best == null || suffix.length() > best.length()) {
+                        best = suffix;
+                    }
+                }
+            }
+            // if found then store, else fail
             if (best != null) {
-                bucket.setZone(DateTimeZone.forID(best));
-                return position + best.length();
+                bucket.setZone(DateTimeZone.forID(prefix + best));
+                return pos + best.length();
             }
             return ~position;
         }
 
-        private static int prefixedStartPosition(CharSequence text, int position) {
-            int lo = 0;
-            int hi = ALL_IDS.size() - 1;
-
-            while (lo <= hi) {
-                int mid = (lo + hi) >>> 1;
-                String value = ALL_IDS.get(mid);
-                int compare = csCompare(text, position, value);
-                if (compare > 0) {
-                    hi = mid - 1;
-                } else if (compare < 0) {
-                    lo = mid + 1;
-                } else {
-                    return mid;
-                }
-            }
-            return lo;
-        }
     }
 
     //-----------------------------------------------------------------------
@@ -2617,19 +2643,6 @@ public int parseInto(DateTimeParserBucket bucket, CharSequence text, int positio
         }
     }
 
-    static int csCompare(CharSequence text, int position, String search) {
-        int matchLen = text.length() - position;
-        int searchLen = search.length();
-        int compareLen = Math.min(matchLen, searchLen);
-        for (int i = 0; i < compareLen; i++) {
-            int result = search.charAt(i) - text.charAt(position + i);
-            if (result != 0) {
-                return result;
-            }
-        }
-        return searchLen - matchLen;
-    }
-
     static boolean csStartsWith(CharSequence text, int position, String search) {
         int searchLen = search.length();
         if ((text.length() - position) < searchLen) {
diff --git a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
index 482eb75b5..d9f6f58a4 100644
--- a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
@@ -425,6 +425,26 @@ public void test_printParseZoneParis() {
         assertEquals(dt, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 Europe/Paris"));
     }
 
+    public void test_printParseZoneDawson() {  // clashes with shorter Dawson
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+            .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId();
+        DateTimeFormatter f = bld.toFormatter();
+        
+        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("America/Dawson"));
+        assertEquals("2007-03-04 12:30 America/Dawson", f.print(dt));
+        assertEquals(dt, f.parseDateTime("2007-03-04 12:30 America/Dawson"));
+    }
+
+    public void test_printParseZoneDawson_suffix() {  // clashes with shorter Dawson
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+            .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId().appendLiteral(']');
+        DateTimeFormatter f = bld.toFormatter();
+        
+        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("America/Dawson"));
+        assertEquals("2007-03-04 12:30 America/Dawson]", f.print(dt));
+        assertEquals(dt, f.parseDateTime("2007-03-04 12:30 America/Dawson]"));
+    }
+
     public void test_printParseZoneDawsonCreek() {  // clashes with shorter Dawson
         DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
             .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId();
@@ -435,6 +455,16 @@ public void test_printParseZoneDawsonCreek() {  // clashes with shorter Dawson
         assertEquals(dt, f.parseDateTime("2007-03-04 12:30 America/Dawson_Creek"));
     }
 
+    public void test_printParseZoneDawsonCreek_suffix() {  // clashes with shorter Dawson
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+            .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId().appendLiteral(']');
+        DateTimeFormatter f = bld.toFormatter();
+        
+        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("America/Dawson_Creek"));
+        assertEquals("2007-03-04 12:30 America/Dawson_Creek]", f.print(dt));
+        assertEquals(dt, f.parseDateTime("2007-03-04 12:30 America/Dawson_Creek]"));
+    }
+
     public void test_printParseZoneEtcGMT() {
         DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
                 .appendPattern("yyyy-MM-dd HH:mm ZZZ");
@@ -445,6 +475,16 @@ public void test_printParseZoneEtcGMT() {
         assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Etc/GMT"));
     }
 
+    public void test_printParseZoneEtcGMT_suffix() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+                .appendPattern("yyyy-MM-dd HH:mm ZZZ").appendLiteral(']');
+        DateTimeFormatter f = bld.toFormatter();
+
+        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("Etc/GMT"));
+        assertEquals("2007-03-04 12:30 Etc/GMT]", f.print(dt));
+        assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Etc/GMT]"));
+    }
+
     public void test_printParseZoneGMT() {
         DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
                 .appendPattern("yyyy-MM-dd HH:mm ZZZ");
@@ -455,6 +495,16 @@ public void test_printParseZoneGMT() {
         assertEquals(dt, f.parseDateTime("2007-03-04 12:30 GMT"));
     }
 
+    public void test_printParseZoneGMT_suffix() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+                .appendPattern("yyyy-MM-dd HH:mm ZZZ").appendLiteral(']');
+        DateTimeFormatter f = bld.toFormatter();
+
+        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("GMT"));
+        assertEquals("2007-03-04 12:30 Etc/GMT]", f.print(dt));
+        assertEquals(dt, f.parseDateTime("2007-03-04 12:30 GMT]"));
+    }
+
     public void test_printParseZoneEtcGMT1() {
         DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
                 .appendPattern("yyyy-MM-dd HH:mm ZZZ");
@@ -465,6 +515,56 @@ public void test_printParseZoneEtcGMT1() {
         assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Etc/GMT+1"));
     }
 
+    public void test_printParseZoneEtcGMT1_suffix() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+                .appendPattern("yyyy-MM-dd HH:mm ZZZ").appendLiteral(']');
+        DateTimeFormatter f = bld.toFormatter();
+
+        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("Etc/GMT+1"));
+        assertEquals("2007-03-04 12:30 Etc/GMT+1]", f.print(dt));
+        assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Etc/GMT+1]"));
+    }
+
+    public void test_printParseZoneEtcGMT10() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+                .appendPattern("yyyy-MM-dd HH:mm ZZZ");
+        DateTimeFormatter f = bld.toFormatter();
+
+        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("Etc/GMT+10"));
+        assertEquals("2007-03-04 12:30 Etc/GMT+10", f.print(dt));
+        assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Etc/GMT+10"));
+    }
+
+    public void test_printParseZoneEtcGMT10_suffix() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+                .appendPattern("yyyy-MM-dd HH:mm ZZZ").appendLiteral(']');
+        DateTimeFormatter f = bld.toFormatter();
+
+        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("Etc/GMT+10"));
+        assertEquals("2007-03-04 12:30 Etc/GMT+10]", f.print(dt));
+        assertEquals(dt, f.parseDateTime("2007-03-04 12:30 Etc/GMT+10]"));
+    }
+
+    public void test_printParseZoneMET() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+                .appendPattern("yyyy-MM-dd HH:mm ZZZ");
+        DateTimeFormatter f = bld.toFormatter();
+
+        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("MET"));
+        assertEquals("2007-03-04 12:30 MET", f.print(dt));
+        assertEquals(dt, f.parseDateTime("2007-03-04 12:30 MET"));
+    }
+
+    public void test_printParseZoneMET_suffix() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+                .appendPattern("yyyy-MM-dd HH:mm ZZZ").appendLiteral(']');
+        DateTimeFormatter f = bld.toFormatter();
+
+        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("MET"));
+        assertEquals("2007-03-04 12:30 MET]", f.print(dt));
+        assertEquals(dt, f.parseDateTime("2007-03-04 12:30 MET]"));
+    }
+
     public void test_printParseZoneBahiaBanderas() {
         DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
             .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId();

From 5f7609b6c98a8bfef7cadf5ae98501f8debde2e8 Mon Sep 17 00:00:00 2001
From: Jericho <githubfreebugs@attrition.org>
Date: Wed, 20 Jul 2016 21:36:05 -0600
Subject: [PATCH 09/25] Bump version at top to match last release

---
 RELEASE-NOTES.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 42f31caf2..32f22e7e2 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -1,4 +1,4 @@
-Joda-Time version 2.9.4
+Joda-Time version 2.9.5
 -----------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK

From eb693d4746b0d938a0dd669f1ca20297ecb09990 Mon Sep 17 00:00:00 2001
From: Katy Pedelty <kpedelty@google.com>
Date: Wed, 27 Jul 2016 15:03:03 -0700
Subject: [PATCH 10/25] Update documentation for Duration

---
 src/main/java/org/joda/time/Duration.java | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/main/java/org/joda/time/Duration.java b/src/main/java/org/joda/time/Duration.java
index 624b4aa1e..6ecb302c7 100644
--- a/src/main/java/org/joda/time/Duration.java
+++ b/src/main/java/org/joda/time/Duration.java
@@ -224,7 +224,7 @@ public Duration(Object duration) {
      * This returns <code>getMillis() / MILLIS_PER_DAY</code>.
      * The result is an integer division, thus excess milliseconds are truncated.
      *
-     * @return the length of the duration in standard seconds
+     * @return the length of the duration in standard days
      * @since 2.0
      */
     public long getStandardDays() {
@@ -242,7 +242,7 @@ public long getStandardDays() {
      * This returns <code>getMillis() / MILLIS_PER_HOUR</code>.
      * The result is an integer division, thus excess milliseconds are truncated.
      *
-     * @return the length of the duration in standard seconds
+     * @return the length of the duration in standard hours
      * @since 2.0
      */
     public long getStandardHours() {
@@ -257,10 +257,10 @@ public long getStandardHours() {
      * 1000 milliseconds in a second.
      * All currently supplied chronologies use this definition.
      * <p>
-     * This returns <code>getMillis() / 60000</code>.
+     * This returns <code>getMillis() / MILLIS_PER_MINUTE</code>.
      * The result is an integer division, thus excess milliseconds are truncated.
      *
-     * @return the length of the duration in standard seconds
+     * @return the length of the duration in standard minutes
      * @since 2.0
      */
     public long getStandardMinutes() {

From 836aa412608fea64a9bd66a403637dda15dcb161 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <stephen@opengamma.com>
Date: Sun, 7 Aug 2016 11:48:41 +0100
Subject: [PATCH 11/25] Fix Duration docs

Fixes #388
---
 pom.xml | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/pom.xml b/pom.xml
index cec8b338f..fc56ad3ba 100644
--- a/pom.xml
+++ b/pom.xml
@@ -198,6 +198,10 @@
     <contributor>
       <name>Blair Martin</name>
     </contributor>
+    <contributor>
+      <name>Katy P</name>
+      <url>https://github.com/katyp</url>
+    </contributor>
     <contributor>
       <name>Amling Palantir</name>
       <url>https://github.com/AmlingPalantir</url>

From 381cca4018848c2fa75ae93efd44872c3d60cd59 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <stephen@opengamma.com>
Date: Thu, 18 Aug 2016 22:51:20 +0100
Subject: [PATCH 12/25] Better debugging in time-zone builder

---
 .../org/joda/time/tz/DateTimeZoneBuilder.java | 23 +++++++++++++++++--
 1 file changed, 21 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
index a1b50a5ac..5d0501813 100644
--- a/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
+++ b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
@@ -642,7 +642,6 @@ public boolean equals(Object obj) {
             return false;
         }
 
-        /*
         public String toString() {
             return
                 "[OfYear]\n" + 
@@ -653,7 +652,6 @@ public String toString() {
                 "AdvanceDayOfWeek: " + iAdvance + '\n' +
                 "MillisOfDay: " + iMillisOfDay + '\n';
         }
-        */
 
         public void writeTo(DataOutput out) throws IOException {
             out.writeByte(iMode);
@@ -803,6 +801,11 @@ Recurrence rename(String nameKey) {
         Recurrence renameAppend(String appendNameKey) {
             return rename((iNameKey + appendNameKey).intern());
         }
+        
+        @Override
+        public String toString() {
+            return iOfYear + " named " + iNameKey + " at " + iSaveMillis;
+        }
     }
 
     /**
@@ -874,6 +877,11 @@ public long next(final long instant, int standardOffset, int saveMillis) {
 
             return next;
         }
+        
+        @Override
+        public String toString() {
+            return iFromYear + " to " + iToYear + " using " + iRecurrence;
+        }
     }
 
     private static final class Transition {
@@ -936,6 +944,11 @@ public boolean isTransitionFrom(Transition other) {
                  //iStandardOffset != other.iStandardOffset ||
                  !(iNameKey.equals(other.iNameKey)));
         }
+        
+        @Override
+        public String toString() {
+            return new DateTime(iMillis, DateTimeZone.UTC) + " " + iStandardOffset + " " + iWallOffset;
+        }
     }
 
     private static final class RuleSet {
@@ -1160,6 +1173,12 @@ public DSTZone buildTailZone(String id) {
             }
             return null;
         }
+        
+        @Override
+        public String toString() {
+            return iInitialNameKey + " initial: " + iInitialSaveMillis + " std: " + iStandardOffset +
+                    " upper: " + iUpperYear + " " + iUpperOfYear + " " + iRules;
+        }
     }
 
     private static final class DSTZone extends DateTimeZone {

From eaaff1d0687fc86a745ca8f3ea0b069b3cf54233 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <stephen@opengamma.com>
Date: Fri, 19 Aug 2016 00:14:55 +0100
Subject: [PATCH 13/25] Fix time-zone parser

Meet tzvalidate test data
Fixes #373
---
 .../org/joda/time/tz/DateTimeZoneBuilder.java  | 18 ++++++++++++++----
 .../org/joda/time/tz/ZoneInfoCompiler.java     |  5 +++--
 2 files changed, 17 insertions(+), 6 deletions(-)

diff --git a/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
index 5d0501813..0578dacfb 100644
--- a/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
+++ b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
@@ -401,12 +401,14 @@ public DateTimeZone toDateTimeZone(String id, boolean outputID) {
     private boolean addTransition(ArrayList<Transition> transitions, Transition tr) {
         int size = transitions.size();
         if (size == 0) {
+//            System.out.println("Adding   " + tr);
             transitions.add(tr);
             return true;
         }
 
         Transition last = transitions.get(size - 1);
         if (!tr.isTransitionFrom(last)) {
+//            System.out.println("Rejected " + tr);
             return false;
         }
 
@@ -423,11 +425,15 @@ private boolean addTransition(ArrayList<Transition> transitions, Transition tr)
 
         if (newLocal != lastLocal) {
             transitions.add(tr);
+//            System.out.println("Adding   " + tr);
             return true;
         }
-
-        transitions.remove(size - 1);
-        return addTransition(transitions, tr);
+        Transition previous = transitions.remove(size - 1);
+        Transition adjusted = tr.withMillis(previous.getMillis());
+//        System.out.println("Current  " + tr);
+//        System.out.println("Previous " + previous);
+//        System.out.println("Adjusted " + adjusted);
+        return addTransition(transitions, adjusted);
     }
 
     /**
@@ -932,6 +938,10 @@ public int getSaveMillis() {
             return iWallOffset - iStandardOffset;
         }
 
+        public Transition withMillis(long millis) {
+            return new Transition(millis, iNameKey, iWallOffset, iStandardOffset);
+        }
+
         /**
          * There must be a change in the millis, wall offsets or name keys.
          */
@@ -941,7 +951,7 @@ public boolean isTransitionFrom(Transition other) {
             }
             return iMillis > other.iMillis &&
                 (iWallOffset != other.iWallOffset ||
-                 //iStandardOffset != other.iStandardOffset ||
+                 iStandardOffset != other.iStandardOffset ||
                  !(iNameKey.equals(other.iNameKey)));
         }
         
diff --git a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
index f6737ea6f..84ca5b807 100644
--- a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
+++ b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
@@ -263,6 +263,7 @@ static boolean test(String id, DateTimeZone tz) {
         long end = ISOChronology.getInstanceUTC().year().set(0, 2050);
 
         int offset = tz.getOffset(millis);
+        int stdOffset = tz.getStandardOffset(millis);
         String key = tz.getNameKey(millis);
 
         List<Long> transitions = new ArrayList<Long>();
@@ -276,10 +277,10 @@ static boolean test(String id, DateTimeZone tz) {
             millis = next;
 
             int nextOffset = tz.getOffset(millis);
+            int nextStdOffset = tz.getStandardOffset(millis);
             String nextKey = tz.getNameKey(millis);
 
-            if (offset == nextOffset
-                && key.equals(nextKey)) {
+            if (offset == nextOffset && stdOffset == nextStdOffset && key.equals(nextKey)) {
                 System.out.println("*d* Error in " + tz.getID() + " "
                                    + new DateTime(millis,
                                                   ISOChronology.getInstanceUTC()));

From 909046aa9aab5fae75e2152fd6ded722a4d5aba2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <stephen@opengamma.com>
Date: Fri, 19 Aug 2016 00:24:02 +0100
Subject: [PATCH 14/25] Fix historic time-zone data

Fixes #373
---
 RELEASE-NOTES.txt | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 32f22e7e2..5854387e1 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -21,6 +21,8 @@ Changes in 2.9.5
 
  - DateTimeZone data updated to version 2016f
  
+ - Fixed minor issues with historic time-zone data [#373]
+ 
  - Fix bug in time-zone binary search [#332, #386]
   The fix in v2.9.2 caused problems when the time-zone being parsed
   was not the last element in the input string. New approach uses a

From 5ef0b60327ab92d74c554ce9f42d091544de23a9 Mon Sep 17 00:00:00 2001
From: Paul Martin <paul.martin@telekom.com>
Date: Fri, 30 Sep 2016 13:26:47 +0100
Subject: [PATCH 15/25] fixes #284 - Generate source and Javadoc artifacts for
 no-tzdb artifact

---
 pom.xml | 45 +++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 43 insertions(+), 2 deletions(-)

diff --git a/pom.xml b/pom.xml
index fc56ad3ba..7b89f726a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -9,7 +9,7 @@
   <artifactId>joda-time</artifactId>
   <packaging>jar</packaging>
   <name>Joda-Time</name>
-  <version>2.9.4</version>
+  <version>2.9.5-SNAPSHOT</version>
   <description>Date and time library to replace JDK date handling</description>
   <url>http://www.joda.org/joda-time/</url>
 
@@ -432,6 +432,28 @@
           </execution>
         </executions>
       </plugin>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>build-helper-maven-plugin</artifactId>
+        <executions>
+          <execution>
+            <id>attach-no-tzdb-javadoc</id>
+            <phase>package</phase>
+            <goals>
+              <goal>attach-artifact</goal>
+            </goals>
+            <configuration>
+              <artifacts>
+                <artifact>
+                  <file>${project.build.directory}/${project.artifactId}-${project.version}-javadoc.jar</file>
+                  <type>jar</type>
+                  <classifier>no-tzdb-javadoc</classifier>
+                </artifact>
+              </artifacts>
+            </configuration>
+          </execution>
+        </executions>
+      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-source-plugin</artifactId>
@@ -443,7 +465,20 @@
               <goal>jar-no-fork</goal>
             </goals>
           </execution>
-        </executions>
+          <execution>
+            <id>attach-no-tztb-sources</id>
+            <phase>package</phase>
+            <goals>
+              <goal>jar-no-fork</goal>
+            </goals>
+            <configuration>
+              <classifier>no-tzdb-sources</classifier>
+              <excludes>
+                <exclude>org/joda/time/tz/data/**</exclude>
+                <exclude>org/joda/time/tz/ZoneInfoCompiler*</exclude>
+              </excludes>
+            </configuration>
+          </execution>        </executions>
         <!-- work around maven bug where properties files added twice -->
         <configuration>
           <excludes>
@@ -638,6 +673,11 @@
           <artifactId>maven-toolchains-plugin</artifactId>
           <version>${maven-toolchains-plugin.version}</version>
         </plugin>
+        <plugin>
+          <groupId>org.codehaus.mojo</groupId>
+          <artifactId>build-helper-maven-plugin</artifactId>
+          <version>${build-helper-maven-plugin.version}</version>
+        </plugin>
         <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
         <plugin>
           <groupId>org.eclipse.m2e</groupId>
@@ -817,6 +857,7 @@
   <!-- ==================================================================== -->
   <properties>
     <!-- Plugin version numbers -->
+    <build-helper-maven-plugin.version>1.12</build-helper-maven-plugin.version>
     <maven-assembly-plugin.version>2.5.5</maven-assembly-plugin.version>
     <maven-changes-plugin.version>2.11</maven-changes-plugin.version>
     <maven-checkstyle-plugin.version>2.16</maven-checkstyle-plugin.version>

From 7ed094c8ce1dfa0e01a8c42e2ea4c2982bf4e5b5 Mon Sep 17 00:00:00 2001
From: Paul Martin <paul.martin@telekom.com>
Date: Fri, 30 Sep 2016 13:47:58 +0100
Subject: [PATCH 16/25] Don't attach Javadoc artifacts if Javadoc generation
 has been skipped

---
 pom.xml | 57 +++++++++++++++++++++++++++++++++++----------------------
 1 file changed, 35 insertions(+), 22 deletions(-)

diff --git a/pom.xml b/pom.xml
index 7b89f726a..50d1af0f7 100644
--- a/pom.xml
+++ b/pom.xml
@@ -432,28 +432,6 @@
           </execution>
         </executions>
       </plugin>
-      <plugin>
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>build-helper-maven-plugin</artifactId>
-        <executions>
-          <execution>
-            <id>attach-no-tzdb-javadoc</id>
-            <phase>package</phase>
-            <goals>
-              <goal>attach-artifact</goal>
-            </goals>
-            <configuration>
-              <artifacts>
-                <artifact>
-                  <file>${project.build.directory}/${project.artifactId}-${project.version}-javadoc.jar</file>
-                  <type>jar</type>
-                  <classifier>no-tzdb-javadoc</classifier>
-                </artifact>
-              </artifacts>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-source-plugin</artifactId>
@@ -852,6 +830,41 @@
         <additionalparam></additionalparam>
       </properties>
     </profile>
+    <profile>
+      <id>attach-additional-javadoc</id>
+      <activation>
+        <property>
+          <name>maven.javadoc.skip</name>
+          <value>!true</value>
+        </property>
+      </activation>
+      <build>
+        <plugins>
+          <plugin>
+            <groupId>org.codehaus.mojo</groupId>
+            <artifactId>build-helper-maven-plugin</artifactId>
+            <executions>
+              <execution>
+                <id>attach-no-tzdb-javadoc</id>
+                <phase>package</phase>
+                <goals>
+                  <goal>attach-artifact</goal>
+                </goals>
+                <configuration>
+                  <artifacts>
+                    <artifact>
+                      <file>${project.build.directory}/${project.artifactId}-${project.version}-javadoc.jar</file>
+                      <type>jar</type>
+                      <classifier>no-tzdb-javadoc</classifier>
+                    </artifact>
+                  </artifacts>
+                </configuration>
+              </execution>
+            </executions>
+          </plugin>
+        </plugins>
+      </build>
+    </profile>
   </profiles>
 
   <!-- ==================================================================== -->

From e6dd4ba04d1e16bbc9c98cfd19f330a15b6fd060 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 4 Oct 2016 10:43:02 +0100
Subject: [PATCH 17/25] Update pom.xml

---
 pom.xml | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/pom.xml b/pom.xml
index 50d1af0f7..f67adeb8e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -198,6 +198,10 @@
     <contributor>
       <name>Blair Martin</name>
     </contributor>
+    <contributor>
+      <name>Paul Martin</name>
+      <url>https://github.com/pgpx</url>
+    </contributor>
     <contributor>
       <name>Katy P</name>
       <url>https://github.com/katyp</url>

From 625c06ae84f088233f387fd14be010bde701581c Mon Sep 17 00:00:00 2001
From: John Brunton <jbrunton@zipcar.com>
Date: Fri, 14 Oct 2016 13:32:53 +0100
Subject: [PATCH 18/25] TimeZone Database 2016g

---
 RELEASE-NOTES.txt                             |   8 +-
 pom.xml                                       |   4 +-
 src/main/java/org/joda/time/tz/src/africa     |   2 +-
 src/main/java/org/joda/time/tz/src/antarctica |  59 ++--
 src/main/java/org/joda/time/tz/src/asia       | 152 +++++----
 .../java/org/joda/time/tz/src/australasia     |  26 +-
 src/main/java/org/joda/time/tz/src/backward   |   1 +
 src/main/java/org/joda/time/tz/src/etcetera   |  74 +++--
 src/main/java/org/joda/time/tz/src/europe     | 294 ++++++++++--------
 .../java/org/joda/time/tz/src/northamerica    |  37 ++-
 .../java/org/joda/time/tz/src/southamerica    |   4 +-
 11 files changed, 353 insertions(+), 308 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 5854387e1..37785588f 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -19,10 +19,10 @@ Changes in 2.9.5
 
  - Add Duration.dividedBy(long,RoundingMode) [#69, #379]
 
- - DateTimeZone data updated to version 2016f
- 
+ - DateTimeZone data updated to version 2016g
+
  - Fixed minor issues with historic time-zone data [#373]
- 
+
  - Fix bug in time-zone binary search [#332, #386]
   The fix in v2.9.2 caused problems when the time-zone being parsed
   was not the last element in the input string. New approach uses a
@@ -54,7 +54,7 @@ Changes in 2.9.2
  - Fix bug in time-zone binary search [#332]
 
  - Minor fixes to code internals [#339, #326, #344, #350, #343]
- 
+
  - Better document behaviour [#325]
 
 
diff --git a/pom.xml b/pom.xml
index f67adeb8e..672218c21 100644
--- a/pom.xml
+++ b/pom.xml
@@ -315,7 +315,7 @@
     <!-- define build -->
     <plugins>
       <plugin>
-        <groupId>org.codehaus.mojo</groupId>      
+        <groupId>org.codehaus.mojo</groupId>
         <artifactId>exec-maven-plugin</artifactId>
         <version>1.4.0</version>
         <executions>
@@ -914,6 +914,6 @@
     <!-- Other properties -->
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
-    <tz.database.version>2016f</tz.database.version>
+    <tz.database.version>2016g</tz.database.version>
   </properties>
 </project>
diff --git a/src/main/java/org/joda/time/tz/src/africa b/src/main/java/org/joda/time/tz/src/africa
index 50f29d5dd..d35aaa593 100644
--- a/src/main/java/org/joda/time/tz/src/africa
+++ b/src/main/java/org/joda/time/tz/src/africa
@@ -464,7 +464,7 @@ Zone	Africa/Monrovia	-0:43:08 -	LMT	1882
 # http://www.libyaherald.com/2013/10/24/correction-no-time-change-tomorrow/
 #
 # From Paul Eggert (2013-10-25):
-# For now, assume they're reverting to the pre-2012 rules of permanent UTC+2.
+# For now, assume they're reverting to the pre-2012 rules of permanent UT +02.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Libya	1951	only	-	Oct	14	2:00	1:00	S
diff --git a/src/main/java/org/joda/time/tz/src/antarctica b/src/main/java/org/joda/time/tz/src/antarctica
index a53783295..099583575 100644
--- a/src/main/java/org/joda/time/tz/src/antarctica
+++ b/src/main/java/org/joda/time/tz/src/antarctica
@@ -10,9 +10,7 @@
 # http://www.spri.cam.ac.uk/bob/periant.htm
 # for information.
 # Unless otherwise specified, we have no time zone information.
-#
-# Except for the French entries,
-# I made up all time zone abbreviations mentioned here; corrections welcome!
+
 # FORMAT is '-00' and GMTOFF is 0 for locations while uninhabited.
 
 # Argentina - year-round bases
@@ -29,7 +27,7 @@
 #	previously sealers and scientific personnel wintered
 #	Margaret Turner reports
 #	http://web.archive.org/web/20021204222245/http://www.dstc.qut.edu.au/DST/marg/daylight.html
-#	(1999-09-30) that they're UTC+5, with no DST;
+#	(1999-09-30) that they're UT +05, with no DST;
 #	presumably this is when they have visitors.
 #
 # year-round bases
@@ -68,23 +66,22 @@
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Antarctica/Casey	0	-	-00	1969
-			8:00	-	AWST	2009 Oct 18  2:00
-						# Australian Western Std Time
-			11:00	-	CAST	2010 Mar  5  2:00  # Casey Time
-			8:00	-	AWST	2011 Oct 28  2:00
-			11:00	-	CAST	2012 Feb 21 17:00u
-			8:00	-	AWST
+			8:00	-	+08	2009 Oct 18  2:00
+			11:00	-	+11	2010 Mar  5  2:00
+			8:00	-	+08	2011 Oct 28  2:00
+			11:00	-	+11	2012 Feb 21 17:00u
+			8:00	-	+08
 Zone Antarctica/Davis	0	-	-00	1957 Jan 13
-			7:00	-	DAVT	1964 Nov    # Davis Time
+			7:00	-	+07	1964 Nov
 			0	-	-00	1969 Feb
-			7:00	-	DAVT	2009 Oct 18  2:00
-			5:00	-	DAVT	2010 Mar 10 20:00u
-			7:00	-	DAVT	2011 Oct 28  2:00
-			5:00	-	DAVT	2012 Feb 21 20:00u
-			7:00	-	DAVT
+			7:00	-	+07	2009 Oct 18  2:00
+			5:00	-	+05	2010 Mar 10 20:00u
+			7:00	-	+07	2011 Oct 28  2:00
+			5:00	-	+05	2012 Feb 21 20:00u
+			7:00	-	+07
 Zone Antarctica/Mawson	0	-	-00	1954 Feb 13
-			6:00	-	MAWT	2009 Oct 18  2:00 # Mawson Time
-			5:00	-	MAWT
+			6:00	-	+06	2009 Oct 18  2:00
+			5:00	-	+05
 # References:
 # Casey Weather (1998-02-26)
 # http://www.antdiv.gov.au/aad/exop/sfo/casey/casey_aws.html
@@ -138,7 +135,7 @@ Zone Antarctica/Mawson	0	-	-00	1954 Feb 13
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Indian/Kerguelen	0	-	-00	1950 # Port-aux-Français
-			5:00	-	TFT	# ISO code TF Time
+			5:00	-	+05
 #
 # year-round base in the main continent
 # Dumont d'Urville, Île des Pétrels, -6640+14001, since 1956-11
@@ -149,9 +146,9 @@ Zone Indian/Kerguelen	0	-	-00	1950 # Port-aux-Français
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Antarctica/DumontDUrville 0 -	-00	1947
-			10:00	-	PMT	1952 Jan 14 # Port-Martin Time
+			10:00	-	+10	1952 Jan 14
 			0	-	-00	1956 Nov
-			10:00	-	DDUT	# Dumont-d'Urville Time
+			10:00	-	+10
 
 # France & Italy - year-round base
 # Concordia, -750600+1232000, since 2005
@@ -177,7 +174,7 @@ Zone Antarctica/DumontDUrville 0 -	-00	1947
 # station of Japan, it's appropriate for the principal location.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Antarctica/Syowa	0	-	-00	1957 Jan 29
-			3:00	-	SYOT	# Syowa Time
+			3:00	-	+03
 # See:
 # NIPR Antarctic Research Activities (1999-08-17)
 # http://www.nipr.ac.jp/english/ara01.html
@@ -214,17 +211,17 @@ Zone Antarctica/Syowa	0	-	-00	1957 Jan 29
 # correct, but they should be quite close to the actual dates.
 #
 # From Paul Eggert (2014-03-21):
-# The CET-switching Troll rules require zic from tzcode 2014b or later, so as
+# The CET-switching Troll rules require zic from tz 2014b or later, so as
 # suggested by Bengt-Inge Larsson comment them out for now, and approximate
 # with only UTC and CEST.  Uncomment them when 2014b is more prevalent.
 #
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-#Rule	Troll	2005	max	-	Mar	 1	1:00u	1:00	CET
-Rule	Troll	2005	max	-	Mar	lastSun	1:00u	2:00	CEST
-#Rule	Troll	2005	max	-	Oct	lastSun	1:00u	1:00	CET
-#Rule	Troll	2004	max	-	Nov	 7	1:00u	0:00	UTC
+#Rule	Troll	2005	max	-	Mar	 1	1:00u	1:00	+01
+Rule	Troll	2005	max	-	Mar	lastSun	1:00u	2:00	+02
+#Rule	Troll	2005	max	-	Oct	lastSun	1:00u	1:00	+01
+#Rule	Troll	2004	max	-	Nov	 7	1:00u	0:00	+00
 # Remove the following line when uncommenting the above '#Rule' lines.
-Rule	Troll	2004	max	-	Oct	lastSun	1:00u	0:00	UTC
+Rule	Troll	2004	max	-	Oct	lastSun	1:00u	0:00	+00
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Antarctica/Troll	0	-	-00	2005 Feb 12
 			0:00	Troll	%s
@@ -265,10 +262,10 @@ Zone Antarctica/Troll	0	-	-00	2005 Feb 12
 # changes during the year and does not necessarily correspond to mean
 # solar noon.  So the Vostok time might have been whatever the clocks
 # happened to be during their visit.  So we still don't really know what time
-# it is at Vostok.  But we'll guess UTC+6.
+# it is at Vostok.  But we'll guess +06.
 #
 Zone Antarctica/Vostok	0	-	-00	1957 Dec 16
-			6:00	-	VOST	# Vostok time
+			6:00	-	+06
 
 # S Africa - year-round bases
 # Marion Island, -4653+03752
@@ -301,7 +298,7 @@ Zone Antarctica/Vostok	0	-	-00	1957 Dec 16
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Antarctica/Rothera	0	-	-00	1976 Dec  1
-			-3:00	-	ROTT	# Rothera time
+			-3:00	-	-03
 
 # Uruguay - year round base
 # Artigas, King George Island, -621104-0585107
diff --git a/src/main/java/org/joda/time/tz/src/asia b/src/main/java/org/joda/time/tz/src/asia
index 533e2186d..71ef8787b 100644
--- a/src/main/java/org/joda/time/tz/src/asia
+++ b/src/main/java/org/joda/time/tz/src/asia
@@ -116,13 +116,11 @@ Zone	Asia/Kabul	4:36:48 -	LMT	1890
 # http://www.worldtimezone.com/dst_news/dst_news_armenia03.html
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Yerevan	2:58:00 -	LMT	1924 May  2
-			3:00	-	YERT	1957 Mar    # Yerevan Time
-			4:00 RussiaAsia YER%sT	1991 Mar 31  2:00s
-			3:00	1:00	YERST	1991 Sep 23 # independence
-			3:00 RussiaAsia	AM%sT	1995 Sep 24  2:00s
-			4:00	-	AMT	1997
-			4:00 RussiaAsia	AM%sT	2012 Feb  9
-			4:00	-	AMT
+			3:00	-	+03	1957 Mar
+			4:00 RussiaAsia +04/+05	1991 Mar 31  2:00s
+			3:00 RussiaAsia	+03/+04	1995 Sep 24  2:00s
+			4:00	-	+04	1997
+			4:00 RussiaAsia	+04/+05
 
 # Azerbaijan
 
@@ -143,13 +141,12 @@ Rule	Azer	1997	2015	-	Mar	lastSun	 4:00	1:00	S
 Rule	Azer	1997	2015	-	Oct	lastSun	 5:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
-			3:00	-	BAKT	1957 Mar    # Baku Time
-			4:00 RussiaAsia BAK%sT	1991 Mar 31  2:00s
-			3:00	1:00	BAKST	1991 Aug 30 # independence
-			3:00 RussiaAsia	AZ%sT	1992 Sep lastSun  2:00s
-			4:00	-	AZT	1996     # Azerbaijan Time
-			4:00	EUAsia	AZ%sT	1997
-			4:00	Azer	AZ%sT
+			3:00	-	+03	1957 Mar
+			4:00 RussiaAsia +04/+05	1991 Mar 31  2:00s
+			3:00 RussiaAsia	+03/+04	1992 Sep lastSun  2:00s
+			4:00	-	+04	1996
+			4:00	EUAsia	+04/+05	1997
+			4:00	Azer	+04/+05
 
 # Bahrain
 # See Asia/Qatar.
@@ -268,7 +265,7 @@ Zone	Asia/Brunei	7:39:40 -	LMT	1926 Mar # Bandar Seri Begawan
 # Milne says 6:24:40 was the meridian of the time ball observatory at Rangoon.
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Rangoon	6:24:40 -	LMT	1880        # or Yangon
+Zone	Asia/Yangon	6:24:40 -	LMT	1880        # or Rangoon
 			6:24:40	-	RMT	1920        # Rangoon Mean Time?
 			6:30	-	BURT	1942 May    # Burma Time
 			9:00	-	JST	1945 May  3
@@ -383,7 +380,7 @@ Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
 # Lewiston (ME) Daily Sun (1939-05-29), p 17, said "Even the time is
 # different - the occupied districts going by Tokyo time, an hour
 # ahead of that prevailing in the rest of Shanghai."  Guess that the
-# Xujiahui Observatory was under French control and stuck with UT+8.
+# Xujiahui Observatory was under French control and stuck with UT +08.
 #
 # In earlier versions of this file, China had many separate Zone entries, but
 # this was based on what were apparently incorrect data in Shanks & Pottenger.
@@ -392,26 +389,26 @@ Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
 # Proposed in 1918 and theoretically in effect until 1949 (although in practice
 # mainly observed in coastal areas), the five zones were:
 #
-# Changbai Time ("Long-white Time", Long-white = Heilongjiang area) UT+8.5
+# Changbai Time ("Long-white Time", Long-white = Heilongjiang area) UT +08:30
 # Asia/Harbin (currently a link to Asia/Shanghai)
 # Heilongjiang (except Mohe county), Jilin
 #
-# Zhongyuan Time ("Central plain Time") UT+8
+# Zhongyuan Time ("Central plain Time") UT +08
 # Asia/Shanghai
 # most of China
 # This currently represents most other zones as well,
 # as apparently these regions have been the same since 1970.
 # Milne gives 8:05:43.2 for Xujiahui Observatory time; round to nearest.
-# Guo says Shanghai switched to UT+8 "from the end of the 19th century".
+# Guo says Shanghai switched to UT +08 "from the end of the 19th century".
 #
-# Long-shu Time (probably due to Long and Shu being two names of that area) UT+7
+# Long-shu Time (probably due to Long and Shu being two names of the area) UT +07
 # Asia/Chongqing (currently a link to Asia/Shanghai)
 # Guangxi, Guizhou, Hainan, Ningxia, Sichuan, Shaanxi, and Yunnan;
 # most of Gansu; west Inner Mongolia; west Qinghai; and the Guangdong
 # counties Deqing, Enping, Kaiping, Luoding, Taishan, Xinxing,
 # Yangchun, Yangjiang, Yu'nan, and Yunfu.
 #
-# Xin-zang Time ("Xinjiang-Tibet Time") UT+6
+# Xin-zang Time ("Xinjiang-Tibet Time") UT +06
 # Asia/Urumqi
 # This currently represents Kunlun Time as well,
 # as apparently the two regions have been the same since 1970.
@@ -424,7 +421,7 @@ Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
 # Shihezi, Changji, Yanqi, Heshuo, Tuokexun, Tulufan, Shanshan, Hami,
 # Fukang, Kuitun, Kumukuli, Miquan, Qitai, and Turfan.
 #
-# Kunlun Time UT+5.5
+# Kunlun Time UT +05:30
 # Asia/Kashgar (currently a link to Asia/Urumqi)
 # West Tibet, including Pulan, Aheqi, Shufu, Shule;
 # West Xinjiang, including Aksu, Atushi, Yining, Hetian, Cele, Luopu, Nileke,
@@ -440,7 +437,7 @@ Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
 #
 # On the other hand, ethnic Uyghurs, who make up about half the
 # population of Xinjiang, typically use "Xinjiang time" which is two
-# hours behind Beijing time, or UTC +0600. The government of the Xinjiang
+# hours behind Beijing time, or UT +06. The government of the Xinjiang
 # Uyghur Autonomous Region, (XAUR, or just Xinjiang for short) as well as
 # local governments such as the Ürümqi city government use both times in
 # publications, referring to what is popularly called Xinjiang time as
@@ -496,8 +493,8 @@ Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
 # having the same time as Beijing.
 
 # From Paul Eggert (2014-06-30):
-# In the early days of the PRC, Tibet was given its own time zone (UT+6) but
-# this was withdrawn in 1959 and never reinstated; see Tubten Khétsun,
+# In the early days of the PRC, Tibet was given its own time zone (UT +06)
+# but this was withdrawn in 1959 and never reinstated; see Tubten Khétsun,
 # Memories of life in Lhasa under Chinese Rule, Columbia U Press, ISBN
 # 978-0231142861 (2008), translator's introduction by Matthew Akester, p x.
 # As this is before our 1970 cutoff, Tibet doesn't need a separate zone.
@@ -511,12 +508,12 @@ Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
 # Republics, the Soviet Union, the Kuomintang, and the People's Republic of
 # China, and tracking down all these organizations' timekeeping rules would be
 # quite a trick.  Approximate this lost history by a transition from LMT to
-# XJT at the start of 1928, the year of accession of the warlord Jin Shuren,
+# UT +06 at the start of 1928, the year of accession of the warlord Jin Shuren,
 # which happens to be the date given by Shanks & Pottenger (no doubt as a
-# guess) as the transition from LMT.  Ignore the usage of UT+8 before
-# 1986-02-01 under the theory that the transition date to UT+8 is unknown and
+# guess) as the transition from LMT.  Ignore the usage of +08 before
+# 1986-02-01 under the theory that the transition date to +08 is unknown and
 # that the sort of users who prefer Asia/Urumqi now typically ignored the
-# UT+8 mandate back then.
+# +08 mandate back then.
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 # Beijing time, used throughout China; represented by Shanghai.
@@ -721,7 +718,7 @@ Zone	Asia/Hong_Kong	7:36:42 -	LMT	1904 Oct 30
 # be found from historical government announcement database.
 
 # From Paul Eggert (2014-07-03):
-# As per Yu-Cheng Chuang, say that Taiwan was at UT+9 from 1937-10-01
+# As per Yu-Cheng Chuang, say that Taiwan was at UT +09 from 1937-10-01
 # until 1945-09-21 at 01:00, overriding Shanks & Pottenger.
 # Likewise, use Yu-Cheng Chuang's data for DST in Taiwan.
 
@@ -835,16 +832,15 @@ Link	Asia/Nicosia	Europe/Nicosia
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Tbilisi	2:59:11 -	LMT	1880
 			2:59:11	-	TBMT	1924 May  2 # Tbilisi Mean Time
-			3:00	-	TBIT	1957 Mar    # Tbilisi Time
-			4:00 RussiaAsia TBI%sT	1991 Mar 31  2:00s
-			3:00	1:00	TBIST	1991 Apr  9 # independence
-			3:00 RussiaAsia GE%sT	1992        # Georgia Time
-			3:00 E-EurAsia	GE%sT	1994 Sep lastSun
-			4:00 E-EurAsia	GE%sT	1996 Oct lastSun
-			4:00	1:00	GEST	1997 Mar lastSun
-			4:00 E-EurAsia	GE%sT	2004 Jun 27
-			3:00 RussiaAsia	GE%sT	2005 Mar lastSun  2:00
-			4:00	-	GET
+			3:00	-	+03	1957 Mar
+			4:00 RussiaAsia +04/+05	1991 Mar 31  2:00s
+			3:00 RussiaAsia +03/+04	1992
+			3:00 E-EurAsia	+03/+04	1994 Sep lastSun
+			4:00 E-EurAsia	+04/+05	1996 Oct lastSun
+			4:00	1:00	+05	1997 Mar lastSun
+			4:00 E-EurAsia	+04/+05	2004 Jun 27
+			3:00 RussiaAsia	+03/+04	2005 Mar lastSun  2:00
+			4:00	-	+04
 
 # East Timor
 
@@ -921,7 +917,7 @@ Zone	Asia/Kolkata	5:53:28 -	LMT	1880        # Kolkata
 # These would be the earliest possible times for a change.
 # Régimes horaires pour le monde entier, by Henri Le Corre, (Éditions
 # Traditionnelles, 1987, Paris) says that Java and Madura switched
-# from JST to UTC+07:30 on 1945-09-23, and gives 1944-09-01 for Jayapura
+# from UT +09 to +07:30 on 1945-09-23, and gives 1944-09-01 for Jayapura
 # (Hollandia).  For now, assume all Indonesian locations other than Jayapura
 # switched on 1945-09-23.
 #
@@ -932,11 +928,11 @@ Zone	Asia/Kolkata	5:53:28 -	LMT	1880        # Kolkata
 # summary published by the Time and Frequency Laboratory of the
 # Research Center for Calibration, Instrumentation and Metrology,
 # Indonesia, <http://time.kim.lipi.go.id/time-eng.php> (2006-09-29).
-# The abbreviations are:
+# The time zone abbreviations and UT offsets are:
 #
-# WIB  - UTC+7 - Waktu Indonesia Barat (Indonesia western time)
-# WITA - UTC+8 - Waktu Indonesia Tengah (Indonesia central time)
-# WIT  - UTC+9 - Waktu Indonesia Timur (Indonesia eastern time)
+# WIB  - +07 - Waktu Indonesia Barat (Indonesia western time)
+# WITA - +08 - Waktu Indonesia Tengah (Indonesia central time)
+# WIT  - +09 - Waktu Indonesia Timur (Indonesia eastern time)
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 # Java, Sumatra
@@ -1825,11 +1821,11 @@ Rule	Kyrgyz	1997	2005	-	Mar	lastSun	2:30	1:00	S
 Rule	Kyrgyz	1997	2004	-	Oct	lastSun	2:30	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Bishkek	4:58:24 -	LMT	1924 May  2
-			5:00	-	FRUT	1930 Jun 21 # Frunze Time
-			6:00 RussiaAsia FRU%sT	1991 Mar 31  2:00s
-			5:00	1:00	FRUST	1991 Aug 31  2:00 # independence
-			5:00	Kyrgyz	KG%sT	2005 Aug 12 # Kyrgyzstan Time
-			6:00	-	KGT
+			5:00	-	+05	1930 Jun 21
+			6:00 RussiaAsia +06/+07	1991 Mar 31  2:00s
+			5:00 RussiaAsia	+05/+06	1991 Aug 31  2:00
+			5:00	Kyrgyz	+05/+06	2005 Aug 12
+			6:00	-	+06
 
 ###############################################################################
 
@@ -1868,25 +1864,24 @@ Rule	ROK	1957	1960	-	Sep	Sun>=18	0:00	0	S
 Rule	ROK	1987	1988	-	May	Sun>=8	2:00	1:00	D
 Rule	ROK	1987	1988	-	Oct	Sun>=8	3:00	0	S
 
-# From Paul Eggert (2014-10-30):
+# From Paul Eggert (2016-08-23):
 # The Korean Wikipedia entry gives the following sources for UT offsets:
 #
-# 1908: Official Journal Article No. 3994 (Edict No. 5)
+# 1908: Official Journal Article No. 3994 (decree No. 5)
 # 1912: Governor-General of Korea Official Gazette Issue No. 367
 #       (Announcement No. 338)
 # 1954: Presidential Decree No. 876 (1954-03-17)
 # 1961: Law No. 676 (1961-08-07)
-# 1987: Law No. 3919 (1986-12-31)
 #
-# The Wikipedia entry also has confusing information about a change
-# to UT+9 in April 1910, but then what would be the point of the later change
-# to UT+9 on 1912-01-01?  Omit the 1910 change for now.
+# (Another source "1987: Law No. 3919 (1986-12-31)" was in the 2014-10-30
+# edition of the Korean Wikipedia entry.)
 #
 # I guessed that time zone abbreviations through 1945 followed the same
 # rules as discussed under Taiwan, with nominal switches from JST to KST
 # when the respective cities were taken over by the Allies after WWII.
 #
-# For Pyongyang we have no information; guess no changes since World War II.
+# For Pyongyang, guess no changes from World War II until 2015, as we
+# have no information otherwise.
 
 # From Steffen Thorsen (2015-08-07):
 # According to many news sources, North Korea is going to change to
@@ -2046,7 +2041,7 @@ Zone	Indian/Maldives	4:54:00 -	LMT	1880 # Male
 # Bill Bonnet (2005-05-19) reports that the US Embassy in Ulaanbaatar says
 # there is only one time zone and that DST is observed, citing Microsoft
 # Windows XP as the source.  Risto Nykänen (2005-05-16) reports that
-# travelmongolia.org says there are two time zones (UTC+7, UTC+8) with no DST.
+# travelmongolia.org says there are two time zones (UT +07, +08) with no DST.
 # Oscar van Vlijmen (2005-05-20) reports that the Mongolian Embassy in
 # Washington, DC says there are two time zones, with DST observed.
 # He also found
@@ -2682,7 +2677,7 @@ Link Asia/Qatar Asia/Bahrain
 # earlier date.
 #
 # Shanks & Pottenger also state that until 1968-05-01 Saudi Arabia had two
-# time zones; the other zone, at UTC+4, was in the far eastern part of
+# time zones; the other zone, at UT +04, was in the far eastern part of
 # the country.  Ignore this, as it's before our 1970 cutoff.
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -2951,10 +2946,10 @@ Zone	Asia/Damascus	2:25:12 -	LMT	1920 # Dimashq
 # From Shanks & Pottenger.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Dushanbe	4:35:12 -	LMT	1924 May  2
-			5:00	-	DUST	1930 Jun 21 # Dushanbe Time
-			6:00 RussiaAsia DUS%sT	1991 Mar 31  2:00s
-			5:00	1:00	DUSST	1991 Sep  9  2:00s
-			5:00	-	TJT	# Tajikistan Time
+			5:00	-	+05	1930 Jun 21
+			6:00 RussiaAsia +06/+07	1991 Mar 31  2:00s
+			5:00	1:00	+05/+06	1991 Sep  9  2:00s
+			5:00	-	+05
 
 # Thailand
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -2968,11 +2963,10 @@ Link Asia/Bangkok Asia/Vientiane	# Laos
 # From Shanks & Pottenger.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Ashgabat	3:53:32 -	LMT	1924 May  2 # or Ashkhabad
-			4:00	-	ASHT	1930 Jun 21 # Ashkhabad Time
-			5:00 RussiaAsia	ASH%sT	1991 Mar 31  2:00
-			4:00 RussiaAsia	ASH%sT	1991 Oct 27 # independence
-			4:00 RussiaAsia	TM%sT	1992 Jan 19  2:00
-			5:00	-	TMT
+			4:00	-	+04	1930 Jun 21
+			5:00 RussiaAsia	+05/+06	1991 Mar 31  2:00
+			4:00 RussiaAsia	+04/+05	1992 Jan 19  2:00
+			5:00	-	+05
 
 # United Arab Emirates
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -2984,20 +2978,18 @@ Link Asia/Dubai Asia/Muscat	# Oman
 # Byalokoz 1919 says Uzbekistan was 4:27:53.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Samarkand	4:27:53 -	LMT	1924 May  2
-			4:00	-	SAMT	1930 Jun 21 # Samarkand Time
-			5:00	-	SAMT	1981 Apr  1
-			5:00	1:00	SAMST	1981 Oct  1
-			6:00	-	TAST	1982 Apr  1 # Tashkent Time
-			5:00 RussiaAsia	SAM%sT	1991 Sep  1 # independence
-			5:00 RussiaAsia	UZ%sT	1992
-			5:00	-	UZT
+			4:00	-	+04	1930 Jun 21
+			5:00	-	+05	1981 Apr  1
+			5:00	1:00	+06	1981 Oct  1
+			6:00	-	+06	1982 Apr  1
+			5:00 RussiaAsia	+05/+06	1992
+			5:00	-	+05
 # Milne says Tashkent was 4:37:10.8; round to nearest.
 Zone	Asia/Tashkent	4:37:11 -	LMT	1924 May  2
-			5:00	-	TAST	1930 Jun 21 # Tashkent Time
-			6:00 RussiaAsia	TAS%sT	1991 Mar 31  2:00
-			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
-			5:00 RussiaAsia	UZ%sT	1992
-			5:00	-	UZT
+			5:00	-	+05	1930 Jun 21
+			6:00 RussiaAsia	+06/+07	1991 Mar 31  2:00
+			5:00 RussiaAsia	+05/+06	1992
+			5:00	-	+05
 
 # Vietnam
 
diff --git a/src/main/java/org/joda/time/tz/src/australasia b/src/main/java/org/joda/time/tz/src/australasia
index 0b33f67ed..f49df1d6e 100644
--- a/src/main/java/org/joda/time/tz/src/australasia
+++ b/src/main/java/org/joda/time/tz/src/australasia
@@ -545,7 +545,7 @@ Zone Pacific/Port_Moresby 9:48:40 -	LMT	1880
 # Base the Bougainville entry on the Arawa-Kieta region, which appears to have
 # the most people even though it was devastated in the Bougainville Civil War.
 #
-# Although Shanks gives 1942-03-15 / 1943-11-01 for JST, these dates
+# Although Shanks gives 1942-03-15 / 1943-11-01 for UT +09, these dates
 # are apparently rough guesswork from the starts of military campaigns.
 # The World War II entries below are instead based on Arawa-Kieta.
 # The Japanese occupied Kieta in July 1942,
@@ -553,8 +553,8 @@ Zone Pacific/Port_Moresby 9:48:40 -	LMT	1880
 # http://pwencycl.kgbudge.com/B/o/Bougainville.htm
 # and seem to have controlled it until their 1945-08-21 surrender.
 #
-# The Autonomous Region of Bougainville plans to switch from UTC+10 to UTC+11
-# on 2014-12-28 at 02:00.  They call UTC+11 "Bougainville Standard Time";
+# The Autonomous Region of Bougainville switched from UT +10 to +11
+# on 2014-12-28 at 02:00.  They call +11 "Bougainville Standard Time";
 # abbreviate this as BST.  See:
 # http://www.bougainville24.com/bougainville-issues/bougainville-gets-own-timezone/
 #
@@ -620,7 +620,7 @@ Link Pacific/Pago_Pago Pacific/Midway # in US minor outlying islands
 # From Paul Eggert (2014-06-27):
 # The International Date Line Act 2011
 # http://www.parliament.gov.ws/images/ACTS/International_Date_Line_Act__2011_-_Eng.pdf
-# changed Samoa from UTC-11 to UTC+13, effective "12 o'clock midnight, on
+# changed Samoa from UT -11 to +13, effective "12 o'clock midnight, on
 # Thursday 29th December 2011".  The International Date Line was adjusted
 # accordingly.
 
@@ -715,7 +715,7 @@ Zone Pacific/Funafuti	11:56:52 -	LMT	1901
 # 1886-1891; Baker was similar but exact dates are not known.
 # Inhabited by civilians 1935-1942; U.S. military bases 1943-1944;
 # uninhabited thereafter.
-# Howland observed Hawaii Standard Time (UT-10:30) in 1937;
+# Howland observed Hawaii Standard Time (UT -10:30) in 1937;
 # see page 206 of Elgen M. Long and Marie K. Long,
 # Amelia Earhart: the Mystery Solved, Simon & Schuster (2000).
 # So most likely Howland and Baker observed Hawaii Time from 1935
@@ -1473,7 +1473,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # Zealand time.  I understand that is the time they keep locally, anyhow."
 # For now, assume this practice goes back to the introduction of standard time
 # in New Zealand, as this would make Chatham Islands time almost exactly match
-# LMT back when New Zealand was at UTC+11:30; also, assume Chatham Islands did
+# LMT back when New Zealand was at UT +11:30; also, assume Chatham Islands did
 # not observe New Zealand's prewar DST.
 
 ###############################################################################
@@ -1529,7 +1529,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # For now, we assume the Ladrones switched at the same time as the Philippines;
 # see Asia/Manila.
 
-# US Public Law 106-564 (2000-12-23) made UTC+10 the official standard time,
+# US Public Law 106-564 (2000-12-23) made UT +10 the official standard time,
 # under the name "Chamorro Standard Time".  There is no official abbreviation,
 # but Congressman Robert A. Underwood, author of the bill that became law,
 # wrote in a press release (2000-12-27) that he will seek the use of "ChST".
@@ -1541,15 +1541,15 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # "I am certain, having lived there for the past decade, that 'Truk'
 # (now properly known as Chuuk) ... is in the time zone GMT+10."
 #
-# Shanks & Pottenger write that Truk switched from UTC+10 to UTC+11
+# Shanks & Pottenger write that Truk switched from UT +10 to +11
 # on 1978-10-01; ignore this for now.
 
 # From Paul Eggert (1999-10-29):
 # The Federated States of Micronesia Visitors Board writes in
 # The Federated States of Micronesia - Visitor Information (1999-01-26)
 # http://www.fsmgov.org/info/clocks.html
-# that Truk and Yap are UTC+10, and Ponape and Kosrae are UTC+11.
-# We don't know when Kosrae switched from UTC+12; assume January 1 for now.
+# that Truk and Yap are UT +10, and Ponape and Kosrae are +11.
+# We don't know when Kosrae switched from +12; assume January 1 for now.
 
 
 # Midway
@@ -1615,11 +1615,11 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # ordaining - by a masterpiece of diplomatic flattery - that
 # the Fourth of July should be celebrated twice in that year."
 
-# Although Shanks & Pottenger says they both switched to UTC-11:30
-# in 1911, and to UTC-11 in 1950. many earlier sources give UTC-11
+# Although Shanks & Pottenger says they both switched to UT -11:30
+# in 1911, and to -11 in 1950. many earlier sources give -11
 # for American Samoa, e.g., the US National Bureau of Standards
 # circular "Standard Time Throughout the World", 1932.
-# Assume American Samoa switched to UTC-11 in 1911, not 1950,
+# Assume American Samoa switched to -11 in 1911, not 1950,
 # and that after 1950 they agreed until (western) Samoa skipped a
 # day in 2011.  Assume also that the Samoas follow the US and New
 # Zealand's "ST"/"DT" style of daylight-saving abbreviations.
diff --git a/src/main/java/org/joda/time/tz/src/backward b/src/main/java/org/joda/time/tz/src/backward
index aab237a5e..aa23dd844 100644
--- a/src/main/java/org/joda/time/tz/src/backward
+++ b/src/main/java/org/joda/time/tz/src/backward
@@ -36,6 +36,7 @@ Link	Asia/Shanghai		Asia/Harbin
 Link	Asia/Urumqi		Asia/Kashgar
 Link	Asia/Kathmandu		Asia/Katmandu
 Link	Asia/Macau		Asia/Macao
+Link	Asia/Yangon		Asia/Rangoon
 Link	Asia/Ho_Chi_Minh	Asia/Saigon
 Link	Asia/Jerusalem		Asia/Tel_Aviv
 Link	Asia/Thimphu		Asia/Thimbu
diff --git a/src/main/java/org/joda/time/tz/src/etcetera b/src/main/java/org/joda/time/tz/src/etcetera
index c2e25328d..f5fa4c94b 100644
--- a/src/main/java/org/joda/time/tz/src/etcetera
+++ b/src/main/java/org/joda/time/tz/src/etcetera
@@ -8,6 +8,13 @@
 # need now for the entries that are not on UTC are for ships at sea
 # that cannot use POSIX TZ settings.
 
+# Starting with POSIX 1003.1-2001, the entries below are all
+# unnecessary as settings for the TZ environment variable.  E.g.,
+# instead of TZ='Etc/GMT+4' one can use the POSIX setting TZ='<-04>+4'.
+#
+# Do not use a POSIX TZ setting like TZ='GMT+4', which is four hours
+# behind GMT but uses the completely misleading abbreviation "GMT".
+
 Zone	Etc/GMT		0	-	GMT
 Zone	Etc/UTC		0	-	UTC
 Zone	Etc/UCT		0	-	UCT
@@ -26,23 +33,13 @@ Link	Etc/GMT				Etc/GMT-0
 Link	Etc/GMT				Etc/GMT+0
 Link	Etc/GMT				Etc/GMT0
 
-# We use POSIX-style signs in the Zone names and the output abbreviations,
+# Be consistent with POSIX TZ settings in the Zone names,
 # even though this is the opposite of what many people expect.
 # POSIX has positive signs west of Greenwich, but many people expect
 # positive signs east of Greenwich.  For example, TZ='Etc/GMT+4' uses
-# the abbreviation "GMT+4" and corresponds to 4 hours behind UT
+# the abbreviation "-04" and corresponds to 4 hours behind UT
 # (i.e. west of Greenwich) even though many people would expect it to
 # mean 4 hours ahead of UT (i.e. east of Greenwich).
-#
-# In the draft 5 of POSIX 1003.1-200x, the angle bracket notation allows for
-# TZ='<GMT-4>+4'; if you want time zone abbreviations conforming to
-# ISO 8601 you can use TZ='<-0400>+4'.  Thus the commonly-expected
-# offset is kept within the angle bracket (and is used for display)
-# while the POSIX sign is kept outside the angle bracket (and is used
-# for calculation).
-#
-# Do not use a TZ setting like TZ='GMT+4', which is four hours behind
-# GMT but uses the completely misleading abbreviation "GMT".
 
 # Earlier incarnations of this package were not POSIX-compliant,
 # and had lines such as
@@ -51,30 +48,31 @@ Link	Etc/GMT				Etc/GMT0
 # way does a
 #		zic -l GMT-12
 # so we moved the names into the Etc subdirectory.
+# Also, the time zone abbreviations are now compatible with %z.
 
-Zone	Etc/GMT-14	14	-	GMT-14	# 14 hours ahead of GMT
-Zone	Etc/GMT-13	13	-	GMT-13
-Zone	Etc/GMT-12	12	-	GMT-12
-Zone	Etc/GMT-11	11	-	GMT-11
-Zone	Etc/GMT-10	10	-	GMT-10
-Zone	Etc/GMT-9	9	-	GMT-9
-Zone	Etc/GMT-8	8	-	GMT-8
-Zone	Etc/GMT-7	7	-	GMT-7
-Zone	Etc/GMT-6	6	-	GMT-6
-Zone	Etc/GMT-5	5	-	GMT-5
-Zone	Etc/GMT-4	4	-	GMT-4
-Zone	Etc/GMT-3	3	-	GMT-3
-Zone	Etc/GMT-2	2	-	GMT-2
-Zone	Etc/GMT-1	1	-	GMT-1
-Zone	Etc/GMT+1	-1	-	GMT+1
-Zone	Etc/GMT+2	-2	-	GMT+2
-Zone	Etc/GMT+3	-3	-	GMT+3
-Zone	Etc/GMT+4	-4	-	GMT+4
-Zone	Etc/GMT+5	-5	-	GMT+5
-Zone	Etc/GMT+6	-6	-	GMT+6
-Zone	Etc/GMT+7	-7	-	GMT+7
-Zone	Etc/GMT+8	-8	-	GMT+8
-Zone	Etc/GMT+9	-9	-	GMT+9
-Zone	Etc/GMT+10	-10	-	GMT+10
-Zone	Etc/GMT+11	-11	-	GMT+11
-Zone	Etc/GMT+12	-12	-	GMT+12
+Zone	Etc/GMT-14	14	-	+14
+Zone	Etc/GMT-13	13	-	+13
+Zone	Etc/GMT-12	12	-	+12
+Zone	Etc/GMT-11	11	-	+11
+Zone	Etc/GMT-10	10	-	+10
+Zone	Etc/GMT-9	9	-	+09
+Zone	Etc/GMT-8	8	-	+08
+Zone	Etc/GMT-7	7	-	+07
+Zone	Etc/GMT-6	6	-	+06
+Zone	Etc/GMT-5	5	-	+05
+Zone	Etc/GMT-4	4	-	+04
+Zone	Etc/GMT-3	3	-	+03
+Zone	Etc/GMT-2	2	-	+02
+Zone	Etc/GMT-1	1	-	+01
+Zone	Etc/GMT+1	-1	-	-01
+Zone	Etc/GMT+2	-2	-	-02
+Zone	Etc/GMT+3	-3	-	-03
+Zone	Etc/GMT+4	-4	-	-04
+Zone	Etc/GMT+5	-5	-	-05
+Zone	Etc/GMT+6	-6	-	-06
+Zone	Etc/GMT+7	-7	-	-07
+Zone	Etc/GMT+8	-8	-	-08
+Zone	Etc/GMT+9	-9	-	-09
+Zone	Etc/GMT+10	-10	-	-10
+Zone	Etc/GMT+11	-11	-	-11
+Zone	Etc/GMT+12	-12	-	-12
diff --git a/src/main/java/org/joda/time/tz/src/europe b/src/main/java/org/joda/time/tz/src/europe
index cd3a0883d..6020059f6 100644
--- a/src/main/java/org/joda/time/tz/src/europe
+++ b/src/main/java/org/joda/time/tz/src/europe
@@ -75,8 +75,7 @@
 #        1:00       CET CEST CEMT Central Europe
 #        1:00:14    SET           Swedish (1879-1899)*
 #        2:00       EET EEST      Eastern Europe
-#        3:00       FET           Further-eastern Europe (2011-2014)*
-#        3:00       MSK MSD  MSM* Minsk, Moscow
+#        3:00       MSK MSD       Moscow
 
 # From Peter Ilieve (1994-12-04),
 # The original six [EU members]: Belgium, France, (West) Germany, Italy,
@@ -583,16 +582,33 @@ Rule	E-Eur	1979	1995	-	Sep	lastSun	 0:00	0	-
 Rule	E-Eur	1981	max	-	Mar	lastSun	 0:00	1:00	S
 Rule	E-Eur	1996	max	-	Oct	lastSun	 0:00	0	-
 
+
+# Daylight saving time for Russia and the Soviet Union
+#
+# The 1917-1921 decree URLs are from Alexander Belopolsky (2016-08-23).
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Russia	1917	only	-	Jul	 1	23:00	1:00	MST  # Moscow Summer Time
+#
+# Decree No. 142 (1917-12-22) http://istmat.info/node/28137
 Rule	Russia	1917	only	-	Dec	28	 0:00	0	MMT  # Moscow Mean Time
+#
+# Decree No. 497 (1918-05-30) http://istmat.info/node/30001
 Rule	Russia	1918	only	-	May	31	22:00	2:00	MDST # Moscow Double Summer Time
 Rule	Russia	1918	only	-	Sep	16	 1:00	1:00	MST
+#
+# Decree No. 258 (1919-05-29) http://istmat.info/node/37949
 Rule	Russia	1919	only	-	May	31	23:00	2:00	MDST
-Rule	Russia	1919	only	-	Jul	 1	 2:00	1:00	MSD
+#
+Rule	Russia	1919	only	-	Jul	 1	 0:00u	1:00	MSD
 Rule	Russia	1919	only	-	Aug	16	 0:00	0	MSK
+#
+# Decree No. 63 (1921-02-03) http://istmat.info/node/45840
 Rule	Russia	1921	only	-	Feb	14	23:00	1:00	MSD
-Rule	Russia	1921	only	-	Mar	20	23:00	2:00	MSM  # Midsummer
+#
+# Decree No. 121 (1921-03-07) http://istmat.info/node/45949
+Rule	Russia	1921	only	-	Mar	20	23:00	2:00	+05
+#
 Rule	Russia	1921	only	-	Sep	 1	 0:00	1:00	MSD
 Rule	Russia	1921	only	-	Oct	 1	 0:00	0	-
 # Act No. 925 of the Council of Ministers of the USSR (1980-10-24):
@@ -775,8 +791,6 @@ Zone	Europe/Vienna	1:05:21 -	LMT	1893 Apr
 # From Alexander Bokovoy (2014-10-09):
 # Belarussian government decided against changing to winter time....
 # http://eng.belta.by/all_news/society/Belarus-decides-against-adjusting-time-in-Russias-wake_i_76335.html
-# From Paul Eggert (2014-10-08):
-# Hence Belarus can share time zone abbreviations with Moscow again.
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Minsk	1:50:16 -	LMT	1880
@@ -787,8 +801,7 @@ Zone	Europe/Minsk	1:50:16 -	LMT	1880
 			3:00	Russia	MSK/MSD	1990
 			3:00	-	MSK	1991 Mar 31  2:00s
 			2:00	Russia	EE%sT	2011 Mar 27  2:00s
-			3:00	-	FET	2014 Oct 26  1:00s
-			3:00	-	MSK
+			3:00	-	+03
 
 # Belgium
 #
@@ -1296,7 +1309,7 @@ Zone	Europe/Paris	0:09:21 -	LMT	1891 Mar 15  0:01
 # http://www.parlament-berlin.de/pds-fraktion.nsf/727459127c8b66ee8525662300459099/defc77cb784f180ac1256c2b0030274b/$FILE/bersarint.pdf
 # says that Bersarin issued an order to use Moscow time on May 20.
 # However, Moscow did not observe daylight saving in 1945, so
-# this was equivalent to CEMT (GMT+3), not GMT+4.
+# this was equivalent to UT +03, not +04.
 
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
@@ -2260,7 +2273,6 @@ Zone Europe/Bucharest	1:44:24 -	LMT	1891 Oct
 # http://www.worldtimezone.com/dst_news/dst_news_russia-map-2014-07.html
 
 # From Paul Eggert (2006-03-22):
-# Except for Moscow after 1919-07-01, I invented the time zone abbreviations.
 # Moscow time zone abbreviations after 1919-07-01, and Moscow rules after 1991,
 # are from Andrey A. Chernov.  The rest is from Shanks & Pottenger,
 # except we follow Chernov's report that 1992 DST transitions were Sat
@@ -2336,7 +2348,7 @@ Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
 			 2:00	Poland	CE%sT	1946
 			 3:00	Russia	MSK/MSD	1989 Mar 26  2:00s
 			 2:00	Russia	EE%sT	2011 Mar 27  2:00s
-			 3:00	-	FET	2014 Oct 26  2:00s
+			 3:00	-	+03	2014 Oct 26  2:00s
 			 2:00	-	EET
 
 
@@ -2389,6 +2401,16 @@ Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
 # 78	RU-SPE	Saint Petersburg
 # 83	RU-NEN	Nenets Autonomous Okrug
 
+# From Paul Eggert (2016-08-23):
+# The Soviets switched to UT-based time in 1919.  Decree No. 59
+# (1919-02-08) http://istmat.info/node/35567 established UT-based time
+# zones, and Decree No. 147 (1919-03-29) http://istmat.info/node/35854
+# specified a transition date of 1919-07-01, apparently at 00:00 UT.
+# No doubt only the Soviet-controlled regions switched on that date;
+# later transitions to UT-based time in other parts of Russia are
+# taken from what appear to be guesses by Shanks.
+# (Thanks to Alexander Belopolsky for pointers to the decrees.)
+
 # From Stepan Golosunov (2016-03-07):
 # 11. Regions-violators, 1981-1982.
 # Wikipedia refers to
@@ -2430,7 +2452,7 @@ Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
 # attributes the 1982 changes to the Act of the Council of Ministers
 # of the USSR No. 126 from 18.02.1982.  1980-925.txt also adds
 # Udmurtia to the list of affected territories and lists Khatangsky
-# district separately from Taymyr Autonomous Okurg.  Probably erroneously.
+# district separately from Taymyr Autonomous Okrug.  Probably erroneously.
 #
 # The affected territories are currently listed under Europe/Moscow,
 # Asia/Yekaterinburg and Asia/Krasnoyarsk.
@@ -2490,7 +2512,7 @@ Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
 
 Zone Europe/Moscow	 2:30:17 -	LMT	1880
 			 2:30:17 -	MMT	1916 Jul  3 # Moscow Mean Time
-			 2:31:19 Russia	%s	1919 Jul  1  2:00
+			 2:31:19 Russia	%s	1919 Jul  1  0:00u
 			 3:00	Russia	%s	1921 Oct
 			 3:00	Russia	MSK/MSD	1922 Oct
 			 2:00	-	EET	1930 Jun 21
@@ -2573,22 +2595,21 @@ Zone Europe/Astrakhan	 3:12:12 -	LMT	1924 May
 # The 1988 transition is from USSR act No. 5 (1988-01-04).
 
 Zone Europe/Volgograd	 2:57:40 -	LMT	1920 Jan  3
-			 3:00	-	TSAT	1925 Apr  6 # Tsaritsyn Time
-			 3:00	-	STAT	1930 Jun 21 # Stalingrad Time
-			 4:00	-	STAT	1961 Nov 11
-			 4:00	Russia	VOL%sT	1988 Mar 27  2:00s # Volgograd T
-			 3:00	Russia	VOL%sT	1991 Mar 31  2:00s
-			 4:00	-	VOLT	1992 Mar 29  2:00s
-			 3:00	Russia	MSK/MSD	2011 Mar 27  2:00s
-			 4:00	-	MSK	2014 Oct 26  2:00s
-			 3:00	-	MSK
+			 3:00	-	+03	1930 Jun 21
+			 4:00	-	+04	1961 Nov 11
+			 4:00	Russia	+04/+05	1988 Mar 27  2:00s
+			 3:00	Russia	+03/+04	1991 Mar 31  2:00s
+			 4:00	-	+04	1992 Mar 29  2:00s
+			 3:00	Russia	+03/+04	2011 Mar 27  2:00s
+			 4:00	-	+04	2014 Oct 26  2:00s
+			 3:00	-	+03
 
 # From Paul Eggert (2016-03-18):
 # Europe/Kirov covers:
 # 43	RU-KIR	Kirov Oblast
 # The 1989 transition is from USSR act No. 227 (1989-03-14).
 #
-Zone Europe/Kirov	 3:18:48 -	LMT	1919 Jul  1  2:00
+Zone Europe/Kirov	 3:18:48 -	LMT	1919 Jul  1  0:00u
 			 3:00	-	+03	1930 Jun 21
 			 4:00	Russia	+04/+05	1989 Mar 26  2:00s
 			 3:00	Russia	+03/+04	1991 Mar 31  2:00s
@@ -2606,16 +2627,16 @@ Zone Europe/Kirov	 3:18:48 -	LMT	1919 Jul  1  2:00
 # Byalokoz 1919 says Samara was 3:20:20.
 # The 1989 transition is from USSR act No. 227 (1989-03-14).
 
-Zone Europe/Samara	 3:20:20 -	LMT	1919 Jul  1  2:00
-			 3:00	-	SAMT	1930 Jun 21 # Samara Time
-			 4:00	-	SAMT	1935 Jan 27
-			 4:00	Russia	KUY%sT	1989 Mar 26  2:00s # Kuybyshev
-			 3:00	Russia	MSK/MSD	1991 Mar 31  2:00s
-			 2:00	Russia	EE%sT	1991 Sep 29  2:00s
-			 3:00	-	SAMT	1991 Oct 20  3:00
-			 4:00	Russia	SAM%sT	2010 Mar 28  2:00s
-			 3:00	Russia	SAM%sT	2011 Mar 27  2:00s
-			 4:00	-	SAMT
+Zone Europe/Samara	 3:20:20 -	LMT	1919 Jul  1  0:00u
+			 3:00	-	+03	1930 Jun 21
+			 4:00	-	+04	1935 Jan 27
+			 4:00	Russia	+04/+05	1989 Mar 26  2:00s
+			 3:00	Russia	+03/+04	1991 Mar 31  2:00s
+			 2:00	Russia	+02/+03	1991 Sep 29  2:00s
+			 3:00	-	+03	1991 Oct 20  3:00
+			 4:00	Russia	+04/+05	2010 Mar 28  2:00s
+			 3:00	Russia	+03/+04	2011 Mar 27  2:00s
+			 4:00	-	+04
 
 # From Paul Eggert (2016-03-18):
 # Europe/Ulyanovsk covers:
@@ -2630,7 +2651,7 @@ Zone Europe/Samara	 3:20:20 -	LMT	1919 Jul  1  2:00
 # From Matt Johnson (2016-03-09):
 # http://publication.pravo.gov.ru/Document/View/0001201603090051
 
-Zone Europe/Ulyanovsk	 3:13:36 -	LMT	1919 Jul  1  2:00
+Zone Europe/Ulyanovsk	 3:13:36 -	LMT	1919 Jul  1  0:00u
 			 3:00	-	+03	1930 Jun 21
 			 4:00	Russia	+04/+05	1989 Mar 26  2:00s
 			 3:00	Russia	+03/+04	1991 Mar 31  2:00s
@@ -2662,12 +2683,12 @@ Zone Europe/Ulyanovsk	 3:13:36 -	LMT	1919 Jul  1  2:00
 
 Zone Asia/Yekaterinburg	 4:02:33 -	LMT	1916 Jul  3
 			 3:45:05 -	PMT	1919 Jul 15  4:00
-			 4:00	-	SVET	1930 Jun 21 # Sverdlovsk Time
-			 5:00	Russia	SVE%sT	1991 Mar 31  2:00s
-			 4:00	Russia	SVE%sT	1992 Jan 19  2:00s
-			 5:00	Russia	YEK%sT	2011 Mar 27  2:00s
-			 6:00	-	YEKT	2014 Oct 26  2:00s
-			 5:00	-	YEKT
+			 4:00	-	+04	1930 Jun 21
+			 5:00	Russia	+05/+06	1991 Mar 31  2:00s
+			 4:00	Russia	+04/+05	1992 Jan 19  2:00s
+			 5:00	Russia	+05/+06	2011 Mar 27  2:00s
+			 6:00	-	+06	2014 Oct 26  2:00s
+			 5:00	-	+05
 
 
 # From Tim Parenti (2014-07-03), per Oscar van Vlijmen (2001-08-25):
@@ -2677,12 +2698,12 @@ Zone Asia/Yekaterinburg	 4:02:33 -	LMT	1916 Jul  3
 # Byalokoz 1919 says Omsk was 4:53:30.
 
 Zone Asia/Omsk		 4:53:30 -	LMT	1919 Nov 14
-			 5:00	-	OMST	1930 Jun 21 # Omsk Time
-			 6:00	Russia	OMS%sT	1991 Mar 31  2:00s
-			 5:00	Russia	OMS%sT	1992 Jan 19  2:00s
-			 6:00	Russia	OMS%sT	2011 Mar 27  2:00s
-			 7:00	-	OMST	2014 Oct 26  2:00s
-			 6:00	-	OMST
+			 5:00	-	+05	1930 Jun 21
+			 6:00	Russia	+06/+07	1991 Mar 31  2:00s
+			 5:00	Russia	+05/+06	1992 Jan 19  2:00s
+			 6:00	Russia	+06/+07	2011 Mar 27  2:00s
+			 7:00	-	+07	2014 Oct 26  2:00s
+			 6:00	-	+06
 
 # From Paul Eggert (2016-02-22):
 # Asia/Barnaul covers:
@@ -2762,7 +2783,7 @@ Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14  6:00
 # Note that time belts (numbered from 2 (Moscow) to 12 according to their
 # GMT/UTC offset and having too many exceptions like regions formally
 # belonging to one belt but using time from another) were replaced
-# with time zones in 2011 with different numberings (there was a
+# with time zones in 2011 with different numbering (there was a
 # 2-hour gap between second and third zones in 2011-2014).
 
 # From Stepan Golosunov (2016-04-12):
@@ -2845,12 +2866,12 @@ Zone Asia/Novokuznetsk	 5:48:48 -	LMT	1924 May  1
 # Byalokoz 1919 says Krasnoyarsk was 6:11:26.
 
 Zone Asia/Krasnoyarsk	 6:11:26 -	LMT	1920 Jan  6
-			 6:00	-	KRAT	1930 Jun 21 # Krasnoyarsk Time
-			 7:00	Russia	KRA%sT	1991 Mar 31  2:00s
-			 6:00	Russia	KRA%sT	1992 Jan 19  2:00s
-			 7:00	Russia	KRA%sT	2011 Mar 27  2:00s
-			 8:00	-	KRAT	2014 Oct 26  2:00s
-			 7:00	-	KRAT
+			 6:00	-	+06	1930 Jun 21
+			 7:00	Russia	+07/+08	1991 Mar 31  2:00s
+			 6:00	Russia	+06/+07	1992 Jan 19  2:00s
+			 7:00	Russia	+07/+08	2011 Mar 27  2:00s
+			 8:00	-	+08	2014 Oct 26  2:00s
+			 7:00	-	+07
 
 
 # From Tim Parenti (2014-07-03), per Oscar van Vlijmen (2001-08-25):
@@ -2867,12 +2888,12 @@ Zone Asia/Krasnoyarsk	 6:11:26 -	LMT	1920 Jan  6
 
 Zone Asia/Irkutsk	 6:57:05 -	LMT	1880
 			 6:57:05 -	IMT	1920 Jan 25 # Irkutsk Mean Time
-			 7:00	-	IRKT	1930 Jun 21 # Irkutsk Time
-			 8:00	Russia	IRK%sT	1991 Mar 31  2:00s
-			 7:00	Russia	IRK%sT	1992 Jan 19  2:00s
-			 8:00	Russia	IRK%sT	2011 Mar 27  2:00s
-			 9:00	-	IRKT	2014 Oct 26  2:00s
-			 8:00	-	IRKT
+			 7:00	-	+07	1930 Jun 21
+			 8:00	Russia	+08/+09	1991 Mar 31  2:00s
+			 7:00	Russia	+07/+08	1992 Jan 19  2:00s
+			 8:00	Russia	+08/+09	2011 Mar 27  2:00s
+			 9:00	-	+09	2014 Oct 26  2:00s
+			 8:00	-	+08
 
 
 # From Tim Parenti (2014-07-06):
@@ -2889,13 +2910,13 @@ Zone Asia/Irkutsk	 6:57:05 -	LMT	1880
 # http://publication.pravo.gov.ru/Document/View/0001201512300107
 
 Zone Asia/Chita	 7:33:52 -	LMT	1919 Dec 15
-			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
-			 9:00	Russia	YAK%sT	1991 Mar 31  2:00s
-			 8:00	Russia	YAK%sT	1992 Jan 19  2:00s
-			 9:00	Russia	YAK%sT	2011 Mar 27  2:00s
-			10:00	-	YAKT	2014 Oct 26  2:00s
-			 8:00	-	IRKT	2016 Mar 27  2:00
-			 9:00	-	YAKT
+			 8:00	-	+08	1930 Jun 21
+			 9:00	Russia	+09/+10	1991 Mar 31  2:00s
+			 8:00	Russia	+08/+09	1992 Jan 19  2:00s
+			 9:00	Russia	+09/+10	2011 Mar 27  2:00s
+			10:00	-	+10	2014 Oct 26  2:00s
+			 8:00	-	+08	2016 Mar 27  2:00
+			 9:00	-	+09
 
 
 # From Tim Parenti (2014-07-03), per Oscar van Vlijmen (2009-11-29):
@@ -2935,12 +2956,12 @@ Zone Asia/Chita	 7:33:52 -	LMT	1919 Dec 15
 # Byalokoz 1919 says Yakutsk was 8:38:58.
 
 Zone Asia/Yakutsk	 8:38:58 -	LMT	1919 Dec 15
-			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
-			 9:00	Russia	YAK%sT	1991 Mar 31  2:00s
-			 8:00	Russia	YAK%sT	1992 Jan 19  2:00s
-			 9:00	Russia	YAK%sT	2011 Mar 27  2:00s
-			10:00	-	YAKT	2014 Oct 26  2:00s
-			 9:00	-	YAKT
+			 8:00	-	+08	1930 Jun 21
+			 9:00	Russia	+09/+10	1991 Mar 31  2:00s
+			 8:00	Russia	+08/+09	1992 Jan 19  2:00s
+			 9:00	Russia	+09/+10	2011 Mar 27  2:00s
+			10:00	-	+10	2014 Oct 26  2:00s
+			 9:00	-	+09
 
 
 # From Tim Parenti (2014-07-03), per Oscar van Vlijmen (2009-11-29):
@@ -2958,12 +2979,12 @@ Zone Asia/Yakutsk	 8:38:58 -	LMT	1919 Dec 15
 # Go with Byalokoz.
 
 Zone Asia/Vladivostok	 8:47:31 -	LMT	1922 Nov 15
-			 9:00	-	VLAT	1930 Jun 21 # Vladivostok Time
-			10:00	Russia	VLA%sT	1991 Mar 31  2:00s
-			 9:00	Russia	VLA%sT	1992 Jan 19  2:00s
-			10:00	Russia	VLA%sT	2011 Mar 27  2:00s
-			11:00	-	VLAT	2014 Oct 26  2:00s
-			10:00	-	VLAT
+			 9:00	-	+09	1930 Jun 21
+			10:00	Russia	+10/+11	1991 Mar 31  2:00s
+			 9:00	Russia	+09/+10	1992 Jan 19  2:00s
+			10:00	Russia	+10/+11	2011 Mar 27  2:00s
+			11:00	-	+11	2014 Oct 26  2:00s
+			10:00	-	+10
 
 
 # From Tim Parenti (2014-07-03):
@@ -2981,14 +3002,14 @@ Zone Asia/Vladivostok	 8:47:31 -	LMT	1922 Nov 15
 # This transition is no doubt wrong, but we have no better info.
 
 Zone Asia/Khandyga	 9:02:13 -	LMT	1919 Dec 15
-			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
-			 9:00	Russia	YAK%sT	1991 Mar 31  2:00s
-			 8:00	Russia	YAK%sT	1992 Jan 19  2:00s
-			 9:00	Russia	YAK%sT	2004
-			10:00	Russia	VLA%sT	2011 Mar 27  2:00s
-			11:00	-	VLAT	2011 Sep 13  0:00s # Decree 725?
-			10:00	-	YAKT	2014 Oct 26  2:00s
-			 9:00	-	YAKT
+			 8:00	-	+08	1930 Jun 21
+			 9:00	Russia	+09/+10	1991 Mar 31  2:00s
+			 8:00	Russia	+08/+09	1992 Jan 19  2:00s
+			 9:00	Russia	+09/+10	2004
+			10:00	Russia	+10/+11	2011 Mar 27  2:00s
+			11:00	-	+11	2011 Sep 13  0:00s # Decree 725?
+			10:00	-	+10	2014 Oct 26  2:00s
+			 9:00	-	+09
 
 
 # From Tim Parenti (2014-07-03):
@@ -3004,15 +3025,14 @@ Zone Asia/Khandyga	 9:02:13 -	LMT	1919 Dec 15
 
 # The Zone name should be Asia/Yuzhno-Sakhalinsk, but that's too long.
 Zone Asia/Sakhalin	 9:30:48 -	LMT	1905 Aug 23
-			 9:00	-	JCST	1937 Oct  1
-			 9:00	-	JST	1945 Aug 25
-			11:00	Russia	SAK%sT	1991 Mar 31  2:00s # Sakhalin T
-			10:00	Russia	SAK%sT	1992 Jan 19  2:00s
-			11:00	Russia	SAK%sT	1997 Mar lastSun  2:00s
-			10:00	Russia	SAK%sT	2011 Mar 27  2:00s
-			11:00	-	SAKT	2014 Oct 26  2:00s
-			10:00	-	SAKT	2016 Mar 27  2:00s
-			11:00	-	SAKT
+			 9:00	-	+09	1945 Aug 25
+			11:00	Russia	+11/+12	1991 Mar 31  2:00s # Sakhalin T
+			10:00	Russia	+10/+11	1992 Jan 19  2:00s
+			11:00	Russia	+11/+12	1997 Mar lastSun  2:00s
+			10:00	Russia	+10/+11	2011 Mar 27  2:00s
+			11:00	-	+11	2014 Oct 26  2:00s
+			10:00	-	+10	2016 Mar 27  2:00s
+			11:00	-	+11
 
 
 # From Tim Parenti (2014-07-03), per Oscar van Vlijmen (2009-11-29):
@@ -3035,13 +3055,13 @@ Zone Asia/Sakhalin	 9:30:48 -	LMT	1905 Aug 23
 # http://publication.pravo.gov.ru/Document/View/0001201604050038
 
 Zone Asia/Magadan	10:03:12 -	LMT	1924 May  2
-			10:00	-	MAGT	1930 Jun 21 # Magadan Time
-			11:00	Russia	MAG%sT	1991 Mar 31  2:00s
-			10:00	Russia	MAG%sT	1992 Jan 19  2:00s
-			11:00	Russia	MAG%sT	2011 Mar 27  2:00s
-			12:00	-	MAGT	2014 Oct 26  2:00s
-			10:00	-	MAGT	2016 Apr 24  2:00s
-			11:00	-	MAGT
+			10:00	-	+10	1930 Jun 21 # Magadan Time
+			11:00	Russia	+11/+12	1991 Mar 31  2:00s
+			10:00	Russia	+10/+11	1992 Jan 19  2:00s
+			11:00	Russia	+11/+12	2011 Mar 27  2:00s
+			12:00	-	+12	2014 Oct 26  2:00s
+			10:00	-	+10	2016 Apr 24  2:00s
+			11:00	-	+11
 
 
 # From Tim Parenti (2014-07-06):
@@ -3084,17 +3104,14 @@ Zone Asia/Magadan	10:03:12 -	LMT	1924 May  2
 # in Russian.)  In addition, Srednekolymsk appears to be a much older
 # settlement and the population of Zyryanka seems to be declining.
 # Go with Srednekolymsk.
-#
-# Since Magadan Oblast moves to UTC+10 on 2014-10-26, we cannot keep using MAGT
-# as the abbreviation.  Use SRET instead.
 
 Zone Asia/Srednekolymsk	10:14:52 -	LMT	1924 May  2
-			10:00	-	MAGT	1930 Jun 21 # Magadan Time
-			11:00	Russia	MAG%sT	1991 Mar 31  2:00s
-			10:00	Russia	MAG%sT	1992 Jan 19  2:00s
-			11:00	Russia	MAG%sT	2011 Mar 27  2:00s
-			12:00	-	MAGT	2014 Oct 26  2:00s
-			11:00	-	SRET	# Srednekolymsk Time
+			10:00	-	+10	1930 Jun 21
+			11:00	Russia	+11/+12	1991 Mar 31  2:00s
+			10:00	Russia	+10/+11	1992 Jan 19  2:00s
+			11:00	Russia	+11/+12	2011 Mar 27  2:00s
+			12:00	-	+12	2014 Oct 26  2:00s
+			11:00	-	+11
 
 
 # From Tim Parenti (2014-07-03):
@@ -3112,14 +3129,14 @@ Zone Asia/Srednekolymsk	10:14:52 -	LMT	1924 May  2
 # UTC+12 since at least then, too.
 
 Zone Asia/Ust-Nera	 9:32:54 -	LMT	1919 Dec 15
-			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
-			 9:00	Russia	YAKT	1981 Apr  1
-			11:00	Russia	MAG%sT	1991 Mar 31  2:00s
-			10:00	Russia	MAG%sT	1992 Jan 19  2:00s
-			11:00	Russia	MAG%sT	2011 Mar 27  2:00s
-			12:00	-	MAGT	2011 Sep 13  0:00s # Decree 725?
-			11:00	-	VLAT	2014 Oct 26  2:00s
-			10:00	-	VLAT
+			 8:00	-	+08	1930 Jun 21
+			 9:00	Russia	+09/+10	1981 Apr  1
+			11:00	Russia	+11/+12	1991 Mar 31  2:00s
+			10:00	Russia	+10/+11	1992 Jan 19  2:00s
+			11:00	Russia	+11/+12	2011 Mar 27  2:00s
+			12:00	-	+12	2011 Sep 13  0:00s # Decree 725?
+			11:00	-	+11	2014 Oct 26  2:00s
+			10:00	-	+10
 
 
 # From Tim Parenti (2014-07-03), per Oscar van Vlijmen (2001-08-25):
@@ -3132,12 +3149,12 @@ Zone Asia/Ust-Nera	 9:32:54 -	LMT	1919 Dec 15
 # The Zone name should be Asia/Petropavlovsk-Kamchatski or perhaps
 # Asia/Petropavlovsk-Kamchatsky, but these are too long.
 Zone Asia/Kamchatka	10:34:36 -	LMT	1922 Nov 10
-			11:00	-	PETT	1930 Jun 21 # P-K Time
-			12:00	Russia	PET%sT	1991 Mar 31  2:00s
-			11:00	Russia	PET%sT	1992 Jan 19  2:00s
-			12:00	Russia	PET%sT	2010 Mar 28  2:00s
-			11:00	Russia	PET%sT	2011 Mar 27  2:00s
-			12:00	-	PETT
+			11:00	-	+11	1930 Jun 21
+			12:00	Russia	+12/+13	1991 Mar 31  2:00s
+			11:00	Russia	+11/+12	1992 Jan 19  2:00s
+			12:00	Russia	+12/+13	2010 Mar 28  2:00s
+			11:00	Russia	+11/+12	2011 Mar 27  2:00s
+			12:00	-	+12
 
 
 # From Tim Parenti (2014-07-03):
@@ -3145,13 +3162,13 @@ Zone Asia/Kamchatka	10:34:36 -	LMT	1922 Nov 10
 # 87	RU-CHU	Chukotka Autonomous Okrug
 
 Zone Asia/Anadyr	11:49:56 -	LMT	1924 May  2
-			12:00	-	ANAT	1930 Jun 21 # Anadyr Time
-			13:00	Russia	ANA%sT	1982 Apr  1  0:00s
-			12:00	Russia	ANA%sT	1991 Mar 31  2:00s
-			11:00	Russia	ANA%sT	1992 Jan 19  2:00s
-			12:00	Russia	ANA%sT	2010 Mar 28  2:00s
-			11:00	Russia	ANA%sT	2011 Mar 27  2:00s
-			12:00	-	ANAT
+			12:00	-	+12	1930 Jun 21
+			13:00	Russia	+13/+14	1982 Apr  1  0:00s
+			12:00	Russia	+12/+13	1991 Mar 31  2:00s
+			11:00	Russia	+11/+12	1992 Jan 19  2:00s
+			12:00	Russia	+12/+13	2010 Mar 28  2:00s
+			11:00	Russia	+11/+12	2011 Mar 27  2:00s
+			12:00	-	+12
 
 
 # San Marino
@@ -3472,6 +3489,14 @@ Zone	Europe/Zurich	0:34:08 -	LMT	1853 Jul 16 # See above comment.
 # Engineered Standard Time," said Twitter user @aysekarahasan.
 # http://www.bbc.com/news/world-europe-34631326
 
+# From Burak AYDIN (2016-09-08):
+# Turkey will stay in Daylight Saving Time even in winter....
+# http://www.resmigazete.gov.tr/eskiler/2016/09/20160908-2.pdf
+#
+# From Paul Eggert (2016-09-07):
+# The change is permanent, so this is the new standard time in Turkey.
+# It takes effect today, which is not much notice.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Turkey	1916	only	-	May	 1	0:00	1:00	S
 Rule	Turkey	1916	only	-	Oct	 1	0:00	0	-
@@ -3535,7 +3560,7 @@ Rule	Turkey	1996	2006	-	Oct	lastSun	1:00s	0	-
 Zone	Europe/Istanbul	1:55:52 -	LMT	1880
 			1:56:56	-	IMT	1910 Oct # Istanbul Mean Time?
 			2:00	Turkey	EE%sT	1978 Oct 15
-			3:00	Turkey	TR%sT	1985 Apr 20 # Turkey Time
+			3:00	Turkey	+03/+04	1985 Apr 20
 			2:00	Turkey	EE%sT	2007
 			2:00	EU	EE%sT	2011 Mar 27  1:00u
 			2:00	-	EET	2011 Mar 28  1:00u
@@ -3543,7 +3568,8 @@ Zone	Europe/Istanbul	1:55:52 -	LMT	1880
 			2:00	-	EET	2014 Mar 31  1:00u
 			2:00	EU	EE%sT	2015 Oct 25  1:00u
 			2:00	1:00	EEST	2015 Nov  8  1:00u
-			2:00	EU	EE%sT
+			2:00	EU	EE%sT	2016 Sep  7
+			3:00	-	+03
 Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
 
 # Ukraine
diff --git a/src/main/java/org/joda/time/tz/src/northamerica b/src/main/java/org/joda/time/tz/src/northamerica
index 6256f970a..0bafb00a2 100644
--- a/src/main/java/org/joda/time/tz/src/northamerica
+++ b/src/main/java/org/joda/time/tz/src/northamerica
@@ -413,11 +413,42 @@ Zone America/Denver	-6:59:56 -	LMT	1883 Nov 18 12:00:04
 # north of the Salmon River, and the towns of Burgdorf and Warren),
 # Nevada (except West Wendover), Oregon (except the northern 3/4 of
 # Malheur county), and Washington
+
+# From Paul Eggert (2016-08-20):
+# In early February 1948, in response to California's electricity shortage,
+# PG&E changed power frequency from 60 to 59.5 Hz during daylight hours,
+# causing electric clocks to lose six minutes per day.  (This did not change
+# legal time, and is not part of the data here.)  See:
+# Ross SA. An energy crisis from the past: Northern California in 1948.
+# Working Paper No. 8, Institute of Governmental Studies, UC Berkeley,
+# 1973-11.  http://escholarship.org/uc/item/8x22k30c
+#
+# In another measure to save electricity, DST was instituted from 1948-03-14
+# at 02:01 to 1949-01-16 at 02:00, with the governor having the option to move
+# the fallback transition earlier.  See pages 3-4 of:
+# http://clerk.assembly.ca.gov/sites/clerk.assembly.ca.gov/files/archive/Statutes/1948/48Vol1_Chapters.pdf
+#
+# In response:
+#
+#   Governor Warren received a torrent of objecting mail, and it is not too much
+#   to speculate that the objections to Daylight Saving Time were one important
+#   factor in the defeat of the Dewey-Warren Presidential ticket in California.
+#     -- Ross, p 25
+#
+# On December 8 the governor exercised the option, setting the date to January 1
+# (LA Times 1948-12-09).  The transition time was 02:00 (LA Times 1949-01-01).
+#
+# Despite the controversy, in 1949 California voters approved Proposition 12,
+# which established DST from April's last Sunday at 01:00 until September's
+# last Sunday at 02:00. This was amended by 1962's Proposition 6, which changed
+# the fall-back date to October's last Sunday. See:
+# http://repository.uchastings.edu/cgi/viewcontent.cgi?article=1501&context=ca_ballot_props
+# http://repository.uchastings.edu/cgi/viewcontent.cgi?article=1636&context=ca_ballot_props
 #
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	CA	1948	only	-	Mar	14	2:00	1:00	D
+Rule	CA	1948	only	-	Mar	14	2:01	1:00	D
 Rule	CA	1949	only	-	Jan	 1	2:00	0	S
-Rule	CA	1950	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	CA	1950	1966	-	Apr	lastSun	1:00	1:00	D
 Rule	CA	1950	1961	-	Sep	lastSun	2:00	0	S
 Rule	CA	1962	1966	-	Oct	lastSun	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -3281,7 +3312,7 @@ Zone America/Miquelon	-3:44:40 -	LMT	1911 May 15 # St Pierre
 # indicating that the normal ET rules are followed.
 #
 # From Paul Eggert (2014-08-19):
-# The 2014-08-13 Cabinet meeting decided to stay on UTC-4 year-round.  See:
+# The 2014-08-13 Cabinet meeting decided to stay on UT -04 year-round.  See:
 # http://tcweeklynews.com/daylight-savings-time-to-be-maintained-p5353-127.htm
 # Model this as a switch from EST/EDT to AST ...
 # From Chris Walton (2014-11-04):
diff --git a/src/main/java/org/joda/time/tz/src/southamerica b/src/main/java/org/joda/time/tz/src/southamerica
index 1c38f63d1..532145172 100644
--- a/src/main/java/org/joda/time/tz/src/southamerica
+++ b/src/main/java/org/joda/time/tz/src/southamerica
@@ -410,9 +410,9 @@ Rule	Arg	2008	only	-	Oct	Sun>=15	0:00	1:00	S
 # stuck on Summer daylight savings time even though the summer is over.
 
 # From Paul Eggert (2013-09-05):
-# Perhaps San Luis operates on the legal fiction that it is at UTC-4
+# Perhaps San Luis operates on the legal fiction that it is at -04
 # with perpetual summer time, but ordinary usage typically seems to
-# just say it's at UTC-3; see, for example,
+# just say it's at -03; see, for example,
 # http://es.wikipedia.org/wiki/Hora_oficial_argentina
 # We've documented similar situations as being plain changes to
 # standard time, so let's do that here too.  This does not change UTC

From ca7bec7931d244bf0cd344efe480aa9d9c54db9e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 19 Oct 2016 23:58:31 +0100
Subject: [PATCH 19/25] Better documentation of comparisons

Fixes #401
---
 .../org/joda/time/base/AbstractDuration.java  |  4 ++--
 .../org/joda/time/base/AbstractInstant.java   | 24 +++++++++----------
 .../org/joda/time/base/AbstractPartial.java   |  4 ++--
 3 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/src/main/java/org/joda/time/base/AbstractDuration.java b/src/main/java/org/joda/time/base/AbstractDuration.java
index 554dc5e8d..4d57acadc 100644
--- a/src/main/java/org/joda/time/base/AbstractDuration.java
+++ b/src/main/java/org/joda/time/base/AbstractDuration.java
@@ -120,7 +120,7 @@ public boolean isEqual(ReadableDuration duration) {
      * Is the length of this duration longer than the duration passed in.
      *
      * @param duration  another duration to compare to, null means zero milliseconds
-     * @return true if this duration is longer than the duration passed in
+     * @return true if this duration is strictly longer than the duration passed in
      */
     public boolean isLongerThan(ReadableDuration duration) {
         if (duration == null) {
@@ -133,7 +133,7 @@ public boolean isLongerThan(ReadableDuration duration) {
      * Is the length of this duration shorter than the duration passed in.
      *
      * @param duration  another duration to compare to, null means zero milliseconds
-     * @return true if this duration is shorter than the duration passed in
+     * @return true if this duration is strictly shorter than the duration passed in
      */
     public boolean isShorterThan(ReadableDuration duration) {
         if (duration == null) {
diff --git a/src/main/java/org/joda/time/base/AbstractInstant.java b/src/main/java/org/joda/time/base/AbstractInstant.java
index 2df2d58e9..6344248f7 100644
--- a/src/main/java/org/joda/time/base/AbstractInstant.java
+++ b/src/main/java/org/joda/time/base/AbstractInstant.java
@@ -313,32 +313,32 @@ public int compareTo(ReadableInstant other) {
 
     //-----------------------------------------------------------------------
     /**
-     * Is this instant after the millisecond instant passed in
+     * Is this instant strictly after the millisecond instant passed in
      * comparing solely by millisecond.
      *
      * @param instant  a millisecond instant to check against
-     * @return true if this instant is after the instant passed in
+     * @return true if this instant is strictly after the instant passed in
      */
     public boolean isAfter(long instant) {
         return (getMillis() > instant);
     }
 
     /**
-     * Is this instant after the current instant
+     * Is this instant strictly after the current instant
      * comparing solely by millisecond.
      * 
-     * @return true if this instant is after the current instant
+     * @return true if this instant is strictly after the current instant
      */
     public boolean isAfterNow() {
         return isAfter(DateTimeUtils.currentTimeMillis());
     }
 
     /**
-     * Is this instant after the instant passed in
+     * Is this instant strictly after the instant passed in
      * comparing solely by millisecond.
      *
      * @param instant  an instant to check against, null means now
-     * @return true if the instant is after the instant passed in
+     * @return true if the instant is strictly after the instant passed in
      */
     public boolean isAfter(ReadableInstant instant) {
         long instantMillis = DateTimeUtils.getInstantMillis(instant);
@@ -347,32 +347,32 @@ public boolean isAfter(ReadableInstant instant) {
 
     //-----------------------------------------------------------------------
     /**
-     * Is this instant before the millisecond instant passed in
+     * Is this instant strictly before the millisecond instant passed in
      * comparing solely by millisecond.
      *
      * @param instant  a millisecond instant to check against
-     * @return true if this instant is before the instant passed in
+     * @return true if this instant is strictly before the instant passed in
      */
     public boolean isBefore(long instant) {
         return (getMillis() < instant);
     }
 
     /**
-     * Is this instant before the current instant
+     * Is this instant strictly before the current instant
      * comparing solely by millisecond.
      * 
-     * @return true if this instant is before the current instant
+     * @return true if this instant is strictly before the current instant
      */
     public boolean isBeforeNow() {
         return isBefore(DateTimeUtils.currentTimeMillis());
     }
 
     /**
-     * Is this instant before the instant passed in
+     * Is this instant strictly before the instant passed in
      * comparing solely by millisecond.
      *
      * @param instant  an instant to check against, null means now
-     * @return true if the instant is before the instant passed in
+     * @return true if the instant is strictly before the instant passed in
      */
     public boolean isBefore(ReadableInstant instant) {
         long instantMillis = DateTimeUtils.getInstantMillis(instant);
diff --git a/src/main/java/org/joda/time/base/AbstractPartial.java b/src/main/java/org/joda/time/base/AbstractPartial.java
index fb9310255..419a52b64 100644
--- a/src/main/java/org/joda/time/base/AbstractPartial.java
+++ b/src/main/java/org/joda/time/base/AbstractPartial.java
@@ -341,7 +341,7 @@ public int compareTo(ReadablePartial other) {
      * a time zone to accurately determine the current date.
      *
      * @param partial  a partial to check against, must not be null
-     * @return true if this date is after the date passed in
+     * @return true if this date is strictly after the date passed in
      * @throws IllegalArgumentException if the specified partial is null
      * @throws ClassCastException if the partial has field types that don't match
      * @since 1.1
@@ -363,7 +363,7 @@ public boolean isAfter(ReadablePartial partial) {
      * a time zone to accurately determine the current date.
      *
      * @param partial  a partial to check against, must not be null
-     * @return true if this date is before the date passed in
+     * @return true if this date is strictly before the date passed in
      * @throws IllegalArgumentException if the specified partial is null
      * @throws ClassCastException if the partial has field types that don't match
      * @since 1.1

From eda629fffe60c8315f813950e811c21d8879c557 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 3 Nov 2016 12:49:45 +0000
Subject: [PATCH 20/25] Update time-zone database to 2016i

---
 RELEASE-NOTES.txt                             |   2 +-
 pom.xml                                       |   2 +-
 src/main/java/org/joda/time/tz/src/Readme.txt |   2 +-
 src/main/java/org/joda/time/tz/src/antarctica |   7 +-
 src/main/java/org/joda/time/tz/src/asia       |  97 ++++-----
 .../java/org/joda/time/tz/src/australasia     |  26 ++-
 src/main/java/org/joda/time/tz/src/europe     | 187 ++++++++++--------
 .../java/org/joda/time/tz/src/northamerica    |  28 ++-
 8 files changed, 210 insertions(+), 141 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 37785588f..59a138a46 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -19,7 +19,7 @@ Changes in 2.9.5
 
  - Add Duration.dividedBy(long,RoundingMode) [#69, #379]
 
- - DateTimeZone data updated to version 2016g
+ - DateTimeZone data updated to version 2016i
 
  - Fixed minor issues with historic time-zone data [#373]
 
diff --git a/pom.xml b/pom.xml
index 672218c21..e2ad919f2 100644
--- a/pom.xml
+++ b/pom.xml
@@ -914,6 +914,6 @@
     <!-- Other properties -->
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
-    <tz.database.version>2016g</tz.database.version>
+    <tz.database.version>2016i</tz.database.version>
   </properties>
 </project>
diff --git a/src/main/java/org/joda/time/tz/src/Readme.txt b/src/main/java/org/joda/time/tz/src/Readme.txt
index 608c5b74c..186bbe9fc 100644
--- a/src/main/java/org/joda/time/tz/src/Readme.txt
+++ b/src/main/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public IANA time zone database,
-http://www.iana.org/time-zones, version 2016f.
+http://www.iana.org/time-zones, version 2016i.
diff --git a/src/main/java/org/joda/time/tz/src/antarctica b/src/main/java/org/joda/time/tz/src/antarctica
index 099583575..6da1aef87 100644
--- a/src/main/java/org/joda/time/tz/src/antarctica
+++ b/src/main/java/org/joda/time/tz/src/antarctica
@@ -64,13 +64,18 @@
 # Background:
 # http://www.timeanddate.com/news/time/antartica-time-changes-2010.html
 
+# From Steffen Thorsen (2016-10-28):
+# Australian Antarctica Division informed us that Casey changed time
+# zone to UTC+11 in "the morning of 22nd October 2016".
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Antarctica/Casey	0	-	-00	1969
 			8:00	-	+08	2009 Oct 18  2:00
 			11:00	-	+11	2010 Mar  5  2:00
 			8:00	-	+08	2011 Oct 28  2:00
 			11:00	-	+11	2012 Feb 21 17:00u
-			8:00	-	+08
+			8:00	-	+08	2016 Oct 22
+			11:00	-	+11
 Zone Antarctica/Davis	0	-	-00	1957 Jan 13
 			7:00	-	+07	1964 Nov
 			0	-	-00	1969 Feb
diff --git a/src/main/java/org/joda/time/tz/src/asia b/src/main/java/org/joda/time/tz/src/asia
index 71ef8787b..67164b3d8 100644
--- a/src/main/java/org/joda/time/tz/src/asia
+++ b/src/main/java/org/joda/time/tz/src/asia
@@ -771,9 +771,19 @@ Zone	Asia/Macau	7:34:20 -	LMT	1912 Jan  1
 ###############################################################################
 
 # Cyprus
-#
+
 # Milne says the Eastern Telegraph Company used 2:14:00.  Stick with LMT.
+# IATA SSIM (1998-09) has Cyprus using EU rules for the first time.
+
+# From Paul Eggert (2016-09-09):
+# Yesterday's Cyprus Mail reports that Northern Cyprus followed Turkey's
+# lead and switched from +02/+03 to +03 year-round.
+# http://cyprus-mail.com/2016/09/08/two-time-zones-cyprus-turkey-will-not-turn-clocks-back-next-month/
 #
+# From Even Scharning (2016-10-31):
+# Looks like the time zone split in Cyprus went through last night.
+# http://cyprus-mail.com/2016/10/30/cyprus-new-division-two-time-zones-now-reality/
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Cyprus	1975	only	-	Apr	13	0:00	1:00	S
 Rule	Cyprus	1975	only	-	Oct	12	0:00	0	-
@@ -788,7 +798,10 @@ Rule	Cyprus	1981	1998	-	Mar	lastSun	0:00	1:00	S
 Zone	Asia/Nicosia	2:13:28 -	LMT	1921 Nov 14
 			2:00	Cyprus	EE%sT	1998 Sep
 			2:00	EUAsia	EE%sT
-# IATA SSIM (1998-09) has Cyprus using EU rules for the first time.
+Zone	Asia/Famagusta	2:15:48	-	LMT	1921 Nov 14
+			2:00	Cyprus	EE%sT	1998 Sep
+			2:00	EUAsia	EE%sT	2016 Sep  8
+			3:00	-	+03
 
 # Classically, Cyprus belongs to Asia; e.g. see Herodotus, Histories, I.72.
 # However, for various reasons many users expect to find it under Europe.
@@ -2544,11 +2557,6 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # From Paul Eggert (2015-03-03):
 # http://www.timeanddate.com/time/change/west-bank/ramallah?year=2014
 # says that the fall 2014 transition was Oct 23 at 24:00.
-# For future dates, guess the last Friday in March at 24:00 through
-# the first Friday on or after October 21 at 00:00.  This is consistent with
-# the predictions in today's editions of the following URLs:
-# http://www.timeanddate.com/time/change/gaza-strip/gaza
-# http://www.timeanddate.com/time/change/west-bank/hebron
 
 # From Hannah Kreitem (2016-03-09):
 # http://www.palestinecabinet.gov.ps/WebSite/ar/ViewDetails?ID=31728
@@ -2558,7 +2566,21 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 #
 # From Paul Eggert (2016-03-12):
 # Predict spring transitions on March's last Saturday at 01:00 from now on.
-# Leave fall predictions alone for now.
+
+# From Sharef Mustafa (2016-10-19):
+# [T]he Palestinian cabinet decision (Mar 8th 2016) published on
+# http://www.palestinecabinet.gov.ps/WebSite/Upload/Decree/GOV_17/16032016134830.pdf
+# states that summer time will end on Oct 29th at 01:00.
+#
+# From Tim Parenti (2016-10-19):
+# Predict fall transitions on October's last Saturday at 01:00 from now on.
+# This is consistent with the 2016 transition as well as our spring
+# predictions.
+#
+# From Paul Eggert (2016-10-19):
+# It's also consistent with predictions in the following URLs today:
+# http://www.timeanddate.com/time/change/gaza-strip/gaza
+# http://www.timeanddate.com/time/change/west-bank/hebron
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
@@ -2587,9 +2609,10 @@ Rule Palestine	2011	only	-	Sep	30	0:00	0	-
 Rule Palestine	2012	2014	-	Mar	lastThu	24:00	1:00	S
 Rule Palestine	2012	only	-	Sep	21	1:00	0	-
 Rule Palestine	2013	only	-	Sep	Fri>=21	0:00	0	-
-Rule Palestine	2014	max	-	Oct	Fri>=21	0:00	0	-
+Rule Palestine	2014	2015	-	Oct	Fri>=21	0:00	0	-
 Rule Palestine	2015	only	-	Mar	lastFri	24:00	1:00	S
 Rule Palestine	2016	max	-	Mar	lastSat	1:00	1:00	S
+Rule Palestine	2016	max	-	Oct	lastSat	1:00	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
@@ -2739,45 +2762,31 @@ Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
 # People who live in regions under Tamil control can use [TZ='Asia/Kolkata'],
 # as that zone has agreed with the Tamil areas since our cutoff date of 1970.
 
-# From K Sethu (2006-04-25):
-# I think the abbreviation LKT originated from the world of computers at
-# the time of or subsequent to the time zone changes by SL Government
-# twice in 1996 and probably SL Government or its standardization
-# agencies never declared an abbreviation as a national standard.
-#
-# I recollect before the recent change the government announcements
-# mentioning it as simply changing Sri Lanka Standard Time or Sri Lanka
-# Time and no mention was made about the abbreviation.
-#
-# If we look at Sri Lanka Department of Government's "Official News
-# Website of Sri Lanka" ... http://www.news.lk/ we can see that they
-# use SLT as abbreviation in time stamp at the beginning of each news
-# item....
-#
-# Within Sri Lanka I think LKT is well known among computer users and
-# administrators.  In my opinion SLT may not be a good choice because the
-# nation's largest telcom / internet operator Sri Lanka Telcom is well
-# known by that abbreviation - simply as SLT (there IP domains are
-# slt.lk and sltnet.lk).
-#
-# But if indeed our government has adopted SLT as standard abbreviation
-# (that we have not known so far) then  it is better that it be used for
-# all computers.
-
-# From Paul Eggert (2006-04-25):
-# One possibility is that we wait for a bit for the dust to settle down
-# and then see what people actually say in practice.
+# From Sadika Sumanapala (2016-10-19):
+# According to http://www.sltime.org (maintained by Measurement Units,
+# Standards & Services Department, Sri Lanka) abbreviation for Sri Lanka
+# standard time is SLST.
+#
+# From Paul Eggert (2016-10-18):
+# "SLST" seems to be reasonably recent and rarely-used outside time
+# zone nerd sources.  I searched Google News and found three uses of
+# it in the International Business Times of India in February and
+# March of this year when discussing cricket match times, but nothing
+# since then (though there has been a lot of cricket) and nothing in
+# other English-language news sources.  Our old abbreviation "LKT" is
+# even worse.  For now, let's use a numeric abbreviation; we can
+# switch to "SLST" if it catches on.
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Colombo	5:19:24 -	LMT	1880
 			5:19:32	-	MMT	1906        # Moratuwa Mean Time
-			5:30	-	IST	1942 Jan  5
-			5:30	0:30	IHST	1942 Sep
-			5:30	1:00	IST	1945 Oct 16  2:00
-			5:30	-	IST	1996 May 25  0:00
-			6:30	-	LKT	1996 Oct 26  0:30
-			6:00	-	LKT	2006 Apr 15  0:30
-			5:30	-	IST
+			5:30	-	+0530	1942 Jan  5
+			5:30	0:30	+0530/+06 1942 Sep
+			5:30	1:00	+0530/+0630 1945 Oct 16  2:00
+			5:30	-	+0530	1996 May 25  0:00
+			6:30	-	+0630	1996 Oct 26  0:30
+			6:00	-	+06	2006 Apr 15  0:30
+			5:30	-	+0530
 
 # Syria
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
diff --git a/src/main/java/org/joda/time/tz/src/australasia b/src/main/java/org/joda/time/tz/src/australasia
index f49df1d6e..0bca53e2e 100644
--- a/src/main/java/org/joda/time/tz/src/australasia
+++ b/src/main/java/org/joda/time/tz/src/australasia
@@ -350,7 +350,13 @@ Zone	Indian/Cocos	6:27:40	-	LMT	1900
 # commencing at 2.00 am on Sunday 1st November, 2015 and ending at
 # 3.00 am on Sunday 17th January, 2016.
 
-# From Paul Eggert (2015-09-01):
+# From Raymond Kumar (2016-10-04):
+# http://www.fiji.gov.fj/Media-Center/Press-Releases/DAYLIGHT-SAVING-STARTS-ON-6th-NOVEMBER,-2016.aspx
+# "Fiji's daylight savings will begin on Sunday, 6 November 2016, when
+# clocks go forward an hour at 2am to 3am....  Daylight Saving will
+# end at 3.00am on Sunday 15th January 2017."
+
+# From Paul Eggert (2016-10-03):
 # For now, guess DST from 02:00 the first Sunday in November to
 # 03:00 the third Sunday in January.  Although ad hoc, it matches
 # transitions since late 2014 and seems more likely to match future
@@ -696,11 +702,13 @@ Rule	Tonga	1999	only	-	Oct	 7	2:00s	1:00	S
 Rule	Tonga	2000	only	-	Mar	19	2:00s	0	-
 Rule	Tonga	2000	2001	-	Nov	Sun>=1	2:00	1:00	S
 Rule	Tonga	2001	2002	-	Jan	lastSun	2:00	0	-
+Rule	Tonga	2016	max	-	Nov	Sun>=1	2:00	1:00	S
+Rule	Tonga	2017	max	-	Jan	Sun>=15	3:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Pacific/Tongatapu	12:19:20 -	LMT	1901
-			12:20	-	TOT	1941 # Tonga Time
-			13:00	-	TOT	1999
-			13:00	Tonga	TO%sT
+			12:20	-	+1220	1941
+			13:00	-	+13	1999
+			13:00	Tonga	+13/+14
 
 # Tuvalu
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -1706,9 +1714,17 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # of January the standard time in the Kingdom shall be moved backward by one
 # hour to 1:00am.
 
-# From Pulu 'Anau (2002-11-05):
+# From Pulu ʻAnau (2002-11-05):
 # The law was for 3 years, supposedly to get renewed.  It wasn't.
 
+# From Pulu ʻAnau (2016-10-27):
+# http://mic.gov.to/news-today/press-releases/6375-daylight-saving-set-to-run-from-6-november-2016-to-15-january-2017
+# Cannot find anyone who knows the rules, has seen the duration or has seen
+# the cabinet decision, but it appears we are following Fiji's rule set.
+#
+# From Tim Parenti (2016-10-26):
+# Assume Tonga will observe DST from the first Sunday in November at 02:00
+# through the third Sunday in January at 03:00, like Fiji, for now.
 
 # Wake
 
diff --git a/src/main/java/org/joda/time/tz/src/europe b/src/main/java/org/joda/time/tz/src/europe
index 6020059f6..4709cc742 100644
--- a/src/main/java/org/joda/time/tz/src/europe
+++ b/src/main/java/org/joda/time/tz/src/europe
@@ -1500,73 +1500,84 @@ Zone Atlantic/Reykjavik	-1:28	-	LMT	1908
 # But these events all occurred before the 1970 cutoff,
 # so record only the time in Rome.
 #
-# From Paul Eggert (2006-03-22):
-# For Italian DST we have three sources: Shanks & Pottenger, Whitman, and
-# F. Pollastri
-# Day-light Saving Time in Italy (2006-02-03)
-# http://toi.iriti.cnr.it/uk/ienitlt.html
-# ('FP' below), taken from an Italian National Electrotechnical Institute
-# publication. When the three sources disagree, guess who's right, as follows:
-#
-# year	FP	Shanks&P. (S)	Whitman (W)	Go with:
-# 1916	06-03	06-03 24:00	06-03 00:00	FP & W
-#	09-30	09-30 24:00	09-30 01:00	FP; guess 24:00s
-# 1917	04-01	03-31 24:00	03-31 00:00	FP & S
-#	09-30	09-29 24:00	09-30 01:00	FP & W
-# 1918	03-09	03-09 24:00	03-09 00:00	FP & S
-#	10-06	10-05 24:00	10-06 01:00	FP & W
-# 1919	03-01	03-01 24:00	03-01 00:00	FP & S
-#	10-04	10-04 24:00	10-04 01:00	FP; guess 24:00s
-# 1920	03-20	03-20 24:00	03-20 00:00	FP & S
-#	09-18	09-18 24:00	10-01 01:00	FP; guess 24:00s
-# 1944	04-02	04-03 02:00			S (see C-Eur)
-#	09-16	10-02 03:00			FP; guess 24:00s
-# 1945	09-14	09-16 24:00			FP; guess 24:00s
-# 1970	05-21	05-31 00:00			S
-#	09-20	09-27 00:00			S
+# From Michael Deckers (2016-10-24):
+# http://www.ac-ilsestante.it/MERIDIANE/ora_legale quotes a law of 1893-08-10
+# ... [translated as] "The preceding dispositions will enter into
+# force at the instant at which, according to the time specified in
+# the 1st article, the 1st of November 1893 will begin...."
+#
+# From Pierpaolo Bernardi (2016-10-20):
+# The authoritative source for time in Italy is the national metrological
+# institute, which has a summary page of historical DST data at
+# http://www.inrim.it/res/tf/ora_legale_i.shtml
+# (2016-10-24):
+# http://www.renzobaldini.it/le-ore-legali-in-italia/
+# has still different data for 1944.  It divides Italy in two, as
+# there were effectively two governments at the time, north of Gothic
+# Line German controlled territory, official government RSI, and south
+# of the Gothic Line, controlled by allied armies.
+#
+# From Brian Inglis (2016-10-23):
+# Viceregal LEGISLATIVE DECREE. 14 September 1944, no. 219.
+# Restoration of Standard Time. (044U0219) (OJ 62 of 30.9.1944) ...
+# Given the R. law decreed on 1944-03-29, no. 92, by which standard time is
+# advanced to sixty minutes later starting at hour two on 1944-04-02; ...
+# Starting at hour three on the date 1944-09-17 standard time will be resumed.
+#
+# From Paul Eggert (2016-10-27):
+# Go with INRiM for DST rules, except as corrected by Inglis for 1944
+# for the Kingdom of Italy.  This is consistent with Renzo Baldini.
+# Model Rome's occupation by using using C-Eur rules from 1943-09-10
+# to 1944-06-04; although Rome was an open city during this period, it
+# was effectively controlled by Germany.
 #
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Italy	1916	only	-	Jun	 3	0:00s	1:00	S
-Rule	Italy	1916	only	-	Oct	 1	0:00s	0	-
-Rule	Italy	1917	only	-	Apr	 1	0:00s	1:00	S
-Rule	Italy	1917	only	-	Sep	30	0:00s	0	-
-Rule	Italy	1918	only	-	Mar	10	0:00s	1:00	S
-Rule	Italy	1918	1919	-	Oct	Sun>=1	0:00s	0	-
-Rule	Italy	1919	only	-	Mar	 2	0:00s	1:00	S
-Rule	Italy	1920	only	-	Mar	21	0:00s	1:00	S
-Rule	Italy	1920	only	-	Sep	19	0:00s	0	-
-Rule	Italy	1940	only	-	Jun	15	0:00s	1:00	S
-Rule	Italy	1944	only	-	Sep	17	0:00s	0	-
-Rule	Italy	1945	only	-	Apr	 2	2:00	1:00	S
-Rule	Italy	1945	only	-	Sep	15	0:00s	0	-
-Rule	Italy	1946	only	-	Mar	17	2:00s	1:00	S
-Rule	Italy	1946	only	-	Oct	 6	2:00s	0	-
-Rule	Italy	1947	only	-	Mar	16	0:00s	1:00	S
-Rule	Italy	1947	only	-	Oct	 5	0:00s	0	-
-Rule	Italy	1948	only	-	Feb	29	2:00s	1:00	S
-Rule	Italy	1948	only	-	Oct	 3	2:00s	0	-
-Rule	Italy	1966	1968	-	May	Sun>=22	0:00	1:00	S
-Rule	Italy	1966	1969	-	Sep	Sun>=22	0:00	0	-
-Rule	Italy	1969	only	-	Jun	 1	0:00	1:00	S
-Rule	Italy	1970	only	-	May	31	0:00	1:00	S
-Rule	Italy	1970	only	-	Sep	lastSun	0:00	0	-
-Rule	Italy	1971	1972	-	May	Sun>=22	0:00	1:00	S
-Rule	Italy	1971	only	-	Sep	lastSun	1:00	0	-
-Rule	Italy	1972	only	-	Oct	 1	0:00	0	-
-Rule	Italy	1973	only	-	Jun	 3	0:00	1:00	S
-Rule	Italy	1973	1974	-	Sep	lastSun	0:00	0	-
-Rule	Italy	1974	only	-	May	26	0:00	1:00	S
-Rule	Italy	1975	only	-	Jun	 1	0:00s	1:00	S
-Rule	Italy	1975	1977	-	Sep	lastSun	0:00s	0	-
-Rule	Italy	1976	only	-	May	30	0:00s	1:00	S
-Rule	Italy	1977	1979	-	May	Sun>=22	0:00s	1:00	S
-Rule	Italy	1978	only	-	Oct	 1	0:00s	0	-
-Rule	Italy	1979	only	-	Sep	30	0:00s	0	-
+Rule	Italy	1916	only	-	Jun	 3	24:00	1:00	S
+Rule	Italy	1916	1917	-	Sep	30	24:00	0	-
+Rule	Italy	1917	only	-	Mar	31	24:00	1:00	S
+Rule	Italy	1918	only	-	Mar	 9	24:00	1:00	S
+Rule	Italy	1918	only	-	Oct	 6	24:00	0	-
+Rule	Italy	1919	only	-	Mar	 1	24:00	1:00	S
+Rule	Italy	1919	only	-	Oct	 4	24:00	0	-
+Rule	Italy	1920	only	-	Mar	20	24:00	1:00	S
+Rule	Italy	1920	only	-	Sep	18	24:00	0	-
+Rule	Italy	1940	only	-	Jun	14	24:00	1:00	S
+Rule	Italy	1942	only	-	Nov	 2	 2:00s	0	-
+Rule	Italy	1943	only	-	Mar	29	 2:00s	1:00	S
+Rule	Italy	1943	only	-	Oct	 4	 2:00s	0	-
+Rule	Italy	1944	only	-	Apr	 2	 2:00s	1:00	S
+Rule	Italy	1944	only	-	Sep	17	 2:00s	0	-
+Rule	Italy	1945	only	-	Apr	 2	 2:00	1:00	S
+Rule	Italy	1945	only	-	Sep	15	 1:00	0	-
+Rule	Italy	1946	only	-	Mar	17	 2:00s	1:00	S
+Rule	Italy	1946	only	-	Oct	 6	 2:00s	0	-
+Rule	Italy	1947	only	-	Mar	16	 0:00s	1:00	S
+Rule	Italy	1947	only	-	Oct	 5	 0:00s	0	-
+Rule	Italy	1948	only	-	Feb	29	 2:00s	1:00	S
+Rule	Italy	1948	only	-	Oct	 3	 2:00s	0	-
+Rule	Italy	1966	1968	-	May	Sun>=22	 0:00s	1:00	S
+Rule	Italy	1966	only	-	Sep	24	24:00	0	-
+Rule	Italy	1967	1969	-	Sep	Sun>=22	 0:00s	0	-
+Rule	Italy	1969	only	-	Jun	 1	 0:00s	1:00	S
+Rule	Italy	1970	only	-	May	31	 0:00s	1:00	S
+Rule	Italy	1970	only	-	Sep	lastSun	 0:00s	0	-
+Rule	Italy	1971	1972	-	May	Sun>=22	 0:00s	1:00	S
+Rule	Italy	1971	only	-	Sep	lastSun	 0:00s	0	-
+Rule	Italy	1972	only	-	Oct	 1	 0:00s	0	-
+Rule	Italy	1973	only	-	Jun	 3	 0:00s	1:00	S
+Rule	Italy	1973	1974	-	Sep	lastSun	 0:00s	0	-
+Rule	Italy	1974	only	-	May	26	 0:00s	1:00	S
+Rule	Italy	1975	only	-	Jun	 1	 0:00s	1:00	S
+Rule	Italy	1975	1977	-	Sep	lastSun	 0:00s	0	-
+Rule	Italy	1976	only	-	May	30	 0:00s	1:00	S
+Rule	Italy	1977	1979	-	May	Sun>=22	 0:00s	1:00	S
+Rule	Italy	1978	only	-	Oct	 1	 0:00s	0	-
+Rule	Italy	1979	only	-	Sep	30	 0:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Rome	0:49:56 -	LMT	1866 Sep 22
-			0:49:56	-	RMT	1893 Nov  1  0:00s # Rome Mean
-			1:00	Italy	CE%sT	1942 Nov  2  2:00s
-			1:00	C-Eur	CE%sT	1944 Jul
+			0:49:56	-	RMT	1893 Oct 31 23:49:56 # Rome Mean
+			1:00	Italy	CE%sT	1943 Sep 10
+			1:00	C-Eur	CE%sT	1944 Jun  4
 			1:00	Italy	CE%sT	1980
 			1:00	EU	CE%sT
 
@@ -1765,6 +1776,10 @@ Zone Europe/Luxembourg	0:24:36 -	LMT	1904 Jun
 # See Europe/Belgrade.
 
 # Malta
+#
+# From Paul Eggert (2016-10-21):
+# Assume 1900-1972 was like Rome, overriding Shanks.
+#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Malta	1973	only	-	Mar	31	0:00s	1:00	S
 Rule	Malta	1973	only	-	Sep	29	0:00s	0	-
@@ -1775,8 +1790,6 @@ Rule	Malta	1975	1980	-	Sep	Sun>=15	2:00	0	-
 Rule	Malta	1980	only	-	Mar	31	2:00	1:00	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2  0:00s # Valletta
-			1:00	Italy	CE%sT	1942 Nov  2  2:00s
-			1:00	C-Eur	CE%sT	1945 Apr  2  2:00s
 			1:00	Italy	CE%sT	1973 Mar 31
 			1:00	Malta	CE%sT	1981
 			1:00	EU	CE%sT
@@ -1908,7 +1921,7 @@ Zone	Europe/Monaco	0:29:32 -	LMT	1891 Mar 15
 # Amsterdam mean time.
 
 # The data entries before 1945 are taken from
-# http://www.phys.uu.nl/~vgent/wettijd/wettijd.htm
+# http://www.staff.science.uu.nl/~gent0113/wettijd/wettijd.htm
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Neth	1916	only	-	May	 1	0:00	1:00	NST	# Netherlands Summer Time
@@ -3427,22 +3440,24 @@ Zone	Europe/Zurich	0:34:08 -	LMT	1853 Jul 16 # See above comment.
 
 # Turkey
 
-# From Amar Devegowda (2007-01-03):
-# The time zone rules for Istanbul, Turkey have not been changed for years now.
-# ... The latest rules are available at:
-# http://www.timeanddate.com/worldclock/timezone.html?n=107
-# From Steffen Thorsen (2007-01-03):
-# I have been able to find press records back to 1996 which all say that
-# DST started 01:00 local time and end at 02:00 local time.  I am not sure
-# what happened before that.  One example for each year from 1996 to 2001:
-# http://newspot.byegm.gov.tr/arsiv/1996/21/N4.htm
-# http://www.byegm.gov.tr/YAYINLARIMIZ/CHR/ING97/03/97X03X25.TXT
-# http://www.byegm.gov.tr/YAYINLARIMIZ/CHR/ING98/03/98X03X02.HTM
-# http://www.byegm.gov.tr/YAYINLARIMIZ/CHR/ING99/10/99X10X26.HTM#%2016
-# http://www.byegm.gov.tr/YAYINLARIMIZ/CHR/ING2000/03/00X03X06.HTM#%2021
-# http://www.byegm.gov.tr/YAYINLARIMIZ/CHR/ING2001/03/23x03x01.HTM#%2027
-# From Paul Eggert (2007-01-03):
-# Prefer the above source to Shanks & Pottenger for time stamps after 1990.
+# From Kıvanç Yazan (2016-09-25):
+# 1) For 1986-2006, DST started at 01:00 local and ended at 02:00 local, with
+#    no exceptions.
+# 2) 1994's lastSun was overridden with Mar 20 ...
+# Here are official papers:
+# http://www.resmigazete.gov.tr/arsiv/19032.pdf  - page 2 for 1986
+# http://www.resmigazete.gov.tr/arsiv/19400.pdf  - page 4 for 1987
+# http://www.resmigazete.gov.tr/arsiv/19752.pdf  - page 15 for 1988
+# http://www.resmigazete.gov.tr/arsiv/20102.pdf  - page 6 for 1989
+# http://www.resmigazete.gov.tr/arsiv/20464.pdf  - page 1 for 1990 - 1992
+# http://www.resmigazete.gov.tr/arsiv/21531.pdf  - page 15 for 1993 - 1995
+# http://www.resmigazete.gov.tr/arsiv/21879.pdf  - page 1 for overriding 1994
+# http://www.resmigazete.gov.tr/arsiv/22588.pdf  - page 1 for 1996, 1997
+# http://www.resmigazete.gov.tr/arsiv/23286.pdf  - page 10 for 1998 - 2000
+# http://www.resmigazete.gov.tr/eskiler/2001/03/20010324.htm#2  - for 2001
+# http://www.resmigazete.gov.tr/eskiler/2002/03/20020316.htm#2  - for 2002-2006
+# From Paul Eggert (2016-09-25):
+# Prefer the above sources to Shanks & Pottenger for time stamps after 1985.
 
 # From Steffen Thorsen (2007-03-09):
 # Starting 2007 though, it seems that they are adopting EU's 1:00 UTC
@@ -3551,10 +3566,10 @@ Rule	Turkey	1983	only	-	Jul	31	0:00	1:00	S
 Rule	Turkey	1983	only	-	Oct	 2	0:00	0	-
 Rule	Turkey	1985	only	-	Apr	20	0:00	1:00	S
 Rule	Turkey	1985	only	-	Sep	28	0:00	0	-
-Rule	Turkey	1986	1990	-	Mar	lastSun	2:00s	1:00	S
-Rule	Turkey	1986	1990	-	Sep	lastSun	2:00s	0	-
-Rule	Turkey	1991	2006	-	Mar	lastSun	1:00s	1:00	S
-Rule	Turkey	1991	1995	-	Sep	lastSun	1:00s	0	-
+Rule	Turkey	1986	1993	-	Mar	lastSun	1:00s	1:00	S
+Rule	Turkey	1986	1995	-	Sep	lastSun	1:00s	0	-
+Rule	Turkey	1994	only	-	Mar	20	1:00s	1:00	S
+Rule	Turkey	1995	2006	-	Mar	lastSun	1:00s	1:00	S
 Rule	Turkey	1996	2006	-	Oct	lastSun	1:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Istanbul	1:55:52 -	LMT	1880
diff --git a/src/main/java/org/joda/time/tz/src/northamerica b/src/main/java/org/joda/time/tz/src/northamerica
index 0bafb00a2..e1ed9e4a8 100644
--- a/src/main/java/org/joda/time/tz/src/northamerica
+++ b/src/main/java/org/joda/time/tz/src/northamerica
@@ -24,8 +24,32 @@
 # was the result of his proposals at the Convention of Railroad Trunk Lines
 # in New York City (1869-10).  His 1870 proposal was based on Washington, DC,
 # but in 1872-05 he moved the proposed origin to Greenwich.
-# His proposal was adopted by the railroads on 1883-11-18 at 12:00,
-# and the most of the country soon followed suit.
+
+# From Paul Eggert (2016-09-21):
+# Dowd's proposal left many details unresolved, such as where to draw
+# lines between time zones.  The key individual who made time zones
+# work in the US was William Frederick Allen - railway engineer,
+# managing editor of the Travelers' Guide, and secretary of the
+# General Time Convention, a railway standardization group.  Allen
+# spent months in dialogs with scientific and railway leaders,
+# developed a workable plan to institute time zones, and presented it
+# to the General Time Convention on 1883-04-11, saying that his plan
+# meant "local time would be practically abolished" - a plus for
+# railway scheduling.  By the next convention on 1883-10-11 nearly all
+# railroads had agreed and it took effect on 1883-11-18 at 12:00.
+# That Sunday was called the "day of two noons", as the eastern parts
+# of the new zones observed noon twice.  Allen witnessed the
+# transition in New York City, writing:
+#
+#   I heard the bells of St. Paul's strike on the old time.  Four
+#   minutes later, obedient to the electrical signal from the Naval
+#   Observatory ... the time-ball made its rapid descent, the chimes
+#   of old Trinity rang twelve measured strokes, and local time was
+#   abandoned, probably forever.
+#
+# Most of the US soon followed suit.  See:
+# Bartky IR. The adoption of standard time. Technol Cult 1989 Jan;30(1):25-56.
+# http://dx.doi.org/10.2307/3105430
 
 # From Paul Eggert (2005-04-16):
 # That 1883 transition occurred at 12:00 new time, not at 12:00 old time.

From 4d84d89207088ff08fc76d00bf90a56525aa7589 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 3 Nov 2016 12:56:05 +0000
Subject: [PATCH 21/25] Close buffered reader correctly in zone info compiler

Fixes #396
---
 RELEASE-NOTES.txt                                    |  2 ++
 src/main/java/org/joda/time/tz/ZoneInfoCompiler.java | 12 +++++++++---
 2 files changed, 11 insertions(+), 3 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 59a138a46..dd6bf7b04 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -28,6 +28,8 @@ Changes in 2.9.5
   was not the last element in the input string. New approach uses a
   different approach to the problem.
 
+ - Close buffered reader correctly in zone info compiler [#396]
+
 
 Changes in 2.9.4
 ----------------
diff --git a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
index 84ca5b807..ee02add04 100644
--- a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
+++ b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
@@ -358,9 +358,15 @@ public ZoneInfoCompiler() {
     public Map<String, DateTimeZone> compile(File outputDir, File[] sources) throws IOException {
         if (sources != null) {
             for (int i=0; i<sources.length; i++) {
-                BufferedReader in = new BufferedReader(new FileReader(sources[i]));
-                parseDataFile(in, "backward".equals(sources[i].getName()));
-                in.close();
+                BufferedReader in = null;
+                try {
+                    in = new BufferedReader(new FileReader(sources[i]));
+                    parseDataFile(in, "backward".equals(sources[i].getName()));
+                } finally {
+                    if (in != null) {
+                        in.close();
+                    }
+                }
             }
         }
 

From f81758e92881cb18bc1e0a84e2ac64464dd5ba85 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 3 Nov 2016 12:58:40 +0000
Subject: [PATCH 22/25] Handle locale correctly zone info compiler

Fixes #397
---
 RELEASE-NOTES.txt                                    | 2 ++
 src/main/java/org/joda/time/tz/ZoneInfoCompiler.java | 2 +-
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index dd6bf7b04..d4cd38e4a 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -30,6 +30,8 @@ Changes in 2.9.5
 
  - Close buffered reader correctly in zone info compiler [#396]
 
+ - Handle locale correctly zone info compiler [#397]
+
 
 Changes in 2.9.4
 ----------------
diff --git a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
index ee02add04..63a3ac209 100644
--- a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
+++ b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
@@ -192,7 +192,7 @@ static void writeZoneInfoMap(DataOutputStream dout, Map<String, DateTimeZone> zi
     }
 
     static int parseYear(String str, int def) {
-        str = str.toLowerCase();
+        str = str.toLowerCase(Locale.ENGLISH);
         if (str.equals("minimum") || str.equals("min")) {
             return Integer.MIN_VALUE;
         } else if (str.equals("maximum") || str.equals("max")) {

From dc437656ff8b825e87d7edf72125dc368b21c885 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 3 Nov 2016 13:07:11 +0000
Subject: [PATCH 23/25] Comparing two nulls in DateTimeComparator

Fixed bug where clock read twice
Fixes #404
---
 RELEASE-NOTES.txt                                      |  2 ++
 src/main/java/org/joda/time/DateTimeComparator.java    |  6 ++++++
 .../java/org/joda/time/TestDateTimeComparator.java     | 10 ++++++++++
 3 files changed, 18 insertions(+)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index d4cd38e4a..11493826a 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -21,6 +21,8 @@ Changes in 2.9.5
 
  - DateTimeZone data updated to version 2016i
 
+ - Fixed bug where clock read twice when comparing two nulls in DateTimeComparator [#404]
+
  - Fixed minor issues with historic time-zone data [#373]
 
  - Fix bug in time-zone binary search [#332, #386]
diff --git a/src/main/java/org/joda/time/DateTimeComparator.java b/src/main/java/org/joda/time/DateTimeComparator.java
index 646918f56..f96846c00 100644
--- a/src/main/java/org/joda/time/DateTimeComparator.java
+++ b/src/main/java/org/joda/time/DateTimeComparator.java
@@ -193,6 +193,12 @@ public int compare(Object lhsObj, Object rhsObj) {
         Chronology lhsChrono = conv.getChronology(lhsObj, (Chronology) null);
         long lhsMillis = conv.getInstantMillis(lhsObj, lhsChrono);
         
+        // handle null==null and other cases where objects are the same
+        // but only do this after checking the input is valid
+        if (lhsObj == rhsObj) {
+            return 0;
+        }
+        
         conv = ConverterManager.getInstance().getInstantConverter(rhsObj);
         Chronology rhsChrono = conv.getChronology(rhsObj, (Chronology) null);
         long rhsMillis = conv.getInstantMillis(rhsObj, rhsChrono);
diff --git a/src/test/java/org/joda/time/TestDateTimeComparator.java b/src/test/java/org/joda/time/TestDateTimeComparator.java
index 2d5e7a003..0371be3e8 100644
--- a/src/test/java/org/joda/time/TestDateTimeComparator.java
+++ b/src/test/java/org/joda/time/TestDateTimeComparator.java
@@ -214,6 +214,7 @@ public void testStaticGetInstanceLower() {
         c = DateTimeComparator.getInstance(null);
         assertSame(DateTimeComparator.getInstance(), c);
     }
+
     public void testStaticGetInstanceLowerUpper() {
         DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear());
         assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit());
@@ -235,6 +236,15 @@ public void testStaticGetInstanceLowerUpper() {
         assertSame(DateTimeComparator.getTimeOnlyInstance(), c);
     }
     
+    public void testNullNowCheckedOnce() {
+        // checks a race condition against the system clock, issue #404
+        for (int i = 0; i < 10000; i++) {
+            if (DateTimeComparator.getInstance().compare(null, null) != 0) {
+                fail("Comparing (null, null) should always return 0");
+            }
+        }
+    }
+    
     //-----------------------------------------------------------------------
     public void testEqualsHashCode() {
         DateTimeComparator c1 = DateTimeComparator.getInstance();

From fb2063b3f83610f29572b631edaa7e0471d249ac Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 3 Nov 2016 15:53:54 +0000
Subject: [PATCH 24/25] Update tests for JDK 9

Fixes #394
---
 RELEASE-NOTES.txt                             |  2 +
 .../java/org/joda/time/TestDateTimeZone.java  | 59 +++++++++++++------
 .../time/convert/TestCalendarConverter.java   |  8 ++-
 .../joda/time/format/TestDateTimeFormat.java  | 20 ++++---
 .../time/format/TestDateTimeFormatter.java    |  2 +-
 5 files changed, 63 insertions(+), 28 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 11493826a..30118d874 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -30,6 +30,8 @@ Changes in 2.9.5
   was not the last element in the input string. New approach uses a
   different approach to the problem.
 
+ - Update tests for JDK 9 [#394]
+
  - Close buffered reader correctly in zone info compiler [#396]
 
  - Handle locale correctly zone info compiler [#397]
diff --git a/src/test/java/org/joda/time/TestDateTimeZone.java b/src/test/java/org/joda/time/TestDateTimeZone.java
index 140498987..76d30b34e 100644
--- a/src/test/java/org/joda/time/TestDateTimeZone.java
+++ b/src/test/java/org/joda/time/TestDateTimeZone.java
@@ -738,15 +738,27 @@ public void testGetNameKey() {
         assertEquals("GMT", zone.getNameKey(TEST_TIME_WINTER));
     }
 
-    static final boolean JDK6;
+    static final boolean JDK6PLUS;
     static {
-      boolean jdk6 = true;
-      try {
-        DateFormatSymbols.class.getMethod("getInstance", new Class[] {Locale.class});
-      } catch (Exception ex) {
-        jdk6 = false;
-      } 
-      JDK6 = jdk6;
+        boolean jdk6 = true;
+        try {
+            DateFormatSymbols.class.getMethod("getInstance", new Class[] { Locale.class });
+        } catch (Exception ex) {
+            jdk6 = false;
+        }
+        JDK6PLUS = jdk6;
+    }
+
+    static final boolean JDK9;
+    static {
+        boolean jdk9 = true;
+        try {
+            String str = System.getProperty("java.version");
+            jdk9 = str.startsWith("9");
+        } catch (Exception ex) {
+            jdk9 = false;
+        }
+        JDK9 = jdk9;
     }
 
     public void testGetShortName() {
@@ -760,7 +772,7 @@ public void testGetShortName_berlin() {
         DateTimeZone berlin = DateTimeZone.forID("Europe/Berlin");
         assertEquals("CET", berlin.getShortName(TEST_TIME_WINTER, Locale.ENGLISH));
         assertEquals("CEST", berlin.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));
-        if (JDK6) {
+        if (JDK6PLUS) {
           assertEquals("MEZ", berlin.getShortName(TEST_TIME_WINTER, Locale.GERMAN));
           assertEquals("MESZ", berlin.getShortName(TEST_TIME_SUMMER, Locale.GERMAN));
         } else {
@@ -788,18 +800,29 @@ public void testGetName() {
         assertEquals("British Summer Time", zone.getName(TEST_TIME_SUMMER, Locale.ENGLISH));
     }
 
-    public void testGetName_berlin() {
+    public void testGetName_berlin_english() {
       DateTimeZone berlin = DateTimeZone.forID("Europe/Berlin");
-      assertEquals("Central European Time", berlin.getName(TEST_TIME_WINTER, Locale.ENGLISH));
-      assertEquals("Central European Summer Time", berlin.getName(TEST_TIME_SUMMER, Locale.ENGLISH));
-      if (JDK6) {
-        assertEquals("Mitteleurop\u00e4ische Zeit", berlin.getName(TEST_TIME_WINTER, Locale.GERMAN));
-        assertEquals("Mitteleurop\u00e4ische Sommerzeit", berlin.getName(TEST_TIME_SUMMER, Locale.GERMAN));
+      if (JDK9) {
+          assertEquals("Central European Standard Time", berlin.getName(TEST_TIME_WINTER, Locale.ENGLISH));
       } else {
-        assertEquals("Zentraleurop\u00e4ische Zeit", berlin.getName(TEST_TIME_WINTER, Locale.GERMAN));
-        assertEquals("Zentraleurop\u00e4ische Sommerzeit", berlin.getName(TEST_TIME_SUMMER, Locale.GERMAN));
+          assertEquals("Central European Time", berlin.getName(TEST_TIME_WINTER, Locale.ENGLISH));
       }
-  }
+      assertEquals("Central European Summer Time", berlin.getName(TEST_TIME_SUMMER, Locale.ENGLISH));
+    }
+
+    public void testGetName_berlin_german() {
+        DateTimeZone berlin = DateTimeZone.forID("Europe/Berlin");
+        if (JDK9) {
+            assertEquals("Mitteleurop\u00e4ische Normalzeit", berlin.getName(TEST_TIME_WINTER, Locale.GERMAN));
+            assertEquals("Mitteleurop\u00e4ische Sommerzeit", berlin.getName(TEST_TIME_SUMMER, Locale.GERMAN));
+        } else if (JDK6PLUS) {
+            assertEquals("Mitteleurop\u00e4ische Zeit", berlin.getName(TEST_TIME_WINTER, Locale.GERMAN));
+            assertEquals("Mitteleurop\u00e4ische Sommerzeit", berlin.getName(TEST_TIME_SUMMER, Locale.GERMAN));
+        } else {
+            assertEquals("Zentraleurop\u00e4ische Zeit", berlin.getName(TEST_TIME_WINTER, Locale.GERMAN));
+            assertEquals("Zentraleurop\u00e4ische Sommerzeit", berlin.getName(TEST_TIME_SUMMER, Locale.GERMAN));
+        }
+    }
 
     public void testGetNameProviderName() {
         assertEquals(null, DateTimeZone.getNameProvider().getName(null, "Europe/London", "BST"));
diff --git a/src/test/java/org/joda/time/convert/TestCalendarConverter.java b/src/test/java/org/joda/time/convert/TestCalendarConverter.java
index 3c41c4b1c..3f76db136 100644
--- a/src/test/java/org/joda/time/convert/TestCalendarConverter.java
+++ b/src/test/java/org/joda/time/convert/TestCalendarConverter.java
@@ -123,7 +123,9 @@ public void testGetChronology_Object_Zone() throws Exception {
             bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));
             assertEquals(BuddhistChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(bc, PARIS));
         } catch (ClassNotFoundException ex) {
-            // ignore
+            // ignore not Sun JDK
+        } catch (IllegalAccessException ex) {
+            // ignore JDK 9 modules
         }
     }
 
@@ -154,7 +156,9 @@ public void testGetChronology_Object_nullChronology() throws Exception {
             bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));
             assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null));
         } catch (ClassNotFoundException ex) {
-            // ignore
+            // ignore not Sun JDK
+        } catch (IllegalAccessException ex) {
+            // ignore JDK 9 modules
         }
     }
 
diff --git a/src/test/java/org/joda/time/format/TestDateTimeFormat.java b/src/test/java/org/joda/time/format/TestDateTimeFormat.java
index a55cd39ec..a2562b2f3 100644
--- a/src/test/java/org/joda/time/format/TestDateTimeFormat.java
+++ b/src/test/java/org/joda/time/format/TestDateTimeFormat.java
@@ -28,6 +28,8 @@
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
 import org.joda.time.chrono.GJChronology;
+import org.joda.time.tz.DefaultNameProvider;
+import org.joda.time.tz.NameProvider;
 
 /**
  * This class is a Junit unit test for DateTime Formating.
@@ -625,13 +627,13 @@ public void testFormat_dayOfMonth() {
     public void testFormat_halfdayOfDay() {
         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
         DateTimeFormatter f = DateTimeFormat.forPattern("a").withLocale(Locale.UK);
-        assertEquals(dt.toString(), "AM", f.print(dt));
+        assertEquals(dt.toString(), "AM", f.print(dt).toUpperCase(Locale.ENGLISH));
         
         dt = dt.withZone(NEWYORK);
-        assertEquals(dt.toString(), "AM", f.print(dt));
+        assertEquals(dt.toString(), "AM", f.print(dt).toUpperCase(Locale.ENGLISH));
         
         dt = dt.withZone(TOKYO);
-        assertEquals(dt.toString(), "PM", f.print(dt));
+        assertEquals(dt.toString(), "PM", f.print(dt).toUpperCase(Locale.ENGLISH));
     }
 
     //-----------------------------------------------------------------------
@@ -753,7 +755,7 @@ public void testFormat_fractionOfSecondLong() {
     //-----------------------------------------------------------------------
     public void testFormat_zoneText() {
         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
-        DateTimeFormatter f = DateTimeFormat.forPattern("z").withLocale(Locale.UK);
+        DateTimeFormatter f = DateTimeFormat.forPattern("z").withLocale(Locale.ENGLISH);
         assertEquals(dt.toString(), "UTC", f.print(dt));
         
         dt = dt.withZone(NEWYORK);
@@ -765,9 +767,13 @@ public void testFormat_zoneText() {
 
     public void testFormat_zoneLongText() {
         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
-        DateTimeFormatter f = DateTimeFormat.forPattern("zzzz").withLocale(Locale.UK);
+        DateTimeFormatter f = DateTimeFormat.forPattern("zzzz").withLocale(Locale.ENGLISH);
         assertEquals(dt.toString(), "Coordinated Universal Time", f.print(dt));
         
+        System.out.println("***" + UTC.getName(TEST_TIME_NOW));
+        System.out.println("***" + NEWYORK.getName(TEST_TIME_NOW));
+        System.out.println("***" + TOKYO.getName(TEST_TIME_NOW));
+        
         dt = dt.withZone(NEWYORK);
         assertEquals(dt.toString(), "Eastern Daylight Time", f.print(dt));
         
@@ -1006,7 +1012,7 @@ public void testFormatParse_textHalfdayAM_UK() {
             .withLocale(Locale.UK).withZoneUTC();
         
         String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter);
-        assertEquals("$06-PM-2007", str);
+        assertEquals("$06-PM-2007", str.toUpperCase(Locale.ENGLISH));
         DateTime date = dateFormatter.parseDateTime(str);
         check(date, 2007, 1, 1);
     }
@@ -1066,7 +1072,7 @@ public void testFormatParse_textEraBC_France() {
             .withLocale(Locale.FRANCE).withZoneUTC();
         
         String str = new DateTime(-1, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);
-        assertEquals("$BC-0001", str);
+        assertTrue(str.equals("$BC-0001") || str.equals("$av. J.-C.-0001"));
         DateTime date = dateFormatter.parseDateTime(str);
         check(date, -1, 1, 1);
     }
diff --git a/src/test/java/org/joda/time/format/TestDateTimeFormatter.java b/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
index 152581a9b..f74d78bd3 100644
--- a/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
@@ -1037,7 +1037,7 @@ public void testZoneShortNameNearTransition() {
         DateTime outDST   = new DateTime(2005, 10, 30, 2, 0, 0, 1, NEWYORK);
         DateTime outDST_2 = new DateTime(2005, 10, 30, 2, 0, 1, 0, NEWYORK);
 
-        DateTimeFormatter fmt = DateTimeFormat.forPattern("yyy-MM-dd HH:mm:ss.S z");
+        DateTimeFormatter fmt = DateTimeFormat.forPattern("yyy-MM-dd HH:mm:ss.S z").withLocale(Locale.ENGLISH);
         assertEquals("2005-10-30 01:00:00.0 EDT", fmt.print(inDST_1));
         assertEquals("2005-10-30 01:59:59.9 EDT", fmt.print(inDST_2));
         assertEquals("2005-10-30 02:00:00.0 EST", fmt.print(onDST));

From 9839f89a0c35f24c21cc026ecc5b1664f7707225 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 3 Nov 2016 16:02:29 +0000
Subject: [PATCH 25/25] Release v2.9.5

---
 README.md                      |   8 +-
 RELEASE-NOTES.txt              |   2 +-
 pom.xml                        |   5 +-
 src/conf/MANIFEST.MF           |  18 ++--
 src/site/markdown/index.md     |   6 +-
 src/site/xdoc/installation.xml |   1 +
 src/site/xdoc/upgradeto295.xml | 152 +++++++++++++++++++++++++++++++++
 7 files changed, 173 insertions(+), 19 deletions(-)
 create mode 100644 src/site/xdoc/upgradeto295.xml

diff --git a/README.md b/README.md
index 531456390..229d6b8ca 100644
--- a/README.md
+++ b/README.md
@@ -46,24 +46,24 @@ Various documentation is available:
 
 
 ### Releases
-[Release 2.9.4](http://www.joda.org/joda-time/download.html) is the current latest release.
+[Release 2.9.5](http://www.joda.org/joda-time/download.html) is the current latest release.
 This release is considered stable and worthy of the 2.x tag.
 It depends on JDK 1.5 or later.
 
-Available in the [Maven Central repository](http://search.maven.org/#artifactdetails|joda-time|joda-time|2.9.4|jar)
+Available in the [Maven Central repository](http://search.maven.org/#artifactdetails|joda-time|joda-time|2.9.5|jar)
 
 **Maven configuration:**
 ```xml
 <dependency>
   <groupId>joda-time</groupId>
   <artifactId>joda-time</artifactId>
-  <version>2.9.4</version>
+  <version>2.9.5</version>
 </dependency>
 ```
 
 **Gradle configuration:**
 ```groovy
-compile 'joda-time:joda-time:2.9.4'
+compile 'joda-time:joda-time:2.9.5'
 ```
 
 ### Related projects
diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 30118d874..a800396d9 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -4,7 +4,7 @@ Joda-Time version 2.9.5
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes. For Java SE 8 and later, please use java.time instead.
 
-This release contains one bug fix, a time-zone update and some minor internal changes.
+This release contains some bug fixes, a time-zone update and some minor internal changes.
 The release runs on JDK 5 or later.
 
 Joda-Time is licensed under the business-friendly Apache License Version 2.
diff --git a/pom.xml b/pom.xml
index e2ad919f2..66ab543ec 100644
--- a/pom.xml
+++ b/pom.xml
@@ -9,7 +9,7 @@
   <artifactId>joda-time</artifactId>
   <packaging>jar</packaging>
   <name>Joda-Time</name>
-  <version>2.9.5-SNAPSHOT</version>
+  <version>2.9.5</version>
   <description>Date and time library to replace JDK date handling</description>
   <url>http://www.joda.org/joda-time/</url>
 
@@ -460,7 +460,8 @@
                 <exclude>org/joda/time/tz/ZoneInfoCompiler*</exclude>
               </excludes>
             </configuration>
-          </execution>        </executions>
+          </execution>
+        </executions>
         <!-- work around maven bug where properties files added twice -->
         <configuration>
           <excludes>
diff --git a/src/conf/MANIFEST.MF b/src/conf/MANIFEST.MF
index 0b0f6dad2..a74113d15 100644
--- a/src/conf/MANIFEST.MF
+++ b/src/conf/MANIFEST.MF
@@ -5,19 +5,19 @@ Specification-Vendor: Joda.org
 Specification-Version: 2.9
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time
-Implementation-Version: 2.9.4
+Implementation-Version: 2.9.5
 Implementation-Vendor-Id: org.joda
 Bundle-ManifestVersion: 2
 Bundle-Vendor: Joda.org
 Bundle-Name: Joda-Time
 Bundle-SymbolicName: joda-time
-Bundle-Version: 2.9.4
-Export-Package: org.joda.time;version=2.9.4,
- org.joda.time.base;version=2.9.4,
- org.joda.time.chrono;version=2.9.4,
- org.joda.time.convert;version=2.9.4,
- org.joda.time.field;version=2.9.4,
- org.joda.time.format;version=2.9.4,
- org.joda.time.tz;version=2.9.4
+Bundle-Version: 2.9.5
+Export-Package: org.joda.time;version=2.9.5,
+ org.joda.time.base;version=2.9.5,
+ org.joda.time.chrono;version=2.9.5,
+ org.joda.time.convert;version=2.9.5,
+ org.joda.time.field;version=2.9.5,
+ org.joda.time.format;version=2.9.5,
+ org.joda.time.tz;version=2.9.5
 Bundle-License: Apache 2.0
 Bundle-DocURL: http://www.joda.org/joda-time/
diff --git a/src/site/markdown/index.md b/src/site/markdown/index.md
index 287d3fd7c..50f0994a5 100644
--- a/src/site/markdown/index.md
+++ b/src/site/markdown/index.md
@@ -127,7 +127,7 @@ Joda-Time is licenced under the business friendly <a href="license.html">Apache
 
 ## <i></i> Releases
 
-[Release 2.9.4](download.html) is the current latest release.
+[Release 2.9.5](download.html) is the current latest release.
 This release is considered stable and worthy of the 2.x tag.
 See the [upgrade notes](installation.html) for full details.
 
@@ -135,13 +135,13 @@ Joda-Time requires Java SE 5 or later and has [no dependencies](dependencies.htm
 There is a *compile-time* dependency on [Joda-Convert](http://www.joda.org/joda-convert/),
 but this is not required at runtime thanks to the magic of annotations.
 
-Available in [Maven Central](http://search.maven.org/#artifactdetails%7Cjoda-time%7Cjoda-time%7C2.9.4%7Cjar).
+Available in [Maven Central](http://search.maven.org/#artifactdetails%7Cjoda-time%7Cjoda-time%7C2.9.5%7Cjar).
 
 ```xml
 <dependency>
   <groupId>joda-time</groupId>
   <artifactId>joda-time</artifactId>
-  <version>2.9.4</version>
+  <version>2.9.5</version>
 </dependency>
 ```
 
diff --git a/src/site/xdoc/installation.xml b/src/site/xdoc/installation.xml
index 4e6c2ae29..f46abc273 100644
--- a/src/site/xdoc/installation.xml
+++ b/src/site/xdoc/installation.xml
@@ -21,6 +21,7 @@ of the source code suitable for linking to the jar file in IDEs such as Eclipse.
 <p>
 The release notes for upgraders can be found here:
 <ul>
+<li><a href="upgradeto295.html">Version 2.9.5</a></li>
 <li><a href="upgradeto294.html">Version 2.9.4</a></li>
 <li><a href="upgradeto293.html">Version 2.9.3</a></li>
 <li><a href="upgradeto292.html">Version 2.9.2</a></li>
diff --git a/src/site/xdoc/upgradeto295.xml b/src/site/xdoc/upgradeto295.xml
new file mode 100644
index 000000000..f8f481709
--- /dev/null
+++ b/src/site/xdoc/upgradeto295.xml
@@ -0,0 +1,152 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Upgrade from 2.9 to 2.9.5</title>
+  <author>Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="Upgrade">
+<p>
+These are the release notes and advice for upgrading Joda-Time from version 2.8 to version 2.9.5.
+<source>
+Joda-Time version 2.9.5
+-----------------------
+
+Joda-Time is a date and time handling library that seeks to replace the JDK
+Date and Calendar classes. For Java SE 8 and later, please use java.time instead.
+
+This release contains some bug fixes, a time-zone update and some minor internal changes.
+The release runs on JDK 5 or later.
+
+Joda-Time is licensed under the business-friendly Apache License Version 2.
+This is the same license as all of Apache, plus other open source projects such as Spring.
+
+**  Please also check out our related projects   **
+** http://www.joda.org/joda-time/related.html **
+
+Changes in 2.9.5
+----------------
+ - Add Norwegian period translations [#378]
+
+ - Add Duration.dividedBy(long,RoundingMode) [#69, #379]
+
+ - DateTimeZone data updated to version 2016i
+
+ - Fixed bug where clock read twice when comparing two nulls in DateTimeComparator [#404]
+
+ - Fixed minor issues with historic time-zone data [#373]
+
+ - Fix bug in time-zone binary search [#332, #386]
+  The fix in v2.9.2 caused problems when the time-zone being parsed
+  was not the last element in the input string. New approach uses a
+  different approach to the problem.
+
+ - Update tests for JDK 9 [#394]
+
+ - Close buffered reader correctly in zone info compiler [#396]
+
+ - Handle locale correctly zone info compiler [#397]
+
+
+Changes in 2.9.4
+----------------
+ - DateTimeZone data updated to version 2016d
+
+ - Loading time-zone provider now occurs in a privileged block [#327, #375]
+
+
+Changes in 2.9.3
+----------------
+ - DateTimeZone data updated to version 2016c
+
+ - Make DateTimeUtils.SYSTEM_MILLIS_PROVIDER public [#357]
+
+ - Fix bug when adding months at the maximum limits of integer [#361]
+
+ - Add Turkish period translations [#364]
+
+
+Changes in 2.9.2
+----------------
+ - DateTimeZone data updated to version 2016a (version 2.9 had time-zone data 2015g)
+
+ - Fix bug in time-zone binary search [#332]
+
+ - Minor fixes to code internals [#339, #326, #344, #350, #343]
+
+ - Better document behaviour [#325]
+
+
+Changes in 2.9.1
+----------------
+- Fix bug introduced by Long.MIN_VALUE and Long.MAX_VALUE changes [#328]
+
+
+Enhancements in 2.9
+-------------------
+- Faster parsing of time-zone identifiers [#282]
+
+- Added Interval.parseWithOffset(String) [#299, #296]
+  Provides a way to parse the fixed offset in an interval string
+
+- Add DateTimeFormatter methods for StringBuilder [#298]
+
+- Add Russian period translations [#320]
+
+- Add Italian period translations [#312]
+
+- Add Czech period translations [#313]
+
+- Clarify that PeriodFormatterBuilder is in an invalid state once built [#309]
+
+- Allow DateTime and Interval to refer to values at Long.MIN_VALUE and Long.MAX_VALUE [#297, #190]
+  A DateTime may be created with any millisecond value, however at the very edges there may be
+  some undesirable effects, for example always using UTC instead of the time-zone
+
+- Better error message for malformed tzdb files [#319]
+
+- Better error message for interval constructor [#321]
+
+
+Compatibility between 2.8 and 2.9
+---------------------------------
+Build system - Yes
+
+Binary compatible - Yes
+
+Source compatible - Yes
+
+Serialization compatible - Yes
+
+Data compatible - Yes
+ - DateTimeZone data updated to version 2015g
+
+Semantic compatible - Yes
+
+
+Bug fixes in 2.9
+----------------
+- Fixed to handle JDK 8u60 [#288, #291]
+  Without this fix, formatting a time-zone will print "+00:00" instead of "GMT" for the GMT time-zone
+
+- Fix parsing of basic form ISO style where year has unnecessary plus sign [#86]
+  For example, +20151030 will now be correctly parsed as year 2015.
+
+- Fix overflow bug in intervals [#315]
+
+
+
+Scala
+-----
+Joda-Time uses annotations from Joda-Convert.
+In the Java programming language, this dependency is optional, however in Scala it is not.
+Scala users must manually add the Joda-Convert v1.2 dependency.
+</source>
+</p>
+</section>
+
+</body>
+</document>